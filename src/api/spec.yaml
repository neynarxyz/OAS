openapi: 3.0.4
info:
  title: Neynar API
  version: 3.60.0
  description: The Neynar API allows you to interact with the Farcaster protocol among other things. See the [Neynar docs](https://docs.neynar.com/reference) for more details.
  contact:
    name: Neynar
    url: https://neynar.com/
    email: team@neynar.com
servers:
  - url: https://api.neynar.com
security:
  - ApiKeyAuth: []
tags:
  - name: User
    description: Operations related to user
    externalDocs:
      description: More info about user
      url: https://docs.neynar.com/reference/user-operations
  - name: Signer
    description: Operations related to signer
    externalDocs:
      description: More info about signer
      url: https://docs.neynar.com/reference/signer-operations
  - name: Cast
    description: Operations related to cast
    externalDocs:
      description: More info about cast
      url: https://docs.neynar.com/reference/cast-operations
  - name: Feed
    description: Operations related to feed
    externalDocs:
      description: More info about feed
      url: https://docs.neynar.com/reference/feed-operations
  - name: Reaction
    description: Operations related to reaction
    externalDocs:
      description: More info about reaction
      url: https://docs.neynar.com/reference/reaction-operations
  - name: Notifications
    description: Operations related to notifications
    externalDocs:
      description: More info about notifications
      url: https://docs.neynar.com/reference/notifications-operations
  - name: Channel
    description: Operations related to channels
    externalDocs:
      description: More info about channels
      url: https://docs.neynar.com/reference/channel-operations
  - name: Follows
    description: Operations related to follows
    externalDocs:
      description: More info about follows
      url: https://docs.neynar.com/reference/follows-operations
  - name: Storage
    description: Operations related to storage
    externalDocs:
      description: More info about storage
      url: https://docs.neynar.com/reference/storage-operations
  - name: Frame
    description: Operations related to mini apps
  - name: Agents
    description: Operations for building AI agents
  - name: fname
    description: Operations related to fname
  - name: Webhook
    description: Operations related to a webhook
  - name: Action
    description: Securely communicate and perform actions on behalf of users across different apps
    externalDocs:
      description: More info about farcaster actions
      url: https://docs.neynar.com/docs/farcaster-actions-spec
  - name: Subscribers
    description: Operations related to a subscriptions
  - name: Mute
    description: Operations related to a mute
  - name: Block
    description: Operations related to a block
  - name: Ban
    description: Operations related to a ban
  - name: Onchain
    description: Operations related to onchain data
  - name: Login
    description: Operations related to login
  - name: Metrics
    description: Operations related to retrieving metrics
  - name: App Host
    description: Operations related to mini app host notifications
    externalDocs:
      description: More info about mini app host notifications
      url: https://docs.neynar.com/docs/app-host-notifications
paths:
  /v2/farcaster/action/:
    post:
      description: Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user's Farcaster signer.
      summary: User actions across apps
      tags:
        - Action
      operationId: publish-farcaster-action
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FarcasterActionReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
      externalDocs:
        url: https://docs.neynar.com/reference/publish-farcaster-action
  /v2/farcaster/app_host/user/state/:
    get:
      description: Returns the current notification state for a specific user across all mini app domains in this app host. Shows which domains have notifications enabled.
      summary: Enabled notifications
      tags:
        - App Host
      parameters:
        - name: fid
          in: query
          description: The FID of the user
          required: true
          schema:
            type: integer
            minimum: 1
      operationId: app-host-get-user-state
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppHostUserStateResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/app-host-get-user-state
  /v2/farcaster/app_host/user/event/:
    get:
      description: Returns event object for app host events. Used if the app host intends to sign the event message instead of using Neynar-hosted signers.
      summary: Generate event
      tags:
        - App Host
      parameters:
        - name: app_domain
          in: query
          description: The domain of the mini app
          required: true
          schema:
            type: string
            example: demo.neynar.com
        - name: fid
          in: query
          description: The FID of the user who initiated the event
          required: true
          schema:
            type: integer
            minimum: 1
        - name: event
          in: query
          description: The type of event
          required: true
          schema:
            type: string
            enum:
              - frame_added
              - frame_removed
              - notifications_enabled
              - notifications_disabled
      operationId: app-host-get-event
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppHostGetEventResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/app-host-get-event
    post:
      description: Post an app_host event to the domain's webhook. Events such as enabling or disabling notifications for a user. Provide either a signed message or the signer UUID of an authorized neynar-hosted signers.
      summary: Send event
      tags:
        - App Host
      operationId: app-host-post-event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppHostPostEventReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppHostPostEventResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '502':
          description: '502'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/app-host-post-event
  /v2/farcaster/auth_address/developer_managed/signed_key/:
    post:
      description: Allow apps to register an Ethereum addresses as authorized "auth addresses" for a user's Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
      summary: Register Signed Key
      tags:
        - AuthAddress
      operationId: register-signed-key-for-developer-managed-auth-address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAuthAddressDeveloperManagedSignedKeyReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/EthAddress'
                  status:
                    type: string
                    enum:
                      - pending_approval
                      - approved
                      - revoked
                  auth_address_approval_url:
                    type: string
                    format: uri
                  fid:
                    nullable: true
                    allOf:
                      - $ref: '#/components/schemas/Fid'
                required:
                  - address
                  - status
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/register-signed-key-for-developer-managed-auth-address
  /v2/farcaster/auth_address/developer_managed/:
    get:
      description: Fetches the status of a developer managed auth address by auth address
      summary: Status by auth address
      tags:
        - AuthAddress
      parameters:
        - name: address
          in: query
          description: Ethereum address
          required: true
          schema:
            type: string
            pattern: ^0x[a-fA-F0-9]{40}$
            example: '0x5a927ac639636e534b678e81768ca19e2c6280b7'
            title: EthAddress
      operationId: lookup-developer-managed-auth-address
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    $ref: '#/components/schemas/EthAddress'
                  status:
                    type: string
                    enum:
                      - pending_approval
                      - approved
                      - revoked
                  auth_address_approval_url:
                    type: string
                    format: uri
                  fid:
                    nullable: true
                    allOf:
                      - $ref: '#/components/schemas/Fid'
                required:
                  - address
                  - status
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-developer-managed-auth-address
  /v2/farcaster/ban/list/:
    get:
      description: Fetches all FIDs that your app has banned.
      summary: Banned FIDs of app
      tags:
        - Ban
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
            example: 20
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-ban-list
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-ban-list
  /v2/farcaster/ban/:
    post:
      description: Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.
      summary: Ban FIDs from app
      tags:
        - Ban
      operationId: publish-bans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/publish-bans
    delete:
      description: Deletes a list of FIDs from the app associated with your API key.
      summary: Unban FIDs from app
      tags:
        - Ban
      operationId: delete-bans
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BanResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/delete-bans
  /v2/farcaster/block/list/:
    get:
      description: Fetches all FIDs that a user has blocked or has been blocked by
      summary: Blocked / Blocked by FIDs
      tags:
        - Block
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: blocker_fid
          in: query
          description: Providing this will return the users that this user has blocked
          schema:
            type: integer
            minimum: 1
            example: 194
        - name: blocked_fid
          in: query
          description: Providing this will return the users that have blocked this user
          schema:
            type: integer
            minimum: 1
            example: 194
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
            example: 20
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-block-list
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-block-list
  /v2/farcaster/block/:
    post:
      description: Adds a block for a given FID.
      summary: Block FID
      tags:
        - Block
      operationId: publish-block
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/publish-block
    delete:
      description: Deletes a block for a given FID.
      summary: Unblock FID
      tags:
        - Block
      operationId: delete-block
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/delete-block
  /v2/farcaster/cast/conversation/summary/:
    get:
      description: Generates a summary of all casts related to a conversation surrounding a cast by passing in a cast hash or Farcaster URL.  Summary is generated by an LLM and is intended to be passed as a context to AI agents.
      summary: Cast conversation summary
      tags:
        - Agents
      parameters:
        - name: identifier
          in: query
          description: Cast identifier (It's either a URL or a hash))
          required: true
          schema:
            type: string
            example: '0x9288c1e862aa72bd69d0e383a28b9a76b63cbdb4'
        - name: limit
          in: query
          description: Number of casts to consider in a summary up to a point of target cast
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 50
            example: 50
          x-is-limit-param: true
        - name: prompt
          in: query
          description: Additional prompt used to generate a summary
          schema:
            type: string
            example: be unreasonably dramatic
      operationId: lookup-cast-conversation-summary
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationSummary'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-cast-conversation-summary
  /v2/farcaster/cast/conversation/:
    get:
      description: Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Farcaster URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
      summary: Conversation for a cast
      tags:
        - Cast
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: identifier
          in: query
          description: Cast identifier (It's either a URL or a hash)
          required: true
          schema:
            type: string
            example: https://warpcast.com/rish/0x9288c1
        - name: type
          in: query
          description: |-
            The query param accepted by the API. Sent along with identifier param.
            url - Cast identifier is a url
            hash - Cast identifier is a hash
          required: true
          schema:
            type: string
            enum:
              - url
              - hash
            example: url
        - name: reply_depth
          in: query
          description: The depth of replies in the conversation that will be returned (default 2)
          schema:
            default: 2
            type: integer
            minimum: 0
            maximum: 5
            nullable: true
        - name: include_chronological_parent_casts
          in: query
          description: Include all parent casts in chronological order
          schema:
            default: false
            type: boolean
            nullable: true
        - name: viewer_fid
          in: query
          description: Providing this will return a conversation that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
        - name: sort_type
          in: query
          description: Sort type for the ordering of descendants. Default is `chron`
          schema:
            type: string
            enum:
              - chron
              - desc_chron
              - algorithmic
            example: chron
        - name: fold
          in: query
          description: Show conversation above or below the fold. Lower quality responses are hidden below the fold. Not passing in a value shows the full conversation without any folding.
          schema:
            type: string
            enum:
              - above
              - below
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 50
            example: 30
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: lookup-cast-conversation
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-cast-conversation
  /v2/farcaster/cast/metrics/:
    get:
      description: Fetches metrics casts matching a query
      summary: Metrics for casts
      tags:
        - Metrics
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: q
          in: query
          description: Query string to search for casts
          required: true
          schema:
            type: string
            example: star wars
        - name: interval
          in: query
          description: Interval of time for which to fetch metrics. Default is 30d.
          schema:
            type: string
            enum:
              - 1d
              - 7d
              - 30d
              - 90d
              - 180d
        - name: author_fid
          in: query
          description: Fid of the user whose casts you want to search
          schema:
            type: integer
            minimum: 1
        - name: channel_id
          in: query
          description: Channel ID of the casts you want to search
          schema:
            type: string
      operationId: fetch-cast-metrics
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CastsMetricsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-cast-metrics
  /v2/farcaster/cast/search/:
    get:
      description: Search for casts based on a query string, with optional AND filters
      summary: Search for casts
      tags:
        - Cast
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: q
          in: query
          description: |-
            Query string to search for casts. Supported operators:

            | Operator  | Description                                                                                              |
            | --------- | -------------------------------------------------------------------------------------------------------- |
            | `+`       | Acts as the AND operator. This is the default operator between terms and can usually be omitted.         |
            | `\|`      | Acts as the OR operator.                                                                                 |
            | `*`       | When used at the end of a term, signifies a prefix query.                                                  |
            | `"`       | Wraps several terms into a phrase (for example, `"star wars"`).                                          |
            | `(`, `)`  | Wrap a clause for precedence (for example, `star + (wars \| trek)`).                                     |
            | `~n`      | When used after a term (for example, `satr~3`), sets `fuzziness`. When used after a phrase, sets `slop`. |
            | `-`       | Negates the term.                                                                                        |
            | `before:` | Search for casts before a specific date. (e.g. `before:2025-04-20` or `before:2025-04-20T23:59:59`)      |
            | `after:`  | Search for casts after a specific date. (e.g. `after:2025-04-20` or `after:2025-04-20T00:00:00`)         |
          required: true
          schema:
            type: string
            example: star (wars | trek) "space battle" after:2024-05-04
        - name: mode
          in: query
          description: |-
            Choices are:
            - `literal` - Searches for the words in the query string (default)
            - `semantic` - Searches for the meaning of the query string
            - `hybrid` - Combines both literal and semantic results
          schema:
            type: string
            enum:
              - literal
              - semantic
              - hybrid
            example: literal
        - name: sort_type
          in: query
          description: |-
            Choices are:
            - `desc_chron` - All casts sorted by time in a descending order (default)
            - `chron` - All casts sorted by time in ascending order
            - `algorithmic` - Casts sorted by engagement and time
          schema:
            type: string
            enum:
              - desc_chron
              - chron
              - algorithmic
            example: desc_chron
        - name: author_fid
          in: query
          description: Fid of the user whose casts you want to search
          schema:
            type: integer
            minimum: 1
        - name: viewer_fid
          in: query
          description: Providing this will return search results that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
        - name: parent_url
          in: query
          description: Parent URL of the casts you want to search
          schema:
            type: string
        - name: channel_id
          in: query
          description: Channel ID of the casts you want to search
          schema:
            type: string
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 100
            example: 25
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor
          schema:
            type: string
      operationId: search-casts
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CastsSearchResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/search-casts
  /v2/farcaster/cast/composer_actions/list/:
    get:
      description: Fetches all composer actions on Warpcast. You can filter by top or featured.
      summary: Fetch composer actions
      tags:
        - Cast
      parameters:
        - name: list
          in: query
          description: Type of list to fetch.
          required: true
          schema:
            type: string
            enum:
              - top
              - featured
            example: top
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 25
            example: 25
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-composer-actions
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CastComposerActionsListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-composer-actions
  /v2/farcaster/cast/embed/crawl/:
    get:
      description: Crawls the given URL and returns metadata useful when embedding the URL in a cast.
      summary: Embedded URL metadata
      tags:
        - Cast
      parameters:
        - name: url
          in: query
          description: URL to crawl metadata of
          required: true
          schema:
            type: string
      operationId: fetch-embedded-url-metadata
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CastEmbedCrawlResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-embedded-url-metadata
  /v2/farcaster/cast/quotes/:
    get:
      description: Fetch casts that quote a given cast
      summary: Cast Quotes
      tags:
        - Cast
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: identifier
          in: query
          description: Cast identifier (It's either a URL or a hash)
          required: true
          schema:
            type: string
            example: https://farcaster.xyz/rish/0xafa59bb7
        - name: type
          in: query
          description: |-
            The query param accepted by the API. Sent along with identifier param.
            url - Cast identifier is a url
            hash - Cast identifier is a hash
          required: true
          schema:
            type: string
            enum:
              - url
              - hash
            example: url
        - name: viewer_fid
          in: query
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 100
            example: 30
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-cast-quotes
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  casts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Cast'
                  next:
                    $ref: '#/components/schemas/NextCursor'
                required:
                  - casts
                  - next
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-cast-quotes
  /v2/farcaster/cast/:
    get:
      description: Gets information about an individual cast by passing in a Farcaster web URL or cast hash
      summary: By hash or URL
      tags:
        - Cast
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: identifier
          in: query
          description: Cast identifier (It's either a URL or a hash)
          required: true
          schema:
            type: string
            example: https://farcaster.xyz/rish/0xafa59bb7
        - name: type
          in: query
          description: |-
            The query param accepted by the API. Sent along with identifier param.
            url - Cast identifier is a url
            hash - Cast identifier is a hash
          required: true
          schema:
            type: string
            enum:
              - url
              - hash
            example: url
        - name: viewer_fid
          in: query
          description: adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
          schema:
            type: integer
            minimum: 1
      operationId: lookup-cast-by-hash-or-url
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CastResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-cast-by-hash-or-url
    post:
      description: "Posts a cast or cast reply. Works with mentions and embeds.  \n(In order to post a cast `signer_uuid` must be approved)"
      summary: Post a cast
      tags:
        - Cast
      operationId: publish-cast
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCastReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCastResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/publish-cast
    delete:
      description: "Delete an existing cast. \n(In order to delete a cast `signer_uuid` must be approved)"
      summary: Delete a cast
      tags:
        - Cast
      operationId: delete-cast
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCastReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/delete-cast
  /v2/farcaster/casts/:
    get:
      description: Fetch multiple casts using their respective hashes.
      summary: Bulk fetch casts
      tags:
        - Cast
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: casts
          in: query
          description: Hashes of the cast to be retrived (Comma separated, no spaces)
          required: true
          schema:
            type: string
            example: 0xa896906a5e397b4fec247c3ee0e9e4d4990b8004,0x27ff810f7f718afd8c40be236411f017982e0994
            x-comma-separated: true
        - name: viewer_fid
          in: query
          description: adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
          schema:
            type: integer
            minimum: 1
        - name: sort_type
          in: query
          description: Optional parameter to sort the casts based on different criteria
          schema:
            type: string
            enum:
              - trending
              - likes
              - recasts
              - replies
              - recent
      operationId: fetch-bulk-casts
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CastsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-bulk-casts
  /v2/farcaster/channel/list/:
    get:
      description: Returns a list of all channels with their details
      summary: Fetch all channels with their details
      tags:
        - Channel
      parameters:
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 200
            example: 30
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-all-channels
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelListResponse'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-all-channels
  /v2/farcaster/channel/member/list/:
    get:
      description: Fetch a list of members in a channel
      summary: Fetch members
      tags:
        - Channel
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: channel_id
          in: query
          description: Channel ID for the channel being queried
          required: true
          schema:
            type: string
            example: neynar
        - name: fid
          in: query
          description: FID of the user being queried. Specify this to check if a user is a member of the channel without paginating through all members.
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-channel-members
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelMemberListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-channel-members
  /v2/farcaster/channel/member/invite/list/:
    get:
      description: Fetch a list of invites, either in a channel or for a user. If both are provided, open channel invite for that user is returned.
      summary: Open invites
      tags:
        - Channel
      parameters:
        - name: channel_id
          in: query
          description: Channel ID for the channel being queried
          schema:
            type: string
            example: neynar
        - name: invited_fid
          in: query
          description: FID of the user being invited
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-channel-invites
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelMemberInviteListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-channel-invites
  /v2/farcaster/channel/member/invite/:
    post:
      description: Invite a user to a channel
      summary: Invite
      tags:
        - Channel
      operationId: invite-channel-member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteChannelMemberReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/invite-channel-member
    put:
      description: Accept or reject a channel invite
      summary: Accept or reject an invite
      tags:
        - Channel
      operationId: respond-channel-invite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RespondChannelInviteReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/respond-channel-invite
  /v2/farcaster/channel/member/:
    delete:
      description: Remove a user from a channel or a user's invite to a channel role
      summary: Remove user
      tags:
        - Channel
      operationId: remove-channel-member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveChannelMemberReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/remove-channel-member
  /v2/farcaster/channel/search/:
    get:
      description: Returns a list of channels based on ID or name
      summary: Search by ID or name
      tags:
        - Channel
      parameters:
        - name: q
          in: query
          description: Channel ID or name for the channel being queried
          required: true
          schema:
            type: string
            example: neynar
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 200
            example: 30
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
        - name: viewer_fid
          in: query
          description: FID of the user viewing the channels.
          schema:
            type: integer
            minimum: 1
      operationId: search-channels
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelSearchResponse'
      externalDocs:
        url: https://docs.neynar.com/reference/search-channels
  /v2/farcaster/channel/bulk/:
    get:
      description: Returns details of multiple channels
      summary: Bulk fetch
      tags:
        - Channel
      parameters:
        - name: ids
          in: query
          description: Comma separated list of channel IDs or parent_urls, up to 100 at a time
          required: true
          schema:
            type: string
            example: neynar,warpcast
            x-comma-separated: true
        - name: type
          in: query
          description: Type of identifier being used to query the channels. Defaults to ID.
          schema:
            type: string
            enum:
              - id
              - parent_url
            title: ChannelType
            example: id
        - name: viewer_fid
          in: query
          description: FID of the user viewing the channels.
          schema:
            type: integer
            minimum: 1
      operationId: fetch-bulk-channels
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelResponseBulk'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-bulk-channels
  /v2/farcaster/channel/follow/:
    post:
      description: Follow a channel
      summary: Follow a channel
      tags:
        - Channel
      operationId: follow-channel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelFollowReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/follow-channel
    delete:
      description: Unfollow a channel
      summary: Unfollow a channel
      tags:
        - Channel
      operationId: unfollow-channel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelFollowReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/unfollow-channel
  /v2/farcaster/channel/followers/relevant/:
    get:
      description: Returns a list of relevant channel followers for a specific FID. This usually shows on a channel as "X, Y, Z follow this channel".
      summary: Relevant followers
      tags:
        - Channel
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: id
          in: query
          description: Channel ID being queried
          required: true
          schema:
            type: string
            example: neynar
        - name: viewer_fid
          in: query
          description: The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user's mutes and blocks and includes `viewer_context`.
          required: true
          schema:
            type: integer
            minimum: 1
      operationId: fetch-relevant-followers-for-a-channel
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelevantFollowersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-relevant-followers-for-a-channel
  /v2/farcaster/channel/followers/:
    get:
      description: Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
      summary: For channel
      tags:
        - Channel
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: id
          in: query
          description: Channel ID for the channel being queried
          required: true
          schema:
            type: string
            example: founders
        - name: viewer_fid
          in: query
          description: Providing this will return a list of followers that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
        - name: limit
          in: query
          description: Number of followers to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 1000
          x-is-limit-param: true
      operationId: fetch-followers-for-a-channel
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-followers-for-a-channel
  /v2/farcaster/channel/user/:
    get:
      description: Fetches all channels that a user has casted in, in reverse chronological order.
      summary: Fetch channels that user is active in
      tags:
        - Channel
      parameters:
        - name: fid
          in: query
          description: The user's FID (identifier)
          required: true
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-users-active-channels
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersActiveChannelsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-users-active-channels
  /v2/farcaster/channel/trending/:
    get:
      description: Returns a list of trending channels based on activity
      summary: Channels by activity
      tags:
        - Channel
      parameters:
        - name: time_window
          in: query
          schema:
            type: string
            enum:
              - 1d
              - 7d
              - 30d
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 10
            type: integer
            minimum: 1
            maximum: 25
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-trending-channels
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrendingChannelResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-trending-channels
  /v2/farcaster/channel/:
    get:
      description: Returns details of a channel
      summary: By ID or parent_url
      tags:
        - Channel
      parameters:
        - name: id
          in: query
          description: Channel ID for the channel being queried
          required: true
          schema:
            type: string
            example: neynar
        - name: type
          in: query
          description: Type of identifier being used to query the channel. Defaults to ID.
          schema:
            type: string
            enum:
              - id
              - parent_url
            title: ChannelType
            example: id
        - name: viewer_fid
          in: query
          description: FID of the user viewing the channel.
          schema:
            type: integer
            minimum: 1
      operationId: lookup-channel
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-channel
  /v2/farcaster/feed/following/:
    get:
      description: Fetch feed based on who a user is following
      summary: Following
      tags:
        - Feed
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: fid
          in: query
          description: FID of user whose feed you want to create
          required: true
          schema:
            type: integer
            minimum: 1
        - name: viewer_fid
          in: query
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
        - name: with_recasts
          in: query
          description: Include recasts in the response, true by default
          schema:
            default: true
            type: boolean
            nullable: true
            example: true
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 100
            example: 30
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-user-following-feed
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-following-feed
  /v2/farcaster/feed/for_you/:
    get:
      description: Fetch a personalized For You feed for a user
      summary: For you
      tags:
        - Feed
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: fid
          in: query
          description: FID of user whose feed you want to create
          required: true
          schema:
            type: integer
            minimum: 1
        - name: viewer_fid
          in: query
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
            example: 3
        - name: provider
          in: query
          description: The provider of the For You feed.
          schema:
            default: neynar
            type: string
            enum:
              - neynar
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 50
            example: 30
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-feed-for-you
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ZodError'
                  - $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-feed-for-you
  /v2/farcaster/feed/channels/:
    get:
      description: Fetch feed based on channel IDs
      summary: By channel IDs
      tags:
        - Feed
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: channel_ids
          in: query
          description: Comma separated list of up to 10 channel IDs e.g. neynar,farcaster
          required: true
          schema:
            type: string
            example: neynar,farcaster
            x-comma-separated: true
        - name: with_recasts
          in: query
          description: Include recasts in the response, true by default
          schema:
            default: true
            type: boolean
            nullable: true
        - name: viewer_fid
          in: query
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
        - name: with_replies
          in: query
          description: Include replies in the response, false by default
          schema:
            default: false
            type: boolean
            nullable: true
        - name: members_only
          in: query
          description: Used when filter_type=channel_id. Only include casts from members of the channel. True by default.
          schema:
            default: true
            type: boolean
            nullable: true
            example: true
            deprecated: true
        - name: fids
          in: query
          description: Comma separated list of FIDs to filter the feed by, up to 10 at a time
          schema:
            type: string
            x-comma-separated: true
            x-accept-as: integer
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 100
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
        - name: should_moderate
          in: query
          description: If true, only casts that have been liked by the moderator (if one exists) will be returned.
          schema:
            default: false
            type: boolean
            nullable: true
            deprecated: true
      operationId: fetch-feed-by-channel-ids
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-feed-by-channel-ids
  /v2/farcaster/feed/parent_urls/:
    get:
      description: Fetch feed based on parent URLs
      summary: By parent URLs
      tags:
        - Feed
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: parent_urls
          in: query
          description: Comma separated list of parent_urls
          required: true
          schema:
            type: string
            x-comma-separated: true
            example: chain://eip155:1/erc721:0xd4498134211baad5846ce70ce04e7c4da78931cc
        - name: with_recasts
          in: query
          description: Include recasts in the response, true by default
          schema:
            default: true
            type: boolean
            nullable: true
        - name: viewer_fid
          in: query
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
        - name: with_replies
          in: query
          description: Include replies in the response, false by default
          schema:
            default: false
            type: boolean
            nullable: true
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 100
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-feed-by-parent-urls
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-feed-by-parent-urls
  /v2/farcaster/feed/trending/:
    get:
      description: Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
      summary: Trending feeds
      tags:
        - Feed
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 10
            type: integer
            minimum: 1
            maximum: 10
            format: int32
            example: 10
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor
          schema:
            type: string
        - name: viewer_fid
          in: query
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
        - name: time_window
          in: query
          description: Time window for trending casts (7d window for channel feeds only)
          schema:
            default: 24h
            type: string
            enum:
              - 1h
              - 6h
              - 12h
              - 24h
              - 7d
            example: 24h
        - name: channel_id
          in: query
          description: Channel ID to filter trending casts. Less active channels might have no casts in the time window selected. Provide either `channel_id` or `parent_url`, not both.
          schema:
            type: string
            example: neynar
        - name: parent_url
          in: query
          description: Parent URL to filter trending casts. Less active channels might have no casts in the time window selected. Provide either `channel_id` or `parent_url`, not both.
          schema:
            type: string
            example: chain://eip155:1/erc721:0xd4498134211baad5846ce70ce04e7c4da78931cc
        - name: provider
          in: query
          description: The provider of the trending casts feed.
          schema:
            default: neynar
            type: string
            enum:
              - neynar
            example: neynar
        - name: provider_metadata
          in: query
          description: provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
          schema:
            type: string
      operationId: fetch-trending-feed
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ZodError'
                  - $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-trending-feed
  /v2/farcaster/feed/user/popular/:
    get:
      description: Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
      summary: 10 most popular casts
      tags:
        - Feed
      parameters:
        - name: fid
          in: query
          description: FID of user whose feed you want to create
          required: true
          schema:
            type: integer
            minimum: 1
        - name: viewer_fid
          in: query
          schema:
            type: integer
            minimum: 1
      operationId: fetch-popular-casts-by-user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkCastsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-popular-casts-by-user
  /v2/farcaster/feed/user/replies_and_recasts/:
    get:
      description: Fetch recent replies and recasts for a given user FID; sorted by most recent first
      summary: Replies and recasts
      tags:
        - Feed
      parameters:
        - name: fid
          in: query
          description: FID of user whose replies and recasts you want to fetch
          required: true
          schema:
            type: integer
            minimum: 1
        - name: filter
          in: query
          description: Filter to fetch only replies or recasts
          schema:
            default: all
            type: string
            enum:
              - replies
              - recasts
              - all
            example: replies
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 50
            format: int32
            example: 30
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
        - name: viewer_fid
          in: query
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
      operationId: fetch-replies-and-recasts-for-user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user
  /v2/farcaster/feed/user/casts/:
    get:
      description: Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
      summary: Chronologically
      tags:
        - Feed
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: fid
          in: query
          description: FID of user whose recent casts you want to fetch
          required: true
          schema:
            type: integer
            minimum: 1
            example: 194
        - name: app_fid
          in: query
          description: Optionally filter to casts created via a specific app FID, e.g. 9152 for Warpcast
          schema:
            type: integer
            minimum: 1
            example: 9152
        - name: viewer_fid
          in: query
          description: FID of the user viewing the feed
          schema:
            type: integer
            minimum: 1
            example: 3
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 150
            example: 30
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor
          schema:
            type: string
        - name: include_replies
          in: query
          description: Include reply casts by the author in the response, true by default
          schema:
            default: true
            type: boolean
            nullable: true
            example: true
        - name: parent_url
          in: query
          description: Parent URL to filter the feed; mutually exclusive with channel_id
          schema:
            type: string
        - name: channel_id
          in: query
          description: Channel ID to filter the feed; mutually exclusive with parent_url
          schema:
            type: string
      operationId: fetch-casts-for-user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-casts-for-user
  /v2/farcaster/feed/:
    get:
      description: Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
      summary: By filters
      tags:
        - Feed
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: feed_type
          in: query
          description: Defaults to following (requires FID or address). If set to filter (requires filter_type)
          schema:
            default: following
            type: string
            enum:
              - following
              - filter
            title: FeedType
            example: filter
        - name: filter_type
          in: query
          description: Used when feed_type=filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id)
          schema:
            type: string
            enum:
              - fids
              - parent_url
              - channel_id
              - embed_url
              - embed_types
              - global_trending
            title: FilterType
            example: fids
        - name: fid
          in: query
          description: (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
          schema:
            type: integer
            minimum: 1
        - name: fids
          in: query
          description: Used when filter_type=FIDs . Create a feed based on a list of FIDs. Max array size is 100. Requires feed_type and filter_type.
          schema:
            type: string
            example: 3,2,194
            x-comma-separated: true
            x-accept-as: integer
        - name: parent_url
          in: query
          description: Used when filter_type=parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type.
          schema:
            type: string
            example: chain://eip155:1/erc721:0xd4498134211baad5846ce70ce04e7c4da78931cc
        - name: channel_id
          in: query
          description: Used when filter_type=channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type.
          schema:
            type: string
            example: neynar
        - name: members_only
          in: query
          description: Used when filter_type=channel_id. Only include casts from members of the channel. True by default.
          schema:
            default: true
            type: boolean
            nullable: true
            example: true
            deprecated: true
        - name: embed_url
          in: query
          description: Used when filter_type=embed_url. Casts with embedded URLs prefixed by this embed_url param will be returned. We normalize your given URL prefix and prepend 'https://' if no protocol is included. Requires feed_type and filter_type.
          schema:
            type: string
            example: https://example.com
        - name: embed_types
          in: query
          description: Used when filter_type=embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type.
          schema:
            type: array
            items:
              type: string
              enum:
                - text
                - image
                - video
                - audio
                - text/html
                - text/plain
                - image/jpeg
                - image/png
                - image/gif
                - image/webp
                - image/svg+xml
                - image/heif
                - video/mp4
                - video/quicktime
                - audio/mpeg
                - application/pdf
                - application/json
                - application/x-mpegurl
              title: EmbedType
              description: The content type of the embedded file
        - name: with_recasts
          in: query
          description: Include recasts in the response, true by default
          schema:
            default: true
            type: boolean
            nullable: true
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 100
            example: 30
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
        - name: viewer_fid
          in: query
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
            example: 3
      operationId: fetch-feed
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-feed
  /v2/farcaster/fname/availability/:
    get:
      description: Check if a given fname is available
      summary: Check fname availability
      tags:
        - fname
      parameters:
        - name: fname
          in: query
          required: true
          schema:
            type: string
      operationId: is-fname-available
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FnameAvailabilityResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/is-fname-available
  /v2/farcaster/followers/reciprocal/:
    get:
      description: Returns users who the given FID follows and they follow the FID back (reciprocal following relationship)
      summary: Reciprocal Followers
      tags:
        - Follows
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: fid
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
        - name: viewer_fid
          in: query
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor
          schema:
            type: string
        - name: sort_type
          in: query
          schema:
            default: algorithmic
            type: string
            enum:
              - desc_chron
              - algorithmic
      operationId: fetch-user-reciprocal-followers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReciprocalFollower'
                  next:
                    $ref: '#/components/schemas/NextCursor'
                required:
                  - users
                  - next
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-reciprocal-followers
  /v2/farcaster/followers/relevant/:
    get:
      description: Returns a list of relevant followers for a specific FID. This usually shows on a profile as "X, Y and Z follow this user".
      summary: Relevant followers
      tags:
        - Follows
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: target_fid
          in: query
          description: User who's profile you are looking at
          required: true
          schema:
            type: integer
            minimum: 1
        - name: viewer_fid
          in: query
          description: The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user's mutes and blocks and includes `viewer_context`.
          required: true
          schema:
            type: integer
            minimum: 1
      operationId: fetch-relevant-followers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelevantFollowersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-relevant-followers
  /v2/farcaster/followers/:
    get:
      description: Returns a list of followers for a specific FID.
      summary: Followers
      tags:
        - Follows
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: fid
          in: query
          description: User who's profile you are looking at
          required: true
          schema:
            type: integer
            minimum: 1
        - name: viewer_fid
          in: query
          description: Providing this will return a list of followers that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
        - name: sort_type
          in: query
          description: Sort type for fetch followers. Default is `desc_chron`
          schema:
            type: string
            enum:
              - desc_chron
              - algorithmic
            example: desc_chron
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
            example: 30
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-user-followers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-followers
  /v2/farcaster/following/suggested/:
    get:
      description: Fetch a list of suggested users to follow. Used to help users discover new users to follow
      summary: Suggest Follows
      tags:
        - Follows
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: fid
          in: query
          description: FID of the user whose following you want to fetch.
          required: true
          schema:
            type: integer
            nullable: true
        - name: viewer_fid
          in: query
          description: Providing this will return a list of users that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            nullable: true
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 100
            format: int32
          x-is-limit-param: true
      operationId: fetch-follow-suggestions
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-follow-suggestions
  /v2/farcaster/following/:
    get:
      description: Fetch a list of users who a given user is following. Can optionally include a viewer_fid and sort_type.
      summary: Following
      tags:
        - Follows
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: fid
          in: query
          description: FID of the user whose following you want to fetch.
          required: true
          schema:
            type: integer
            minimum: 1
        - name: viewer_fid
          in: query
          description: Providing this will return a list of users that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
            example: 3
        - name: sort_type
          in: query
          description: Optional parameter to sort the users based on different criteria.
          schema:
            type: string
            enum:
              - desc_chron
              - algorithmic
            example: desc_chron
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 100
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-user-following
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-following
  /v2/farcaster/frame/catalog/:
    get:
      description: A curated list of featured mini apps
      summary: Mini apps catalog
      tags:
        - Frame
      parameters:
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 100
            type: integer
            minimum: 1
            maximum: 100
            format: int32
            example: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor
          schema:
            type: string
        - name: time_window
          in: query
          description: Time window used to calculate the change in trending score for each mini app, used to sort mini app results
          schema:
            default: 7d
            type: string
            enum:
              - 1h
              - 6h
              - 12h
              - 24h
              - 7d
            title: MiniAppTimeWindow
            example: 7d
        - name: categories
          in: query
          description: 'Comma separated list of categories to include in the results. Includes all if left blank. Example: categories=games,social OR categories=games&categories=social'
          schema:
            type: array
            items:
              type: string
              enum:
                - games
                - social
                - finance
                - utility
                - productivity
                - health-fitness
                - news-media
                - music
                - shopping
                - education
                - developer-tools
                - entertainment
                - art-creativity
              title: FrameCategory
            example:
              - games
              - social
        - name: networks
          in: query
          description: List of blockchain networks by which to filter results.  Mini apps included in the results will specify at least one of the supplied networks or specify none. The list can be provided as comma-separated string or array.
          schema:
            type: array
            items:
              type: string
              enum:
                - ethereum
                - base
                - arbitrum
                - arbitrum-sepolia
                - base-sepolia
                - degen
                - gnosis
                - optimism
                - optimism-sepolia
                - polygon
                - ethereum-sepolia
                - zora
                - unichain
                - monad-testnet
                - celo
                - solana
              description: Networks supported by mini apps
              example: base
            title: MiniappNetworksSchema
            example:
              - ethereum
              - base
              - solana
      operationId: fetch-frame-catalog
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FrameCatalogResponse'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-frame-catalog
  /v2/farcaster/frame/list/:
    get:
      description: Fetch a list of mini apps made by the developer (identified by API key)
      summary: List of mini apps
      tags:
        - Frame
      operationId: fetch-neynar-frames
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NeynarFrame'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-neynar-frames
  /v2/farcaster/frame/crawl/:
    get:
      description: Fetches the mini app meta tags from the URL
      summary: Meta tags from URL
      tags:
        - Frame
      parameters:
        - name: url
          in: query
          description: The mini app URL to crawl
          required: true
          schema:
            type: string
            format: uri
            example: https://frames.neynar.com/f/862277df/ff7be6a4
      operationId: fetch-frame-meta-tags-from-url
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  frame:
                    $ref: '#/components/schemas/Frame'
                required:
                  - frame
                description: The mini app object containing the meta tags
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url
  /v2/farcaster/frame/developer_managed/action/:
    post:
      description: |-
        Post a mini app action that has been signed with a developer managed signer

        The POST request to the post_url has a timeout of 5 seconds.
      summary: Signature packet
      tags:
        - Frame
      operationId: post-frame-action-developer-managed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FrameDeveloperManagedActionReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Frame'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/post-frame-action-developer-managed
  /v2/farcaster/frame/action/:
    post:
      description: |-
        Post mini app actions, cast actions or cast composer actions to the server
        (In order to post any of these actions, you need to have an approved `signer_uuid`)

        The POST request to the post_url has a timeout of 5 seconds for mini apps.
      summary: Post a mini app action, cast action or a cast composer action
      tags:
        - Frame
      operationId: post-frame-action
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FrameActionReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Frame'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/post-frame-action
  /v2/farcaster/frame/notification_tokens/:
    get:
      description: Returns a list of notifications tokens related to a mini app
      summary: List of mini app notification tokens
      tags:
        - Frame
      parameters:
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
            format: int32
            example: 20
          x-is-limit-param: true
        - name: fids
          in: query
          description: Comma separated list of FIDs, up to 100 at a time. If you pass in FIDs, you will get back the notification tokens for those FIDs. If you don't pass in FIDs, you will get back all the notification tokens for the mini app.
          schema:
            type: string
            example: 194, 191, 6131
            x-comma-separated: true
            x-accept-as: integer
        - name: cursor
          in: query
          description: Pagination cursor
          schema:
            type: string
      operationId: fetch-notification-tokens
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FrameNotificationTokens'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-notification-tokens
  /v2/farcaster/frame/notifications/:
    post:
      description: Send notifications to interactors of a mini app
      summary: Send notifications
      tags:
        - Frame
      operationId: publish-frame-notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendFrameNotificationsReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendFrameNotificationsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ZodError'
                  - $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/publish-frame-notifications
    get:
      description: Retrieve notification delivery and opened stats for notification campaigns
      summary: Get notification campaign stats
      tags:
        - Frame
      parameters:
        - name: campaign_id
          in: query
          description: An ID of a specific notification campaign to query
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: The number of results to return
          schema:
            default: 100
            type: integer
            minimum: 1
            maximum: 1000
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor
          schema:
            type: string
      operationId: get-notification-campaign-stats
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  notificationCampaigns:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotificationCampaign'
                  next:
                    $ref: '#/components/schemas/NextCursor'
                required:
                  - notificationCampaigns
                  - next
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ZodError'
                  - $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/get-notification-campaign-stats
  /v2/farcaster/frame/transaction/pay/:
    post:
      description: Creates a new transaction pay mini app that can be used to collect payments through a mini app
      summary: Create transaction pay mini app
      tags:
        - Agents
      operationId: create-transaction-pay-frame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FramePayTransactionReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionFrameResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/create-transaction-pay-frame
    get:
      description: Retrieves details about a transaction pay mini app by ID
      summary: Get transaction pay mini app
      tags:
        - Frame
      parameters:
        - name: id
          in: query
          description: ID of the transaction mini app to retrieve
          required: true
          schema:
            type: string
      operationId: get-transaction-pay-frame
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionFrameResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/get-transaction-pay-frame
  /v2/farcaster/frame/validate/analytics/:
    get:
      description: Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
      summary: Analytics for the mini app
      tags:
        - Frame
      parameters:
        - name: frame_url
          in: query
          description: URL of the mini app to fetch analytics for
          required: true
          schema:
            type: string
            format: uri
            example: https://shorturl.at/bDRY9
        - name: analytics_type
          in: query
          description: Type of analytics to fetch
          required: true
          schema:
            type: string
            enum:
              - total-interactors
              - interactors
              - interactions-per-cast
              - input-text
        - name: start
          in: query
          required: true
          schema:
            type: string
            format: date-time
            example: '2024-04-06T06:44:56.811Z'
        - name: stop
          in: query
          required: true
          schema:
            type: string
            format: date-time
            example: '2024-04-08T06:44:56.811Z'
        - name: aggregate_window
          in: query
          description: Required for `analytics_type=interactions-per-cast`
          schema:
            type: string
            enum:
              - 10s
              - 1m
              - 2m
              - 5m
              - 10m
              - 20m
              - 30m
              - 2h
              - 12h
              - 1d
              - 7d
            title: ValidateFrameAggregateWindow
      operationId: fetch-validate-frame-analytics
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FrameValidateAnalyticsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-validate-frame-analytics
  /v2/farcaster/frame/validate/list/:
    get:
      description: Fetch a list of all the mini apps validated by a user
      summary: All mini apps validated by user
      tags:
        - Frame
      operationId: fetch-validate-frame-list
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FrameValidateListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-validate-frame-list
  /v2/farcaster/frame/validate/:
    post:
      description: |-
        Validates a mini app against by an interacting user against a Farcaster Hub
        (In order to validate a mini app, message bytes from Frame Action must be provided in hex)
      summary: Validate mini app action
      tags:
        - Frame
      operationId: validate-frame-action
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateFrameActionReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateFrameActionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/validate-frame-action
  /v2/farcaster/frame/relevant/:
    get:
      description: Fetch a list of mini apps relevant to the user based on casts by users with strong affinity score for the user
      summary: Relevant mini apps
      tags:
        - Frame
      parameters:
        - name: viewer_fid
          in: query
          description: FID of the user to fetch relevant mini apps for
          required: true
          schema:
            type: integer
            minimum: 1
        - name: time_window
          in: query
          description: Time window used to limit statistics used to calculate mini app relevance
          schema:
            default: 7d
            type: string
            enum:
              - 1h
              - 6h
              - 12h
              - 24h
              - 7d
        - name: networks
          in: query
          description: List of blockchain networks by which to filter results.  Mini apps included in the results will specify at least one of the supplied networks or specify none. The list can be provided as comma-separated string or array.
          schema:
            type: array
            items:
              type: string
              enum:
                - ethereum
                - base
                - arbitrum
                - arbitrum-sepolia
                - base-sepolia
                - degen
                - gnosis
                - optimism
                - optimism-sepolia
                - polygon
                - ethereum-sepolia
                - zora
                - unichain
                - monad-testnet
                - celo
                - solana
              description: Networks supported by mini apps
              example: base
            title: MiniappNetworksSchema
            example:
              - ethereum
              - base
              - solana
      operationId: fetch-relevant-frames
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  relevant_frames:
                    type: array
                    items:
                      type: object
                      properties:
                        frame:
                          type: object
                          properties:
                            version:
                              type: string
                              description: Version of the mini app, 'next' for v2, 'vNext' for v1
                            image:
                              type: string
                              description: URL of the image
                            frames_url:
                              type: string
                              description: Launch URL of the mini app
                            title:
                              type: string
                              description: Button title of a mini app
                            manifest:
                              $ref: '#/components/schemas/FarcasterManifest'
                            author:
                              $ref: '#/components/schemas/User'
                            metadata:
                              type: object
                              properties:
                                html:
                                  $ref: '#/components/schemas/HtmlMetadata'
                              required:
                                - html
                          required:
                            - version
                            - image
                            - frames_url
                          description: FrameV2 object
                        top_relevant_users:
                          type: array
                          items:
                            $ref: '#/components/schemas/User'
                          description: Array of the most relevant users
                        remaining_relevant_users:
                          type: array
                          items:
                            $ref: '#/components/schemas/UserDehydrated'
                          description: Array of remaining relevant users in dehydrated form
                      required:
                        - frame
                        - top_relevant_users
                        - remaining_relevant_users
                required:
                  - relevant_frames
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-relevant-frames
  /v2/farcaster/frame/search/:
    get:
      description: Search for mini apps based on a query string
      summary: Search mini apps
      tags:
        - Frame
      parameters:
        - name: q
          in: query
          description: Query string to search for mini apps
          required: true
          schema:
            type: string
            maxLength: 32
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
            format: int32
            example: 20
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor
          schema:
            type: string
        - name: networks
          in: query
          description: List of blockchain networks by which to filter results.  Mini apps included in the results will specify at least one of the supplied networks or specify none. The list can be provided as comma-separated string or array.
          schema:
            type: array
            items:
              type: string
              enum:
                - ethereum
                - base
                - arbitrum
                - arbitrum-sepolia
                - base-sepolia
                - degen
                - gnosis
                - optimism
                - optimism-sepolia
                - polygon
                - ethereum-sepolia
                - zora
                - unichain
                - monad-testnet
                - celo
                - solana
              description: Networks supported by mini apps
              example: base
            title: MiniappNetworksSchema
            example:
              - ethereum
              - base
              - solana
      operationId: search-frames
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FrameCatalogResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/search-frames
  /v2/farcaster/frame/:
    get:
      description: Fetch a mini app either by UUID or Neynar URL
      summary: Mini app by UUID or URL
      tags:
        - Frame
      parameters:
        - name: type
          in: query
          description: Type of identifier (either 'uuid' or 'url')
          required: true
          schema:
            type: string
            enum:
              - uuid
              - url
            title: FrameType
        - name: uuid
          in: query
          description: UUID of the mini app to fetch
          schema:
            type: string
            format: uuid
        - name: url
          in: query
          description: URL of the Neynar mini app to fetch
          schema:
            type: string
      operationId: lookup-neynar-frame
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NeynarFrame'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-neynar-frame
    post:
      description: Create a new mini app with a list of pages.
      summary: Create mini app
      tags:
        - Frame
      operationId: publish-neynar-frame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NeynarFrameCreationReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NeynarFrame'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/publish-neynar-frame
    put:
      description: Update an existing mini app with a list of pages, if it was made by the developer (identified by API key)
      summary: Update mini app
      tags:
        - Frame
      operationId: update-neynar-frame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NeynarFrameUpdateReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NeynarFrame'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/update-neynar-frame
    delete:
      description: Delete an existing mini app, if it was made by the developer (identified by API key)
      summary: Delete mini app
      tags:
        - Frame
      operationId: delete-neynar-frame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFrameReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFrameResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/delete-neynar-frame
  /v2/farcaster/fungible/owner/relevant/:
    get:
      description: Fetch a list of relevant owners for a on chain asset. If a viewer is provided, only relevant holders will be shown. This usually shows on a fungible asset page as "X, Y, Z and N others you know own this asset".
      summary: Relevant owners
      tags:
        - Onchain
      parameters:
        - name: contract_address
          in: query
          description: Contract address of the fungible asset
          required: true
          schema:
            type: string
            example: 0x0db510e79909666d6dec7f5e49370838c16d950f (eth) --OR-- EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v (solana)
        - name: network
          in: query
          description: Network of the fungible asset.
          required: true
          schema:
            type: string
            enum:
              - ethereum
              - optimism
              - base
              - arbitrum
              - solana
        - name: viewer_fid
          in: query
          description: If you provide a viewer_fid, the response will include token holders from the user's network, respecting their mutes and blocks and including viewer_context; if not provided, the response will show top token holders across the network—both sets can be combined to generate a longer list if desired.
          schema:
            type: integer
            minimum: 1
      operationId: fetch-relevant-fungible-owners
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelevantFungibleOwnersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-relevant-fungible-owners
  /v2/farcaster/fungible/send/:
    post:
      description: Send fungibles in bulk to several farcaster users. A funded wallet is to required use this API. React out to us on the Neynar channel on farcaster to get your wallet address.
      summary: Send fungibles
      tags:
        - Onchain
      parameters:
        - $ref: '#/components/parameters/WalletIdHeader'
      operationId: send-fungibles-to-users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionSendFungiblesReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSendFungiblesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/send-fungibles-to-users
  /v2/farcaster/login/nonce/:
    get:
      description: Nonce to sign a message
      summary: Fetch nonce
      tags:
        - Login
      operationId: fetch-nonce
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonceResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-nonce
  /v2/farcaster/login/authorize/:
    get:
      description: Fetch authorization url (Fetched authorized url useful for SIWN login operation)
      summary: Fetch authorization url
      tags:
        - Signer
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum:
              - code
            title: AuthorizationUrlResponseType
      operationId: fetch-authorization-url
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationUrlResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-authorization-url
  /v2/farcaster/message/:
    post:
      description: Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
      summary: Publish message
      tags:
        - Signer
      operationId: publish-message-to-farcaster
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishMessageReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishMessageResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/publish-message-to-farcaster
  /v2/farcaster/mute/list/:
    get:
      description: Fetches all FIDs that a user has muted.
      summary: Muted FIDs of user
      tags:
        - Mute
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: fid
          in: query
          description: The user's FID (identifier)
          required: true
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
            format: int32
            example: 20
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-mute-list
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MuteListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-mute-list
  /v2/farcaster/mute/:
    post:
      description: Adds a mute for a given FID. This is an allowlisted API, reach out if you want access.
      summary: Mute FID
      tags:
        - Mute
      operationId: publish-mute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MuteReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MuteResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/publish-mute
    delete:
      description: Deletes a mute for a given FID. This is an allowlisted API, reach out if you want access.
      summary: Unmute FID
      tags:
        - Mute
      operationId: delete-mute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MuteReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MuteResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/delete-mute
  /v2/farcaster/nft/mint/:
    post:
      description: Mints an NFT to one or more recipients on a specified network and contract, using a configured server wallet. Contact us to set up your wallet configuration if you don't have one.
      summary: Mint NFT(s)
      tags:
        - Onchain
      parameters:
        - $ref: '#/components/parameters/WalletIdHeader'
      operationId: mint-nft
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                network:
                  type: string
                  enum:
                    - base
                    - optimism
                    - base-sepolia
                  description: Network to mint on.
                  example: base
                contract_address:
                  type: string
                  pattern: ^0x[a-fA-F0-9]{40}$
                  example: '0x5a927ac639636e534b678e81768ca19e2c6280b7'
                  description: Ethereum address
                  title: EthAddress
                recipients:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        pattern: ^0x[a-fA-F0-9]{40}$
                        example: '0x5a927ac639636e534b678e81768ca19e2c6280b7'
                        description: Ethereum address
                        title: EthAddress
                      fid:
                        type: integer
                        minimum: 0
                        nullable: true
                        description: The unique identifier of a farcaster user or app (unsigned integer)
                        example: 3
                        title: Fid
                        format: int32
                      quantity:
                        type: integer
                        minimum: 1
                        description: Quantity to mint (must be at least 1).
                        example: 1
                    description: NFT mint recipient. Exactly one of "address" or "fid" must be set.
                  minItems: 1
                  maxItems: 200
                  description: List of recipients to mint to (1-200 recipients allowed).
                async:
                  type: boolean
                  description: If true, returns immediately after sending the transaction.
                  example: false
              required:
                - network
                - contract_address
                - recipients
              description: Request body for NFT minting operation.
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      type: object
                      properties:
                        recipient:
                          type: object
                          properties:
                            address:
                              $ref: '#/components/schemas/EthAddress'
                            fid:
                              nullable: true
                              allOf:
                                - $ref: '#/components/schemas/Fid'
                            quantity:
                              type: integer
                              minimum: 1
                              description: Quantity to mint (must be at least 1).
                              example: 1
                          description: NFT mint recipient. Exactly one of "address" or "fid" must be set.
                        transaction_hash:
                          $ref: '#/components/schemas/PrefixedHexString'
                        receipt:
                          type: object
                          properties:
                            status:
                              type: string
                            gas_used:
                              type: string
                            block_number:
                              type: string
                          required:
                            - status
                            - gas_used
                            - block_number
                          nullable: true
                          description: Transaction receipt (if async is false).
                      required:
                        - recipient
                        - transaction_hash
                    description: Array of mint transaction results.
                required:
                  - transactions
                description: Response for NFT minting operation.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZodError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '402':
          description: '402'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/mint-nft
    get:
      description: Simulates mint calldata for the given recipients, contract, and network. Useful for previewing calldata and ABI before minting.
      summary: Simulate NFT mint calldata
      tags:
        - Onchain
      parameters:
        - name: recipients
          in: query
          description: JSON array of recipients (same structure as POST).
          required: true
          schema:
            type: string
        - name: nft_contract_address
          in: query
          description: Ethereum address
          required: true
          schema:
            type: string
            pattern: ^0x[a-fA-F0-9]{40}$
            example: '0x5a927ac639636e534b678e81768ca19e2c6280b7'
            title: EthAddress
        - name: network
          in: query
          description: Network to mint on.
          required: true
          schema:
            type: string
            enum:
              - base
              - optimism
              - base-sepolia
      operationId: simulate-nft-mint
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulateNftMintResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZodError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/simulate-nft-mint
  /v2/farcaster/notifications/channel/:
    get:
      description: Returns a list of notifications for a user in specific channels
      summary: For user by channel
      tags:
        - Notifications
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: fid
          in: query
          description: FID of the user you you want to fetch notifications for. The response will respect this user's mutes and blocks.
          required: true
          schema:
            type: integer
            minimum: 1
        - name: channel_ids
          in: query
          description: Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)
          required: true
          schema:
            type: string
            x-comma-separated: true
            example: neynar,farcaster
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 15
            type: integer
            minimum: 1
            maximum: 25
            format: int32
            example: 15
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-channel-notifications-for-user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-channel-notifications-for-user
  /v2/farcaster/notifications/parent_url/:
    get:
      description: Returns a list of notifications for a user in specific parent_urls
      summary: For user by parent_urls
      tags:
        - Notifications
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: fid
          in: query
          description: FID of the user you you want to fetch notifications for. The response will respect this user's mutes and blocks.
          required: true
          schema:
            type: integer
            minimum: 1
        - name: parent_urls
          in: query
          description: Comma separated parent_urls
          required: true
          schema:
            type: string
            x-comma-separated: true
            example: chain://eip155:1/erc721:0xd4498134211baad5846ce70ce04e7c4da78931cc
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 15
            type: integer
            minimum: 1
            maximum: 25
            format: int32
            example: 15
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-notifications-by-parent-url-for-user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-notifications-by-parent-url-for-user
  /v2/farcaster/notifications/seen/:
    post:
      description: |-
        Mark notifications as seen.
        You can choose one of two authorization methods, either:
          1. Provide a valid signer_uuid in the request body (Most common)
          2. Provide a valid, signed "Bearer" token in the request's `Authorization` header similar to the
             approach described [here](https://docs.farcaster.xyz/reference/warpcast/api#authentication)
      summary: Mark as seen
      tags:
        - Notifications
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      operationId: mark-notifications-as-seen
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkNotificationsAsSeenReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/mark-notifications-as-seen
  /v2/farcaster/notifications/:
    get:
      description: Returns a list of notifications for a specific FID.
      summary: For user
      tags:
        - Notifications
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: fid
          in: query
          description: FID of the user you you want to fetch notifications for. The response will respect this user's mutes and blocks.
          required: true
          schema:
            type: integer
            minimum: 1
        - name: type
          in: query
          description: Notification type to fetch. Comma separated values of follows, recasts, likes, mentions, replies.
          schema:
            type: array
            items:
              type: string
              enum:
                - follows
                - recasts
                - likes
                - mentions
                - replies
                - quotes
              title: NotificationType
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 15
            type: integer
            minimum: 1
            maximum: 25
            example: 15
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-all-notifications
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-all-notifications
  /v2/farcaster/reaction/:
    post:
      description: "Post a reaction (like or recast) to a given cast \n(In order to post a reaction `signer_uuid` must be approved)"
      summary: Post a reaction
      tags:
        - Reaction
      operationId: publish-reaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReactionReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/publish-reaction
    delete:
      description: "Delete a reaction (like or recast) to a cast \n(In order to delete a reaction `signer_uuid` must be approved)"
      summary: Delete reaction
      tags:
        - Reaction
      operationId: delete-reaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReactionReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/delete-reaction
  /v2/farcaster/reactions/cast/:
    get:
      description: Fetches reactions for a given cast
      summary: Reactions for cast
      tags:
        - Reaction
      parameters:
        - name: hash
          in: query
          required: true
          schema:
            type: string
            pattern: ^(0x)?[a-fA-F0-9]{40}$
            example: '0x71d5225f77e0164388b1d4c120825f3a2c1f131c'
        - name: types
          in: query
          description: "Customize which reaction types the request should search for. This is a comma-separated string that can include the following values: 'likes' and 'recasts'. By default api returns both. To select multiple types, use a comma-separated list of these values."
          required: true
          schema:
            type: array
            items:
              type: string
              enum:
                - all
                - likes
                - recasts
              title: ReactionsType
        - name: viewer_fid
          in: query
          description: Providing this will return a list of reactions that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 100
            format: int32
            example: 30
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-cast-reactions
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionsCastResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-cast-reactions
  /v2/farcaster/reactions/user/:
    get:
      description: Fetches reactions for a given user
      summary: Reactions for user
      tags:
        - Reaction
      parameters:
        - name: fid
          in: query
          description: The unique identifier of a farcaster user or app (unsigned integer)
          required: true
          schema:
            type: integer
            minimum: 0
            nullable: true
            example: 3
            title: Fid
            format: int32
        - name: viewer_fid
          in: query
          description: Providing this will return a list of reactions that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
        - name: type
          in: query
          description: Type of reaction to fetch (likes or recasts or all)
          required: true
          schema:
            type: string
            enum:
              - all
              - likes
              - recasts
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 100
            format: int32
            example: 30
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-user-reactions
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-reactions
  /v2/farcaster/signer/developer_managed/signed_key/:
    post:
      description: Registers an signed key and returns the developer managed signer status with an approval url.
      summary: Register Signed Key
      tags:
        - Signer
      operationId: register-signed-key-for-developer-managed-signer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDeveloperManagedSignedKeyReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeveloperManagedSigner'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer
  /v2/farcaster/signer/developer_managed/:
    get:
      description: Fetches the status of a developer managed signer by public key
      summary: Status by public key
      tags:
        - Signer
      parameters:
        - name: public_key
          in: query
          description: Ed25519 public key
          required: true
          schema:
            type: string
            pattern: ^0x[a-fA-F0-9]{64}$
            example: '0x3daa8f99c5f760688a3c9f95716ed93dee5ed5d7722d776b7c4deac957755f22'
            title: Ed25519PublicKey
      operationId: lookup-developer-managed-signer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeveloperManagedSigner'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-developer-managed-signer
  /v2/farcaster/signer/list/:
    get:
      description: Fetches a list of signers for a custody address
      summary: List signers
      tags:
        - Signer
      parameters:
        - name: message
          in: query
          description: A Sign-In with Ethereum (SIWE) message that the user's Ethereum wallet signs. This message includes details such as the domain, address, statement, URI, nonce, and other relevant information following the EIP-4361 standard. It should be structured and URL-encoded.
          required: true
          schema:
            type: string
            example: example.com%20wants%20you%20to%20sign%20in%20with%20your%20Ethereum%20account%3A%5Cn0x23A...F232%5Cn%5CnSign%20in%20to%20continue.%5Cn%5CnURI%3A%20example.com%5CnVersion%3A%201%5CnChain%20ID%3A%201%5CnNonce%3A%20xyz123%5CnIssued%20At%3A%202021-09-01T14%3A52%3A07Z
        - name: signature
          in: query
          description: The digital signature produced by signing the provided SIWE message with the user's Ethereum private key. This signature is used to verify the authenticity of the message and the identity of the signer.
          required: true
          schema:
            type: string
            example: 0x25f8...1cf
      operationId: fetch-signers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignerListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-signers
  /v2/farcaster/signer/signed_key/:
    post:
      description: Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
      summary: Register Signed Key
      tags:
        - Signer
      operationId: register-signed-key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSignerKeyReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/register-signed-key
  /v2/farcaster/signer/:
    get:
      description: Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
      summary: Status
      tags:
        - Signer
      parameters:
        - name: signer_uuid
          in: query
          description: |-
            UUID of the signer.
            `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.
          required: true
          schema:
            type: string
            example: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
            title: SignerUUID
      operationId: lookup-signer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-signer
    post:
      description: "Creates a signer and returns the signer status. \n\n**Note**: While tesing please reuse the signer, it costs money to approve a signer."
      summary: Create signer
      tags:
        - Signer
      operationId: create-signer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signer'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/create-signer
  /v2/farcaster/storage/allocations/:
    get:
      description: Fetches storage allocations for a given user
      summary: Allocation of user
      tags:
        - Storage
      parameters:
        - name: fid
          in: query
          description: The unique identifier of a farcaster user or app (unsigned integer)
          required: true
          schema:
            type: integer
            minimum: 0
            nullable: true
            example: 3
            title: Fid
            format: int32
      operationId: lookup-user-storage-allocations
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageAllocationsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-user-storage-allocations
  /v2/farcaster/storage/usage/:
    get:
      description: Fetches storage usage for a given user
      summary: Usage of user
      tags:
        - Storage
      parameters:
        - name: fid
          in: query
          description: The unique identifier of a farcaster user or app (unsigned integer)
          required: true
          schema:
            type: integer
            minimum: 0
            nullable: true
            example: 3
            title: Fid
            format: int32
      operationId: lookup-user-storage-usage
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageUsageResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-user-storage-usage
  /v2/farcaster/storage/buy/:
    post:
      description: |-
        This api will help you rent units of storage for an year for a specific FID.
        A storage unit lets you store 5000 casts, 2500 reactions and 2500 links.
      summary: Buy storage
      tags:
        - Storage
      operationId: buy-storage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyStorageReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageAllocationsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZodError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/buy-storage
  /v2/farcaster/user/best_friends/:
    get:
      description: Returns the best friends of a user ranked by mutual affinity score based on interactions with each other.
      summary: Best friends
      tags:
        - User
      parameters:
        - name: fid
          in: query
          description: The FID of the user
          required: true
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 3
            type: integer
            minimum: 1
            maximum: 100
            example: 5
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor
          schema:
            type: string
      operationId: get-user-best-friends
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BestFriendsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZodError'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/get-user-best-friends
  /v2/farcaster/user/custody-address/:
    get:
      description: Lookup a user by custody-address
      summary: By custody-address
      tags:
        - User
      parameters:
        - name: custody_address
          in: query
          description: Custody Address associated with mnemonic
          required: true
          schema:
            type: string
            example: '0xd1b702203b1b3b641a699997746bd4a12d157909'
      operationId: lookup-user-by-custody-address
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-user-by-custody-address
  /v2/farcaster/user/by_username/:
    get:
      description: Fetches a single hydrated user object given a username
      summary: By username
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: username
          in: query
          description: Username of the user to fetch
          required: true
          schema:
            type: string
            example: neynar
        - name: viewer_fid
          in: query
          schema:
            type: integer
            minimum: 1
      operationId: lookup-user-by-username
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-user-by-username
  /v2/farcaster/user/by_x_username/:
    get:
      description: Fetches the users who have verified the specified X (Twitter) username
      summary: By X username
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: x_username
          in: query
          description: X (Twitter) username to search for, without the @ symbol
          required: true
          schema:
            type: string
        - name: viewer_fid
          in: query
          description: FID of the viewer for contextual information like follows and blocks
          schema:
            type: integer
            minimum: 1
      operationId: lookup-users-by-x-username
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkUsersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-users-by-x-username
  /v2/farcaster/user/by_location/:
    get:
      description: Fetches a list of users given a location
      summary: By location
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: latitude
          in: query
          description: Latitude of the location
          required: true
          schema:
            type: number
            nullable: true
            example: 37.77
        - name: longitude
          in: query
          description: Longitude of the location
          required: true
          schema:
            type: number
            nullable: true
            example: -122.41
        - name: viewer_fid
          in: query
          description: FID of the user viewing the feed. Providing this will return a list of users that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
            example: 3
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 100
            example: 25
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor
          schema:
            type: string
      operationId: fetch-users-by-location
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-users-by-location
  /v2/farcaster/user/fid/:
    get:
      description: Fetches FID to [assign it to new user](https://docs.neynar.com/reference/register-account)
      summary: Fetch fresh FID
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
      operationId: get-fresh-account-FID
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFIDResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/get-fresh-account-fid
  /v2/farcaster/user/register/:
    post:
      description: Register a new farcaster account onchain. Optionally you can pass in signers to register a new account and create multiple signers in a single transaction
      summary: Register Farcaster account onchain
      tags:
        - Onchain
      operationId: register-account-onchain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserOnChainReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserOnChainResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/register-account-onchain
  /v2/farcaster/user/search/:
    get:
      description: Search for Usernames
      summary: Search for Usernames
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: q
          in: query
          required: true
          schema:
            type: string
            example: r
        - name: viewer_fid
          in: query
          description: Providing this will return search results that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          description: Number of users to fetch
          schema:
            default: 5
            type: integer
            minimum: 1
            maximum: 10
            example: 10
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: search-user
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/search-user
  /v2/farcaster/user/bulk/:
    get:
      description: Fetches information about multiple users based on FIDs
      summary: By FIDs
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: fids
          in: query
          description: Comma separated list of FIDs, up to 100 at a time
          required: true
          schema:
            type: string
            example: 194, 191, 6131
            x-comma-separated: true
            x-accept-as: integer
        - name: viewer_fid
          in: query
          schema:
            type: integer
            minimum: 1
            example: 3
      operationId: fetch-bulk-users
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkUsersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-bulk-users
  /v2/farcaster/user/bulk-by-address/:
    get:
      description: |-
        Fetches all users based on multiple Ethereum or Solana addresses.

        Each farcaster user has a custody Ethereum address and optionally verified Ethereum or Solana addresses. This endpoint returns all users that have any of the given addresses as their custody or verified Ethereum or Solana addresses.

        A custody address can be associated with only 1 farcaster user at a time but a verified address can be associated with multiple users.
        You can pass in Ethereum and Solana addresses, comma separated, in the same request. The response will contain users associated with the given addresses.
      summary: By Eth or Sol addresses
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/NeynarExperimentalHeader'
        - name: addresses
          in: query
          description: Comma separated list of Ethereum addresses, up to 350 at a time
          required: true
          schema:
            type: string
            example: 0xa6a8736f18f383f1cc2d938576933e5ea7df01a1,0x7cac817861e5c3384753403fb6c0c556c204b1ce
            x-comma-separated: true
        - name: address_types
          in: query
          description: "Customize which address types the request should search for. This is a comma-separated string that can include the following values: 'custody_address' and 'verified_address'. By default api returns both. To select multiple types, use a comma-separated list of these values."
          schema:
            type: array
            items:
              type: string
              enum:
                - custody_address
                - verified_address
              title: BulkUserAddressType
        - name: viewer_fid
          in: query
          schema:
            type: integer
            minimum: 1
      operationId: fetch-bulk-users-by-eth-or-sol-address
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkUsersByAddressResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-bulk-users-by-eth-or-sol-address
  /v2/farcaster/user/channels/:
    get:
      description: Returns a list of all channels with their details that a FID follows.
      summary: Following
      tags:
        - Channel
      parameters:
        - name: fid
          in: query
          description: The FID of the user.
          required: true
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 25
            type: integer
            minimum: 1
            maximum: 100
            format: int32
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-user-channels
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelListResponse'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-channels
  /v2/farcaster/user/memberships/list/:
    get:
      description: Returns a list of all channels with their details that an FID is a member of. Data may have a delay of up to 1 hour.
      summary: Member of
      tags:
        - Channel
      parameters:
        - name: fid
          in: query
          description: The FID of the user.
          required: true
          schema:
            type: integer
            minimum: 1
            example: 3
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
            example: 30
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      operationId: fetch-user-channel-memberships
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelMemberListResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-channel-memberships
  /v2/farcaster/user/verification/:
    post:
      description: "Adds verification for an eth address or contract for the user \n(In order to add verification `signer_uuid` must be approved)"
      summary: Add verification
      tags:
        - User
      operationId: publish-verification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddVerificationReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
      externalDocs:
        url: https://docs.neynar.com/reference/publish-verification
    delete:
      description: "Removes verification for an eth address for the user \n(In order to delete verification `signer_uuid` must be approved)"
      summary: Delete verification
      tags:
        - User
      operationId: delete-verification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveVerificationReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
      externalDocs:
        url: https://docs.neynar.com/reference/delete-verification
  /v2/farcaster/user/follow/:
    post:
      description: "Follow a user \n(In order to follow a user `signer_uuid` must be approved)"
      summary: Follow user
      tags:
        - User
      operationId: follow-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkFollowResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/follow-user
    delete:
      description: "Unfollow a user \n(In order to unfollow a user `signer_uuid` must be approved)"
      summary: Unfollow user
      tags:
        - User
      operationId: unfollow-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkFollowResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/unfollow-user
  /v2/farcaster/user/balance/:
    get:
      description: Fetches the token balances of a user given their FID
      summary: Token balance
      tags:
        - Onchain
      parameters:
        - name: fid
          in: query
          description: FID of the user to fetch
          required: true
          schema:
            type: integer
            minimum: 1
        - name: networks
          in: query
          description: Comma separated list of networks to fetch balances for
          required: true
          schema:
            type: array
            items:
              type: string
              enum:
                - ethereum
                - optimism
                - base
                - arbitrum
              description: A blockchain network e.g. "ethereum", "optimism", "base", "arbitrum"
              title: Network
      operationId: fetch-user-balance
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-balance
  /v2/farcaster/user/interactions/:
    get:
      description: Returns a list of interactions between two users
      summary: User interactions
      tags:
        - Agents
      parameters:
        - name: fids
          in: query
          description: Comma separated list of two FIDs
          required: true
          schema:
            type: string
            x-accept-as: integer
            x-comma-separated: true
            example: 194, 191
        - name: type
          in: query
          description: Comma seperated list of Interaction type to fetch
          schema:
            type: array
            items:
              type: string
              enum:
                - follows
                - recasts
                - likes
                - mentions
                - replies
                - quotes
      operationId: fetch-user-interactions
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  interactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                required:
                  - interactions
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-interactions
  /v2/farcaster/user/subscriptions_created/:
    get:
      description: Fetch created subscriptions for a given FID's.
      summary: Subscriptions created by FID
      tags:
        - Subscribers
      parameters:
        - name: fid
          in: query
          description: The unique identifier of a farcaster user or app (unsigned integer)
          required: true
          schema:
            type: integer
            minimum: 0
            nullable: true
            example: 3
            title: Fid
            format: int32
        - name: subscription_provider
          in: query
          description: The provider of the subscription.
          required: true
          schema:
            type: string
            enum:
              - fabric_stp
      operationId: fetch-subscriptions-for-fid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-subscriptions-for-fid
  /v2/farcaster/user/subscribed_to/:
    get:
      description: Fetch what FIDs and contracts a FID is subscribed to.
      summary: Subscribed to
      tags:
        - Subscribers
      parameters:
        - name: fid
          in: query
          description: The unique identifier of a farcaster user or app (unsigned integer)
          required: true
          schema:
            type: integer
            minimum: 0
            nullable: true
            example: 3
            title: Fid
            format: int32
        - name: viewer_fid
          in: query
          schema:
            type: integer
            minimum: 1
        - name: subscription_provider
          in: query
          description: The provider of the subscription.
          required: true
          schema:
            type: string
            enum:
              - fabric_stp
      operationId: fetch-subscribed-to-for-fid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscribedToResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-subscribed-to-for-fid
  /v2/farcaster/user/subscribers/:
    get:
      description: Fetch subscribers for a given FID's contracts. Doesn't return addresses that don't have an FID.
      summary: Subscribers of a user
      tags:
        - Subscribers
      parameters:
        - name: fid
          in: query
          description: The unique identifier of a farcaster user or app (unsigned integer)
          required: true
          schema:
            type: integer
            minimum: 0
            nullable: true
            example: 3
            title: Fid
            format: int32
        - name: viewer_fid
          in: query
          schema:
            type: integer
            minimum: 1
        - name: subscription_provider
          in: query
          description: The provider of the subscription.
          required: true
          schema:
            type: string
            enum:
              - fabric_stp
              - paragraph
      operationId: fetch-subscribers-for-fid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscribersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-subscribers-for-fid
  /v2/farcaster/user/:
    patch:
      description: "Update user profile \n(In order to update user's profile `signer_uuid` must be approved)"
      summary: Update user profile
      tags:
        - User
      operationId: update-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/update-user
    post:
      description: "Register account on farcaster. \n\n**Note:** This API must be called within 10 minutes of the fetch FID API call (i.e., /v2/farcaster/user/fid). Otherwise, Neynar will assign this FID to another available user."
      summary: Register new account
      tags:
        - User
      operationId: register-account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/register-account
  /v2/farcaster/webhook/list/:
    get:
      description: Fetch a list of webhooks associated to a user
      summary: Associated webhooks of user
      tags:
        - Webhook
      operationId: fetch-webhooks
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookListResponse'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-webhooks
  /v2/farcaster/webhook/:
    get:
      description: Fetch a webhook
      summary: Fetch a webhook
      tags:
        - Webhook
      parameters:
        - name: webhook_id
          in: query
          required: true
          schema:
            type: string
      operationId: lookup-webhook
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-webhook
    post:
      description: Create a webhook
      summary: Create a webhook
      tags:
        - Webhook
      operationId: publish-webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookPostReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/publish-webhook
    patch:
      description: Update webhook active status
      summary: Update webhook status
      tags:
        - Webhook
      operationId: update-webhook-active-status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookPatchReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/update-webhook-active-status
    put:
      description: Update a webhook
      summary: Update a webhook
      tags:
        - Webhook
      operationId: update-webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookPutReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/update-webhook
    delete:
      description: Delete a webhook
      summary: Delete a webhook
      tags:
        - Webhook
      operationId: delete-webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookDeleteReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/delete-webhook
  /v2/fungible/:
    post:
      description: |-
        Creates a new token.
        This is an allowlisted API, reach out if you want access.
      summary: Deploy fungible
      tags:
        - Onchain
      operationId: deploy-fungible
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DeployFungibleReqBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployFungibleResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/deploy-fungible
  /v2/stp/subscription_check/:
    get:
      description: Check if a wallet address is subscribed to a given STP (Hypersub) contract.
      summary: Hypersub subscription check
      tags:
        - Subscribers
      parameters:
        - name: addresses
          in: query
          description: Comma separated list of Ethereum addresses, up to 350 at a time
          required: true
          schema:
            type: string
            example: 0xedd3783e8c7c52b80cfbd026a63c207edc9cbee7,0x5a927ac639636e534b678e81768ca19e2c6280b7
            x-comma-separated: true
        - name: contract_address
          in: query
          description: Ethereum address of the STP contract
          required: true
          schema:
            type: string
            example: '0x76ad4cb9ac51c09f4d9c2cadcea75c9fa9074e5b'
        - name: chain_id
          in: query
          description: Chain ID of the STP contract
          required: true
          schema:
            type: string
            example: '8453'
      operationId: fetch-subscription-check
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionCheckResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorRes'
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-subscription-check
  /v2/studio/deployment/:
    post:
      description: Creates and deploys an instance of the miniapp generator for a user. Requires authentication via API key in the request header.
      summary: Create a miniapp generator deployment
      tags:
        - v2
        - studio
        - deployments
      operationId: create-deployment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fid:
                  type: integer
                  minimum: 0
                  description: Farcaster ID of the user
                  nullable: true
                env:
                  type: object
                  additionalProperties:
                    type: string
                  description: Environment variables for the deployment
                display_name:
                  type: string
                  description: Display name for the deployment
              required:
                - fid
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Kubernetes deployment status
                  display_name:
                    type: string
                    description: Display name for the project
                  url:
                    type: string
                    format: uri
                    description: Public URL for the deployment
                  github_url:
                    type: string
                    format: uri
                    description: GitHub repository URL
                  created_at:
                    type: string
                    format: date-time
                    description: Creation timestamp
                  namespace:
                    type: string
                    description: Kubernetes namespace
                  name:
                    type: string
                    description: Kubernetes deployment name
                  isReady:
                    type: boolean
                    description: Deployment is ready to serve app and accept prompts
                required:
                  - created_at
                  - namespace
                  - name
                  - isReady
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
      security:
        - ApiKeyAuth: []
      externalDocs:
        url: https://docs.neynar.com/reference/create-deployment
    get:
      description: Lists all miniapp generator deployments for a user. Requires API key authentication.
      summary: List deployments
      tags:
        - v2
        - studio
        - deployments
      parameters:
        - name: fid
          in: query
          description: Farcaster ID of the user
          required: true
          schema:
            type: integer
            minimum: 0
            nullable: true
      operationId: list-deployments
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: string
                      description: Kubernetes deployment status
                    display_name:
                      type: string
                      description: Display name for the project
                    url:
                      type: string
                      format: uri
                      description: Public URL for the deployment
                    github_url:
                      type: string
                      format: uri
                      description: GitHub repository URL
                    created_at:
                      type: string
                      format: date-time
                      description: Creation timestamp
                    namespace:
                      type: string
                      description: Kubernetes namespace
                    name:
                      type: string
                      description: Kubernetes deployment name
                    isReady:
                      type: boolean
                      description: Deployment is ready to serve app and accept prompts
                  required:
                    - created_at
                    - namespace
                    - name
                    - isReady
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
      security:
        - ApiKeyAuth: []
      externalDocs:
        url: https://docs.neynar.com/reference/list-deployments
    delete:
      description: Deletes a specific miniapp generator deployment or all deployments for a FID. If name is provided, deletes single deployment. If only FID is provided, deletes all deployments for that FID. Requires API key authentication.
      summary: Delete deployment(s)
      tags:
        - v2
        - studio
        - deployments
      operationId: delete-deployment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fid:
                  type: integer
                  minimum: 0
                  description: Farcaster ID of the user
                  nullable: true
                name:
                  type: string
                  description: Kubernetes deployment name. If not provided, all deployments for the FID will be deleted
              required:
                - fid
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  deletedCount:
                    type: number
                required:
                  - success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
      security:
        - ApiKeyAuth: []
      externalDocs:
        url: https://docs.neynar.com/reference/delete-deployment
  /v2/studio/deployment/prompt:
    post:
      description: Sends a prompt to a specific miniapp generator deployment. Requires authentication via API key in the request header.
      summary: Prompt a deployment
      tags:
        - v2
        - studio
        - deployments
      operationId: prompt-deployment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fid:
                  type: integer
                  minimum: 0
                  description: Farcaster ID of the user
                  nullable: true
                name:
                  type: string
                  description: Kubernetes deployment name
                prompt:
                  type: string
                  description: Prompt string to send to the deployment
                options:
                  type: object
                  additionalProperties:
                    nullable: true
                  description: Additional options for the prompt
              required:
                - fid
                - name
                - prompt
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                description: Response from the deployment
                nullable: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
      security:
        - ApiKeyAuth: []
      externalDocs:
        url: https://docs.neynar.com/reference/prompt-deployment
  /v2/studio/deployment/prompt/stream:
    post:
      description: Sends a prompt to a specific miniapp generator deployment and returns a streaming response using Server-Sent Events. The response is a continuous stream of Server-Sent Events, not a single JSON payload. Each event contains a JSON object with type, message, and other fields specific to the message type. Requires authentication via API key in the request header.
      summary: Prompt a deployment with streaming response
      tags:
        - v2
        - studio
        - deployments
      operationId: prompt-deployment-stream
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fid:
                  type: integer
                  minimum: 0
                  description: Farcaster ID of the user
                  nullable: true
                name:
                  type: string
                  description: Kubernetes deployment name
                prompt:
                  type: string
                  description: Prompt string to send to the deployment
                options:
                  type: object
                  additionalProperties:
                    nullable: true
                  description: Additional options for the prompt
              required:
                - fid
                - name
                - prompt
        required: true
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
      security:
        - ApiKeyAuth: []
      externalDocs:
        url: https://docs.neynar.com/reference/prompt-deployment-stream
  /v2/studio/deployment/by-name-and-fid:
    get:
      description: Fetches info about a miniapp generator deployment by its name and creator's Farcaster ID. Requires API key authentication.
      summary: Get deployment info
      tags:
        - v2
        - studio
        - deployments
      parameters:
        - name: fid
          in: query
          description: Farcaster ID of the user
          required: true
          schema:
            type: integer
            minimum: 0
            nullable: true
        - name: name
          in: query
          description: Kubernetes deployment name
          required: true
          schema:
            type: string
      operationId: get-deployment
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Kubernetes deployment status
                  display_name:
                    type: string
                    description: Display name for the project
                  url:
                    type: string
                    format: uri
                    description: Public URL for the deployment
                  github_url:
                    type: string
                    format: uri
                    description: GitHub repository URL
                  created_at:
                    type: string
                    format: date-time
                    description: Creation timestamp
                  namespace:
                    type: string
                    description: Kubernetes namespace
                  name:
                    type: string
                    description: Kubernetes deployment name
                  isReady:
                    type: boolean
                    description: Deployment is ready to serve app and accept prompts
                required:
                  - created_at
                  - namespace
                  - name
                  - isReady
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
      security:
        - ApiKeyAuth: []
      externalDocs:
        url: https://docs.neynar.com/reference/get-deployment
  /v2/studio/deployment/account-association:
    post:
      description: Associates a generated miniapp with a Farcaster account using a JFS-signed domain association. Requires API key authentication.
      summary: Set account association
      tags:
        - v2
        - studio
        - deployments
      operationId: associate-deployment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fid:
                  type: integer
                  minimum: 0
                  description: Farcaster ID of the user
                  nullable: true
                name:
                  type: string
                  description: Kubernetes deployment name
                account_association:
                  type: object
                  properties:
                    header:
                      type: string
                      description: Base64URL encoded JFS header
                    payload:
                      type: string
                      description: Base64URL encoded JFS payload
                    signature:
                      type: string
                      description: Base64URL encoded JFS signature
                  required:
                    - header
                    - payload
                    - signature
                  description: Signed domain association linking this deployment to a Farcaster account
              required:
                - fid
                - name
                - account_association
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    description: Status message from the miniapp generator
                required:
                  - success
                  - message
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
      security:
        - ApiKeyAuth: []
      externalDocs:
        url: https://docs.neynar.com/reference/associate-deployment
  /v2/studio/deployment/upload-image:
    post:
      description: Uploads an image file to the generated miniapp public folder. The image will be accessible as a static asset on the deployed miniapp. Requires API key authentication.
      summary: Upload image to deployment
      tags:
        - v2
        - studio
        - deployments
      operationId: upload-image
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the upload was successful
                  message:
                    type: string
                    description: Status message
                  filename:
                    type: string
                    description: Uploaded filename
                  url:
                    type: string
                    description: URL path to access the image
                required:
                  - success
                  - message
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
      security:
        - ApiKeyAuth: []
      externalDocs:
        url: https://docs.neynar.com/reference/upload-image
  /v2/studio/deployment/upload-image-url:
    post:
      description: Downloads an image from the provided URL and saves it to the generated miniapp public folder. The image will be accessible as a static asset on the deployed miniapp. Requires API key authentication.
      summary: Upload image from URL to deployment
      tags:
        - v2
        - studio
        - deployments
      operationId: upload-image-url
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fid:
                  type: integer
                  minimum: 0
                  description: Farcaster ID of the user
                  nullable: true
                name:
                  type: string
                  description: Kubernetes deployment name
                url:
                  type: string
                  format: uri
                  description: URL of the image to download
              required:
                - fid
                - name
                - url
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the upload was successful
                  message:
                    type: string
                    description: Status message
                  filename:
                    type: string
                    description: Uploaded filename
                  url:
                    type: string
                    description: URL path to access the image
                required:
                  - success
                  - message
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
      security:
        - ApiKeyAuth: []
      externalDocs:
        url: https://docs.neynar.com/reference/upload-image-url
components:
  schemas:
    ErrorRes:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        property:
          type: string
        status:
          type: integer
          format: int32
      required:
        - message
      title: ErrorRes
      description: Details for the error response
    Timestamp:
      type: string
      format: date-time
      title: Timestamp
    Fid:
      type: integer
      minimum: 0
      description: The unique identifier of a farcaster user or app (unsigned integer)
      example: 3
      title: Fid
      format: int32
    ZodError:
      type: object
      properties:
        message:
          type: string
          example: Invalid query parameters
        code:
          type: string
          example: InvalidField
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
              expected:
                type: string
              received:
                type: string
              path:
                type: array
                items:
                  type: string
              message:
                type: string
            required:
              - code
              - expected
              - received
              - path
              - message
      required:
        - message
        - code
        - errors
      title: ZodError
    FarcasterActionReqBody:
      type: object
      properties:
        signer_uuid:
          type: string
          format: uuid
          description: The signer_uuid of the user on behalf of whom the action is being performed.
          example: 123e4567-e89b-12d3-a456-426614174000
        base_url:
          type: string
          format: uri
          description: The base URL of the app on which the action is being performed.
          example: https://example.com
        action:
          type: object
          properties:
            type:
              type: string
              description: The type of action being performed.
              example: create.user
            payload:
              type: object
              properties: {}
              description: The payload of the action being performed.
          required:
            - type
      required:
        - signer_uuid
        - base_url
        - action
      title: FarcasterActionReqBody
    AppHostUserStateResponse:
      type: object
      properties:
        notifications_enabled:
          type: array
          items:
            type: object
            properties:
              domain:
                type: string
                description: Domain of the mini app
              status:
                type: string
                description: Status of notifications for this domain (usually 'valid')
              updated_at:
                type: string
                format: date-time
                description: When the notification preference was last updated
            required:
              - domain
              - status
              - updated_at
          description: List of domains for which notifications are enabled for this user
      required:
        - notifications_enabled
      title: AppHostUserStateResponse
    AppHostGetEventResponse:
      type: object
      properties:
        event:
          type: string
          description: |-
            Legacy event type corresponding to the requested event type:
            - frame_added: User adds a mini app to their account
            - frame_removed: User removes a mini app from their account
            - notifications_enabled: User enables notifications for a mini app
            - notifications_disabled: User disables notifications for a mini app
        notificationDetails:
          type: object
          properties:
            url:
              type: string
              description: URL endpoint for sending notifications
            token:
              type: string
              description: Token to use when sending notifications to this user
          required:
            - url
            - token
          description: Details for notification setup, only present when event is notifications_enabled
      required:
        - event
      title: AppHostGetEventResponse
    EncodedJsonFarcasterSignature:
      type: object
      properties:
        header:
          type: string
        payload:
          type: string
        signature:
          type: string
      required:
        - header
        - payload
        - signature
      title: EncodedJsonFarcasterSignature
      description: Encoded JSON Farcaster signature
    SignedMessageBody:
      type: object
      properties:
        signed_message:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/EncodedJsonFarcasterSignature'
          description: JFS-signed message containing the event payload. The message must be properly signed and contain valid event information.  Can be provided as a single string or json object.
        app_domain:
          type: string
          description: Domain of the mini app
          example: demo.neynar.com
      required:
        - signed_message
        - app_domain
      title: SignedMessageBody
    SignerUUID:
      type: string
      example: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
      title: SignerUUID
      description: |-
        UUID of the signer.
        `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.
    AppHostEventType:
      type: string
      enum:
        - frame_added
        - frame_removed
        - notifications_enabled
        - notifications_disabled
      title: AppHostEventType
      description: |-
        Types of events that can occur between a user and an app host:
        - frame_added: User adds a mini app to their account
        - frame_removed: User removes a mini app from their account
        - notifications_enabled: User enables notifications for a mini app
        - notifications_disabled: User disables notifications for a mini app
    SignerUuidBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        app_domain:
          type: string
          description: Domain of the mini app
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        event:
          $ref: '#/components/schemas/AppHostEventType'
      required:
        - signer_uuid
        - app_domain
        - fid
        - event
      title: SignerUuidBody
    AppHostPostEventReqBody:
      oneOf:
        - $ref: '#/components/schemas/SignedMessageBody'
        - $ref: '#/components/schemas/SignerUuidBody'
      title: AppHostPostEventReqBody
      description: Request body for app host events. Can either provide a signed_message or a signer_uuid with event details.
    AppHostPostEventResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Successfully processed event
      required:
        - success
      title: AppHostPostEventResponse
    EthAddress:
      type: string
      pattern: ^0x[a-fA-F0-9]{40}$
      example: '0x5a927ac639636e534b678e81768ca19e2c6280b7'
      description: Ethereum address
      title: EthAddress
    SignedKeyRequestSponsor:
      type: object
      properties:
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        signature:
          type: string
          description: Signature generated by the fid of the sponsor and the signature generated from signKeyRequest for the app.
        sponsored_by_neynar:
          type: boolean
          description: |-
            Neynar will sponsor the signer if set to true.
            **Note: ** If sponsor.fid and sponsor.signature are provided along with sponsored_by_neynar set to true,
            the sponsor.fid and sponsor.signature will be ignored.
            Neynar will sponsor the signer on behalf of the user. The developer will get charged in compute units.
      title: SignedKeyRequestSponsor
    RegisterAuthAddressDeveloperManagedSignedKeyReqBody:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/EthAddress'
        app_fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        deadline:
          type: integer
          description: unix timestamp in seconds that controls how long the signed key request is valid for. (24 hours from now is recommended)
        signature:
          type: string
          pattern: ^0x[a-fA-F0-9]+$
          description: Signature generated by the custody address of the app. Signed data includes app_fid, deadline, 32 bytes padded auth address. [Refer guide for more details.](https://docs.neynar.com/docs/auth-address-signature-generation)
          example: '0x16161933625ac90b7201625bfea0d816de0449ea1802d97a38c53eef3c9c0c424fefbc5c6fb5eabe3d4f161a36d18cda585cff7e77c677c5d34a9c87e68ede011c'
        redirect_url:
          type: string
          description: |-
            Url to redirect to after the signer is approved.
            **Note** : This should only be used when requesting a signer from a native mobile application.
        sponsor:
          $ref: '#/components/schemas/SignedKeyRequestSponsor'
      required:
        - address
        - app_fid
        - deadline
        - signature
      title: RegisterAuthAddressDeveloperManagedSignedKeyReqBody
    UserDehydrated:
      type: object
      properties:
        object:
          type: string
          enum:
            - user_dehydrated
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        username:
          type: string
        display_name:
          type: string
        pfp_url:
          type: string
        custody_address:
          $ref: '#/components/schemas/EthAddress'
        score:
          type: number
      required:
        - object
        - fid
      title: UserDehydrated
    TextRange:
      type: object
      properties:
        start:
          type: number
          minimum: 0
        end:
          type: number
          minimum: 0
      required:
        - start
        - end
      title: TextRange
    ChannelMemberRole:
      type: string
      enum:
        - member
        - moderator
        - owner
      description: The role of a channel member
      title: ChannelMemberRole
    ChannelUserContext:
      type: object
      properties:
        following:
          type: boolean
          description: Indicates if the user is following the channel.
        role:
          $ref: '#/components/schemas/ChannelMemberRole'
      required:
        - following
      description: Adds context on the viewer's or author's role in the channel.
      title: ChannelUserContext
    ChannelDehydrated:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        object:
          type: string
          enum:
            - channel_dehydrated
        image_url:
          type: string
        viewer_context:
          $ref: '#/components/schemas/ChannelUserContext'
      required:
        - id
        - name
        - object
      title: ChannelDehydrated
    LocationAddress:
      type: object
      properties:
        city:
          type: string
        state:
          type: string
        state_code:
          type: string
        country:
          type: string
        country_code:
          type: string
      required:
        - city
        - country
      title: LocationAddress
    Location:
      type: object
      properties:
        latitude:
          type: number
          minimum: -90
          maximum: 90
          format: double
        longitude:
          type: number
          minimum: -180
          maximum: 180
          format: double
        address:
          $ref: '#/components/schemas/LocationAddress'
        radius:
          type: number
          minimum: 0
          description: The radius in meters for the location search. Any location within this radius will be returned.
      required:
        - latitude
        - longitude
      description: Coordinates and place names for a location
      title: Location
    SolAddress:
      type: string
      pattern: ^[1-9A-HJ-NP-Za-km-z]{32,44}$
      description: Solana address
      title: SolAddress
    UserViewerContext:
      type: object
      properties:
        following:
          type: boolean
          description: Indicates if the viewer is following the user.
        followed_by:
          type: boolean
          description: Indicates if the viewer is followed by the user.
        blocking:
          type: boolean
          description: Indicates if the viewer is blocking the user.
        blocked_by:
          type: boolean
          description: Indicates if the viewer is blocked by the user.
      required:
        - following
        - followed_by
        - blocking
        - blocked_by
      description: Adds context on the viewer's follow relationship with the user.
      title: UserViewerContext
    User:
      type: object
      properties:
        object:
          type: string
          enum:
            - user
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        username:
          type: string
        display_name:
          type: string
        custody_address:
          $ref: '#/components/schemas/EthAddress'
        pro:
          type: object
          properties:
            status:
              type: string
              enum:
                - subscribed
                - unsubscribed
              description: The subscription status of the user
            subscribed_at:
              $ref: '#/components/schemas/Timestamp'
            expires_at:
              $ref: '#/components/schemas/Timestamp'
          required:
            - status
            - subscribed_at
            - expires_at
        pfp_url:
          type: string
          description: The URL of the user's profile picture
        profile:
          type: object
          properties:
            bio:
              type: object
              properties:
                text:
                  type: string
                mentioned_profiles:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserDehydrated'
                mentioned_profiles_ranges:
                  type: array
                  items:
                    $ref: '#/components/schemas/TextRange'
                  description: |-
                    Positions within the text (inclusive start, exclusive end) where each mention occurs.
                    Each index within this list corresponds to the same-numbered index in the mentioned_profiles list.
                mentioned_channels:
                  type: array
                  items:
                    $ref: '#/components/schemas/ChannelDehydrated'
                mentioned_channels_ranges:
                  type: array
                  items:
                    $ref: '#/components/schemas/TextRange'
                  description: |-
                    Positions within the text (inclusive start, exclusive end) where each mention occurs.
                    Each index within this list corresponds to the same-numbered index in the mentioned_channels list.
              required:
                - text
            location:
              $ref: '#/components/schemas/Location'
            banner:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: The URL of the user's banner image
          required:
            - bio
        follower_count:
          type: integer
          format: int32
          description: The number of followers the user has.
        following_count:
          type: integer
          format: int32
          description: The number of users the user is following.
        verifications:
          type: array
          items:
            $ref: '#/components/schemas/EthAddress'
        auth_addresses:
          type: array
          items:
            type: object
            properties:
              address:
                $ref: '#/components/schemas/EthAddress'
              app:
                $ref: '#/components/schemas/UserDehydrated'
            required:
              - address
              - app
        verified_addresses:
          type: object
          properties:
            eth_addresses:
              type: array
              items:
                $ref: '#/components/schemas/EthAddress'
              description: List of verified Ethereum addresses of the user sorted by oldest to most recent.
            sol_addresses:
              type: array
              items:
                $ref: '#/components/schemas/SolAddress'
              description: List of verified Solana addresses of the user sorted by oldest to most recent.
            primary:
              type: object
              properties:
                eth_address:
                  nullable: true
                  allOf:
                    - $ref: '#/components/schemas/EthAddress'
                sol_address:
                  nullable: true
                  allOf:
                    - $ref: '#/components/schemas/SolAddress'
              required:
                - eth_address
                - sol_address
          required:
            - eth_addresses
            - sol_addresses
            - primary
        verified_accounts:
          type: array
          items:
            type: object
            properties:
              platform:
                type: string
                enum:
                  - x
                  - github
              username:
                type: string
            description: Verified accounts of the user on other platforms, currently only X is supported.
        power_badge:
          type: boolean
        experimental:
          type: object
          properties:
            deprecation_notice:
              type: string
            neynar_user_score:
              type: number
              format: double
              description: Score that represents the probability that the account is not spam.
          required:
            - neynar_user_score
        viewer_context:
          $ref: '#/components/schemas/UserViewerContext'
        score:
          type: number
          format: double
          description: Score that represents the probability that the account is not spam.
      required:
        - object
        - fid
        - username
        - custody_address
        - profile
        - follower_count
        - following_count
        - verifications
        - auth_addresses
        - verified_addresses
        - verified_accounts
        - power_badge
      title: User
    BanRecord:
      type: object
      properties:
        object:
          type: string
          enum:
            - ban
        banned:
          $ref: '#/components/schemas/User'
        banned_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - object
        - banned_at
      title: BanRecord
    NextCursor:
      type: object
      properties:
        cursor:
          type: string
          nullable: true
      required:
        - cursor
      description: Returns next cursor
      title: NextCursor
    BanListResponse:
      type: object
      properties:
        bans:
          type: array
          items:
            $ref: '#/components/schemas/BanRecord'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - bans
        - next
      title: BanListResponse
    BanReqBody:
      type: object
      properties:
        fids:
          type: array
          items:
            nullable: true
            allOf:
              - $ref: '#/components/schemas/Fid'
      required:
        - fids
      title: BanReqBody
    BanResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          nullable: true
      required:
        - success
      title: BanResponse
    BlockRecord:
      type: object
      properties:
        object:
          type: string
          enum:
            - block
        blocked:
          $ref: '#/components/schemas/User'
        blocker:
          $ref: '#/components/schemas/User'
        blocked_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - object
        - blocked_at
      title: BlockRecord
    BlockListResponse:
      type: object
      properties:
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/BlockRecord'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - blocks
        - next
      title: BlockListResponse
    BlockReqBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        blocked_fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
      required:
        - signer_uuid
        - blocked_fid
      title: BlockReqBody
    OperationResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      title: OperationResponse
    ConversationSummary:
      type: object
      properties:
        summary:
          type: object
          properties:
            text:
              type: string
              description: Summary generated by an LLM
            participants:
              type: array
              items:
                $ref: '#/components/schemas/User'
              description: Users who casted in a conversation thread
            mentioned_profiles:
              type: array
              items:
                $ref: '#/components/schemas/User'
              description: Users who were mentioned in a conversation thread
          required:
            - text
            - participants
            - mentioned_profiles
      required:
        - summary
      title: ConversationSummary
    CastDehydrated:
      type: object
      properties:
        object:
          type: string
          enum:
            - cast_dehydrated
        hash:
          type: string
        author:
          $ref: '#/components/schemas/UserDehydrated'
        app:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/UserDehydrated'
      required:
        - object
        - hash
      title: CastDehydrated
    EmbedCastDeep:
      type: object
      properties:
        cast_id:
          description: '[DEPRECATED: Use "cast" key instead]'
          deprecated: true
          allOf:
            - $ref: '#/components/schemas/CastId'
        cast:
          $ref: '#/components/schemas/CastDehydrated'
      required:
        - cast
      title: EmbedCastDeep
    ImageObject:
      type: object
      properties:
        height:
          type: string
        type:
          type: string
        url:
          type: string
        width:
          type: string
        alt:
          type: string
      required:
        - url
      title: ImageObject
    VideoObject:
      type: object
      properties:
        height:
          type: string
        type:
          type: string
        url:
          type: string
        width:
          type: string
      required:
        - url
      title: VideoObject
    OembedRichData:
      type: object
      properties:
        type:
          type: string
          enum:
            - rich
        version:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
          description: A text title, describing the resource.
        author_name:
          type: string
          nullable: true
          description: The name of the author/owner of the resource.
        author_url:
          type: string
          nullable: true
          description: A URL for the author/owner of the resource.
        provider_name:
          type: string
          nullable: true
          description: The name of the resource provider.
        provider_url:
          type: string
          nullable: true
          description: The url of the resource provider.
        cache_age:
          type: string
          nullable: true
          description: The suggested cache lifetime for this resource, in seconds. Consumers may choose to use this value or not.
        thumbnail_url:
          type: string
          nullable: true
          description: A URL to a thumbnail image representing the resource. The thumbnail must respect any maxwidth and maxheight parameters. If this parameter is present, thumbnail_width and thumbnail_height must also be present.
        thumbnail_width:
          type: number
          nullable: true
          description: The width of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_height must also be present.
        thumbnail_height:
          type: number
          nullable: true
          description: The height of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_width must also be present.
        html:
          type: string
          nullable: true
          description: The HTML required to display the resource. The HTML should have no padding or margins. Consumers may wish to load the HTML in an off-domain iframe to avoid XSS vulnerabilities. The markup should be valid XHTML 1.0 Basic.
        width:
          type: number
          nullable: true
          description: The width in pixels required to display the HTML.
        height:
          type: number
          nullable: true
          description: The height in pixels required to display the HTML.
      required:
        - type
        - version
        - html
        - width
        - height
      description: Rich OEmbed data
      title: OembedRichData
    OembedVideoData:
      type: object
      properties:
        type:
          type: string
          enum:
            - video
        version:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
          description: A text title, describing the resource.
        author_name:
          type: string
          nullable: true
          description: The name of the author/owner of the resource.
        author_url:
          type: string
          nullable: true
          description: A URL for the author/owner of the resource.
        provider_name:
          type: string
          nullable: true
          description: The name of the resource provider.
        provider_url:
          type: string
          nullable: true
          description: The url of the resource provider.
        cache_age:
          type: string
          nullable: true
          description: The suggested cache lifetime for this resource, in seconds. Consumers may choose to use this value or not.
        thumbnail_url:
          type: string
          nullable: true
          description: A URL to a thumbnail image representing the resource. The thumbnail must respect any maxwidth and maxheight parameters. If this parameter is present, thumbnail_width and thumbnail_height must also be present.
        thumbnail_width:
          type: number
          nullable: true
          description: The width of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_height must also be present.
        thumbnail_height:
          type: number
          nullable: true
          description: The height of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_width must also be present.
        html:
          type: string
          nullable: true
          description: The HTML required to embed a video player. The HTML should have no padding or margins. Consumers may wish to load the HTML in an off-domain iframe to avoid XSS vulnerabilities.
        width:
          type: number
          nullable: true
          description: The width in pixels required to display the HTML.
        height:
          type: number
          nullable: true
          description: The height in pixels required to display the HTML.
      required:
        - type
        - version
        - html
        - width
        - height
      description: Video OEmbed data
      title: OembedVideoData
    OembedPhotoData:
      type: object
      properties:
        type:
          type: string
          enum:
            - photo
        version:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
          description: A text title, describing the resource.
        author_name:
          type: string
          nullable: true
          description: The name of the author/owner of the resource.
        author_url:
          type: string
          nullable: true
          description: A URL for the author/owner of the resource.
        provider_name:
          type: string
          nullable: true
          description: The name of the resource provider.
        provider_url:
          type: string
          nullable: true
          description: The url of the resource provider.
        cache_age:
          type: string
          nullable: true
          description: The suggested cache lifetime for this resource, in seconds. Consumers may choose to use this value or not.
        thumbnail_url:
          type: string
          nullable: true
          description: A URL to a thumbnail image representing the resource. The thumbnail must respect any maxwidth and maxheight parameters. If this parameter is present, thumbnail_width and thumbnail_height must also be present.
        thumbnail_width:
          type: number
          nullable: true
          description: The width of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_height must also be present.
        thumbnail_height:
          type: number
          nullable: true
          description: The height of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_width must also be present.
        url:
          type: string
          nullable: true
          description: The source URL of the image. Consumers should be able to insert this URL into an <img> element. Only HTTP and HTTPS URLs are valid.
        width:
          type: number
          nullable: true
          description: The width in pixels of the image specified in the url parameter.
        height:
          type: number
          nullable: true
          description: The height in pixels of the image specified in the url parameter.
      required:
        - type
        - version
        - url
        - width
        - height
      description: Photo OEmbed data
      title: OembedPhotoData
    OembedLinkData:
      type: object
      properties:
        type:
          type: string
          enum:
            - link
        version:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
          description: A text title, describing the resource.
        author_name:
          type: string
          nullable: true
          description: The name of the author/owner of the resource.
        author_url:
          type: string
          nullable: true
          description: A URL for the author/owner of the resource.
        provider_name:
          type: string
          nullable: true
          description: The name of the resource provider.
        provider_url:
          type: string
          nullable: true
          description: The url of the resource provider.
        cache_age:
          type: string
          nullable: true
          description: The suggested cache lifetime for this resource, in seconds. Consumers may choose to use this value or not.
        thumbnail_url:
          type: string
          nullable: true
          description: A URL to a thumbnail image representing the resource. The thumbnail must respect any maxwidth and maxheight parameters. If this parameter is present, thumbnail_width and thumbnail_height must also be present.
        thumbnail_width:
          type: number
          nullable: true
          description: The width of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_height must also be present.
        thumbnail_height:
          type: number
          nullable: true
          description: The height of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_width must also be present.
      required:
        - type
        - version
      description: Link OEmbed data
      title: OembedLinkData
    HtmlMetadata:
      type: object
      properties:
        favicon:
          type: string
        modifiedTime:
          type: string
        ogArticleAuthor:
          type: string
        ogArticleExpirationTime:
          type: string
        ogArticleModifiedTime:
          type: string
        ogArticlePublishedTime:
          type: string
        ogArticlePublisher:
          type: string
        ogArticleSection:
          type: string
        ogArticleTag:
          type: string
        ogAudio:
          type: string
        ogAudioSecureURL:
          type: string
        ogAudioType:
          type: string
        ogAudioURL:
          type: string
        ogAvailability:
          type: string
        ogDate:
          type: string
        ogDescription:
          type: string
        ogDeterminer:
          type: string
        ogEpisode:
          type: string
        ogImage:
          type: array
          items:
            $ref: '#/components/schemas/ImageObject'
        ogLocale:
          type: string
        ogLocaleAlternate:
          type: string
        ogLogo:
          type: string
        ogMovie:
          type: string
        ogPriceAmount:
          type: string
        ogPriceCurrency:
          type: string
        ogProductAvailability:
          type: string
        ogProductCondition:
          type: string
        ogProductPriceAmount:
          type: string
        ogProductPriceCurrency:
          type: string
        ogProductRetailerItemId:
          type: string
        ogSiteName:
          type: string
        ogTitle:
          type: string
        ogType:
          type: string
        ogUrl:
          type: string
        ogVideo:
          type: array
          items:
            $ref: '#/components/schemas/VideoObject'
        ogVideoActor:
          type: string
        ogVideoActorId:
          type: string
        ogVideoActorRole:
          type: string
        ogVideoDirector:
          type: string
        ogVideoDuration:
          type: string
        ogVideoOther:
          type: string
        ogVideoReleaseDate:
          type: string
        ogVideoSecureURL:
          type: string
        ogVideoSeries:
          type: string
        ogVideoTag:
          type: string
        ogVideoTvShow:
          type: string
        ogVideoWriter:
          type: string
        ogWebsite:
          type: string
        updatedTime:
          type: string
        oembed:
          discriminator:
            propertyName: type
            mapping:
              link: '#/components/schemas/OembedLinkData'
              photo: '#/components/schemas/OembedPhotoData'
              rich: '#/components/schemas/OembedRichData'
              video: '#/components/schemas/OembedVideoData'
          oneOf:
            - $ref: '#/components/schemas/OembedRichData'
            - $ref: '#/components/schemas/OembedVideoData'
            - $ref: '#/components/schemas/OembedPhotoData'
            - $ref: '#/components/schemas/OembedLinkData'
      title: HtmlMetadata
    FrameButtonActionType:
      type: string
      enum:
        - post
        - post_redirect
        - tx
        - link
        - mint
      description: The action type of a mini app button. Action types "mint" & "link" are to be handled on the client side only and so they will produce a no/op for POST /farcaster/frame/action.
      title: FrameButtonActionType
    FrameActionButton:
      type: object
      properties:
        title:
          type: string
          description: Title of the button
        index:
          type: integer
          description: Index of the button
        action_type:
          $ref: '#/components/schemas/FrameButtonActionType'
        target:
          type: string
          description: Target of the button
        post_url:
          type: string
          description: Used specifically for the tx action type to post a successful transaction hash
      required:
        - index
        - action_type
      title: FrameActionButton
    FrameV1:
      type: object
      properties:
        version:
          type: string
          description: Version of the mini app, 'next' for v2, 'vNext' for v1
        image:
          type: string
          description: URL of the image
        frames_url:
          type: string
          description: Launch URL of the mini app
        buttons:
          type: array
          items:
            $ref: '#/components/schemas/FrameActionButton'
        post_url:
          type: string
          description: Post URL to take an action on this mini app
        title:
          type: string
        image_aspect_ratio:
          type: string
        input:
          type: object
          properties:
            text:
              type: string
              description: Input text for the mini app
        state:
          type: object
          properties:
            serialized:
              type: string
              description: State for the mini app in a serialized format
      required:
        - version
        - image
        - frames_url
      description: Mini app v1 object
      title: FrameV1
    FarcasterManifest:
      type: object
      properties:
        account_association:
          $ref: '#/components/schemas/EncodedJsonFarcasterSignature'
        frame:
          type: object
          properties:
            version:
              type: string
              enum:
                - 0.0.0
                - 0.0.1
                - '1'
                - next
            name:
              type: string
            home_url:
              type: string
            icon_url:
              type: string
            image_url:
              type: string
            button_title:
              type: string
            splash_image_url:
              type: string
            splash_background_color:
              type: string
            webhook_url:
              type: string
            subtitle:
              type: string
              description: Short subtitle for the configuration
            description:
              type: string
              description: Detailed description of the configuration
            screenshot_urls:
              type: array
              items:
                type: string
                format: uri
              description: URLs of screenshots showcasing the configuration
            primary_category:
              type: string
              description: Primary category the configuration belongs to
            tags:
              type: array
              items:
                type: string
              description: Tags associated with the configuration
            hero_image_url:
              type: string
              format: uri
              description: URL of the hero image displayed for the configuration
            tagline:
              type: string
              description: Short tagline for the configuration
            og_title:
              type: string
              description: Title used for Open Graph previews
            og_description:
              type: string
              description: Description used for Open Graph previews
            og_image_url:
              type: string
              format: uri
              description: Image URL used for Open Graph previews
            noindex:
              type: boolean
              description: Whether search engines should not index this configuration
          required:
            - version
            - name
            - home_url
            - icon_url
        miniapp:
          type: object
          properties:
            version:
              type: string
              enum:
                - 0.0.0
                - 0.0.1
                - '1'
                - next
            name:
              type: string
            home_url:
              type: string
            icon_url:
              type: string
            image_url:
              type: string
            button_title:
              type: string
            splash_image_url:
              type: string
            splash_background_color:
              type: string
            webhook_url:
              type: string
            subtitle:
              type: string
              description: Short subtitle for the configuration
            description:
              type: string
              description: Detailed description of the configuration
            screenshot_urls:
              type: array
              items:
                type: string
                format: uri
              description: URLs of screenshots showcasing the configuration
            primary_category:
              type: string
              description: Primary category the configuration belongs to
            tags:
              type: array
              items:
                type: string
              description: Tags associated with the configuration
            hero_image_url:
              type: string
              format: uri
              description: URL of the hero image displayed for the configuration
            tagline:
              type: string
              description: Short tagline for the configuration
            og_title:
              type: string
              description: Title used for Open Graph previews
            og_description:
              type: string
              description: Description used for Open Graph previews
            og_image_url:
              type: string
              format: uri
              description: Image URL used for Open Graph previews
            noindex:
              type: boolean
              description: Whether search engines should not index this configuration
          required:
            - version
            - name
            - home_url
            - icon_url
      required:
        - account_association
      title: FarcasterManifest
    FrameV2:
      type: object
      properties:
        version:
          type: string
          description: Version of the mini app, 'next' for v2, 'vNext' for v1
        image:
          type: string
          description: URL of the image
        frames_url:
          type: string
          description: Launch URL of the mini app
        title:
          type: string
          description: Button title of a mini app
        manifest:
          $ref: '#/components/schemas/FarcasterManifest'
        author:
          $ref: '#/components/schemas/UserDehydrated'
        metadata:
          type: object
          properties:
            html:
              $ref: '#/components/schemas/HtmlMetadata'
          required:
            - html
      required:
        - version
        - image
        - frames_url
      title: FrameV2
      description: Mini app v2 object
    Frame:
      oneOf:
        - $ref: '#/components/schemas/FrameV1'
        - $ref: '#/components/schemas/FrameV2'
      title: Frame
      discriminator:
        propertyName: version
        mapping:
          '1': '#/components/schemas/FrameV2'
          0.0.0: '#/components/schemas/FrameV2'
          0.0.1: '#/components/schemas/FrameV2'
          next: '#/components/schemas/FrameV2'
          vNext: '#/components/schemas/FrameV1'
    EmbedUrlMetadata:
      type: object
      properties:
        _status:
          type: string
        content_type:
          type: string
          nullable: true
        content_length:
          type: integer
          nullable: true
        image:
          type: object
          properties:
            height_px:
              type: integer
            width_px:
              type: integer
        video:
          type: object
          properties:
            duration_s:
              type: number
            stream:
              type: array
              items:
                type: object
                properties:
                  codec_name:
                    type: string
                  height_px:
                    type: integer
                  width_px:
                    type: integer
        html:
          $ref: '#/components/schemas/HtmlMetadata'
        frame:
          $ref: '#/components/schemas/Frame'
      required:
        - _status
      title: EmbedUrlMetadata
    EmbedUrl:
      type: object
      properties:
        url:
          type: string
        metadata:
          $ref: '#/components/schemas/EmbedUrlMetadata'
      required:
        - url
      title: EmbedUrl
    EmbedDeep:
      oneOf:
        - $ref: '#/components/schemas/EmbedCastDeep'
        - $ref: '#/components/schemas/EmbedUrl'
      title: EmbedDeep
    CastEmbedded:
      type: object
      properties:
        hash:
          type: string
        parent_hash:
          type: string
          nullable: true
        parent_url:
          type: string
          nullable: true
        root_parent_url:
          type: string
          nullable: true
        parent_author:
          type: object
          properties:
            fid:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/Fid'
          required:
            - fid
        author:
          $ref: '#/components/schemas/UserDehydrated'
        app:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/UserDehydrated'
        text:
          type: string
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        embeds:
          type: array
          items:
            $ref: '#/components/schemas/EmbedDeep'
        channel:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/ChannelDehydrated'
      required:
        - hash
        - parent_hash
        - parent_url
        - root_parent_url
        - parent_author
        - author
        - text
        - timestamp
        - embeds
        - channel
      title: CastEmbedded
    EmbedCast:
      type: object
      properties:
        cast_id:
          description: '[DEPRECATED: Use "cast" key instead]'
          deprecated: true
          allOf:
            - $ref: '#/components/schemas/CastId'
        cast:
          $ref: '#/components/schemas/CastEmbedded'
      required:
        - cast
      title: EmbedCast
    Embed:
      oneOf:
        - $ref: '#/components/schemas/EmbedCast'
        - $ref: '#/components/schemas/EmbedUrl'
      title: Embed
    CastNotificationType:
      type: string
      enum:
        - cast-mention
        - cast-reply
      description: The notification type of a cast.
      title: CastNotificationType
    ReactionLike:
      type: object
      properties:
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        fname:
          type: string
      required:
        - fid
        - fname
      title: ReactionLike
    ReactionRecast:
      type: object
      properties:
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        fname:
          type: string
      required:
        - fid
        - fname
      title: ReactionRecast
    CastReactions:
      type: object
      properties:
        likes:
          type: array
          items:
            $ref: '#/components/schemas/ReactionLike'
          description: This has been deprecated and will always be an empty array. The property will be removed in the future
          deprecated: true
        recasts:
          type: array
          items:
            $ref: '#/components/schemas/ReactionRecast'
          description: This has been deprecated and will always be an empty array. The property will be removed in the future
          deprecated: true
        likes_count:
          type: integer
          format: int32
        recasts_count:
          type: integer
          format: int32
      required:
        - likes
        - recasts
        - likes_count
        - recasts_count
      title: CastReactions
    CastReplies:
      type: object
      properties:
        count:
          type: integer
          format: int32
      required:
        - count
      title: CastReplies
    Channel:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
        name:
          type: string
        description:
          type: string
        object:
          type: string
          enum:
            - channel
        created_at:
          $ref: '#/components/schemas/Timestamp'
        follower_count:
          type: number
          description: Number of followers the channel has.
        external_link:
          type: object
          properties:
            title:
              type: string
            url:
              type: string
          description: Channel's external link.
        image_url:
          type: string
        parent_url:
          type: string
          format: uri
        lead:
          $ref: '#/components/schemas/User'
        moderator_fids:
          type: array
          items:
            nullable: true
            allOf:
              - $ref: '#/components/schemas/Fid'
        member_count:
          type: integer
          format: int32
        moderator:
          description: Use `lead` instead.
          deprecated: true
          allOf:
            - $ref: '#/components/schemas/User'
        pinned_cast_hash:
          type: string
          pattern: ^(0x)?[a-fA-F0-9]{40}$
          example: '0x71d5225f77e0164388b1d4c120825f3a2c1f131c'
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/User'
          deprecated: true
        viewer_context:
          $ref: '#/components/schemas/ChannelUserContext'
        description_mentioned_profiles:
          type: array
          items:
            $ref: '#/components/schemas/UserDehydrated'
        description_mentioned_profiles_ranges:
          type: array
          items:
            $ref: '#/components/schemas/TextRange'
          description: Positions within the text (inclusive start, exclusive end) where each mention occurs.
      required:
        - id
        - url
        - object
        - created_at
      title: Channel
    ChannelOrChannelDehydrated:
      discriminator:
        propertyName: object
        mapping:
          channel: '#/components/schemas/Channel'
          channel_dehydrated: '#/components/schemas/ChannelDehydrated'
      oneOf:
        - $ref: '#/components/schemas/Channel'
        - $ref: '#/components/schemas/ChannelDehydrated'
      title: ChannelOrChannelDehydrated
    CastViewerContext:
      type: object
      properties:
        liked:
          type: boolean
          description: Indicates if the viewer liked the cast.
        recasted:
          type: boolean
          description: Indicates if the viewer recasted the cast.
      required:
        - liked
        - recasted
      description: Adds context on interactions the viewer has made with the cast.
      title: CastViewerContext
    CastAndConversationsRef:
      type: object
      properties:
        object:
          type: string
          enum:
            - cast
        hash:
          type: string
        parent_hash:
          type: string
          nullable: true
        parent_url:
          type: string
          nullable: true
        root_parent_url:
          type: string
          nullable: true
        parent_author:
          type: object
          properties:
            fid:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/Fid'
          required:
            - fid
        author:
          $ref: '#/components/schemas/User'
        app:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/UserDehydrated'
        text:
          type: string
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        embeds:
          type: array
          items:
            $ref: '#/components/schemas/Embed'
        type:
          $ref: '#/components/schemas/CastNotificationType'
        reactions:
          $ref: '#/components/schemas/CastReactions'
        replies:
          $ref: '#/components/schemas/CastReplies'
        thread_hash:
          type: string
          nullable: true
        mentioned_profiles:
          type: array
          items:
            $ref: '#/components/schemas/User'
        mentioned_profiles_ranges:
          type: array
          items:
            $ref: '#/components/schemas/TextRange'
          description: |-
            Positions within the text (inclusive start, exclusive end) where each mention occurs.
            Each index within this list corresponds to the same-numbered index in the mentioned_profiles list.
        mentioned_channels:
          type: array
          items:
            $ref: '#/components/schemas/ChannelDehydrated'
        mentioned_channels_ranges:
          type: array
          items:
            $ref: '#/components/schemas/TextRange'
          description: |-
            Positions within the text (inclusive start, exclusive end) where each mention occurs.
            Each index within this list corresponds to the same-numbered index in the mentioned_channels list.
        channel:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/ChannelOrChannelDehydrated'
        viewer_context:
          $ref: '#/components/schemas/CastViewerContext'
        author_channel_context:
          $ref: '#/components/schemas/ChannelUserContext'
        direct_replies:
          type: array
          items:
            type: object
            properties: {}
          description: 'note: This is recursive. It contains the direct replies to the cast and their direct replies up to n reply_depth.'
      required:
        - object
        - hash
        - parent_hash
        - parent_url
        - root_parent_url
        - parent_author
        - author
        - text
        - timestamp
        - embeds
        - reactions
        - replies
        - thread_hash
        - mentioned_profiles
        - mentioned_profiles_ranges
        - mentioned_channels
        - mentioned_channels_ranges
        - channel
        - direct_replies
      title: CastAndConversationsRef
      description: Reference to CastAndConversations to avoid circular reference
    CastAndConversations:
      type: object
      properties:
        object:
          type: string
          enum:
            - cast
        hash:
          type: string
        parent_hash:
          type: string
          nullable: true
        parent_url:
          type: string
          nullable: true
        root_parent_url:
          type: string
          nullable: true
        parent_author:
          type: object
          properties:
            fid:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/Fid'
          required:
            - fid
        author:
          $ref: '#/components/schemas/User'
        app:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/UserDehydrated'
        text:
          type: string
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        embeds:
          type: array
          items:
            $ref: '#/components/schemas/Embed'
        type:
          $ref: '#/components/schemas/CastNotificationType'
        reactions:
          $ref: '#/components/schemas/CastReactions'
        replies:
          $ref: '#/components/schemas/CastReplies'
        thread_hash:
          type: string
          nullable: true
        mentioned_profiles:
          type: array
          items:
            $ref: '#/components/schemas/User'
        mentioned_profiles_ranges:
          type: array
          items:
            $ref: '#/components/schemas/TextRange'
          description: |-
            Positions within the text (inclusive start, exclusive end) where each mention occurs.
            Each index within this list corresponds to the same-numbered index in the mentioned_profiles list.
        mentioned_channels:
          type: array
          items:
            $ref: '#/components/schemas/ChannelDehydrated'
        mentioned_channels_ranges:
          type: array
          items:
            $ref: '#/components/schemas/TextRange'
          description: |-
            Positions within the text (inclusive start, exclusive end) where each mention occurs.
            Each index within this list corresponds to the same-numbered index in the mentioned_channels list.
        channel:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/ChannelOrChannelDehydrated'
        viewer_context:
          $ref: '#/components/schemas/CastViewerContext'
        author_channel_context:
          $ref: '#/components/schemas/ChannelUserContext'
        direct_replies:
          type: array
          items:
            $ref: '#/components/schemas/CastAndConversationsRef'
          description: 'note: This is recursive. It contains the direct replies to the cast and their direct replies up to n reply_depth.'
      required:
        - object
        - hash
        - parent_hash
        - parent_url
        - root_parent_url
        - parent_author
        - author
        - text
        - timestamp
        - embeds
        - reactions
        - replies
        - thread_hash
        - mentioned_profiles
        - mentioned_profiles_ranges
        - mentioned_channels
        - mentioned_channels_ranges
        - channel
        - direct_replies
      title: CastAndConversations
    Cast:
      type: object
      properties:
        object:
          type: string
          enum:
            - cast
        hash:
          type: string
        parent_hash:
          type: string
          nullable: true
        parent_url:
          type: string
          nullable: true
        root_parent_url:
          type: string
          nullable: true
        parent_author:
          type: object
          properties:
            fid:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/Fid'
          required:
            - fid
        author:
          $ref: '#/components/schemas/User'
        app:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/UserDehydrated'
        text:
          type: string
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        embeds:
          type: array
          items:
            $ref: '#/components/schemas/Embed'
        type:
          $ref: '#/components/schemas/CastNotificationType'
        reactions:
          $ref: '#/components/schemas/CastReactions'
        replies:
          $ref: '#/components/schemas/CastReplies'
        thread_hash:
          type: string
          nullable: true
        mentioned_profiles:
          type: array
          items:
            $ref: '#/components/schemas/User'
        mentioned_profiles_ranges:
          type: array
          items:
            $ref: '#/components/schemas/TextRange'
          description: |-
            Positions within the text (inclusive start, exclusive end) where each mention occurs.
            Each index within this list corresponds to the same-numbered index in the mentioned_profiles list.
        mentioned_channels:
          type: array
          items:
            $ref: '#/components/schemas/ChannelDehydrated'
        mentioned_channels_ranges:
          type: array
          items:
            $ref: '#/components/schemas/TextRange'
          description: |-
            Positions within the text (inclusive start, exclusive end) where each mention occurs.
            Each index within this list corresponds to the same-numbered index in the mentioned_channels list.
        channel:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/ChannelOrChannelDehydrated'
        viewer_context:
          $ref: '#/components/schemas/CastViewerContext'
        author_channel_context:
          $ref: '#/components/schemas/ChannelUserContext'
      required:
        - object
        - hash
        - parent_hash
        - parent_url
        - root_parent_url
        - parent_author
        - author
        - text
        - timestamp
        - embeds
        - reactions
        - replies
        - thread_hash
        - mentioned_profiles
        - mentioned_profiles_ranges
        - mentioned_channels
        - mentioned_channels_ranges
        - channel
      title: Cast
    Conversation:
      type: object
      properties:
        conversation:
          type: object
          properties:
            cast:
              $ref: '#/components/schemas/CastAndConversations'
            chronological_parent_casts:
              type: array
              items:
                $ref: '#/components/schemas/Cast'
          required:
            - cast
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - conversation
      title: Conversation
    CastsMetrics:
      type: object
      properties:
        start:
          type: string
          format: date-time
        resolution_in_seconds:
          type: integer
          format: int32
        cast_count:
          type: integer
          format: int32
      required:
        - start
        - resolution_in_seconds
        - cast_count
      title: CastsMetrics
    CastsMetricsResponse:
      type: object
      properties:
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/CastsMetrics'
      required:
        - metrics
      title: CastsMetricsResponse
    CastsSearchResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            casts:
              type: array
              items:
                $ref: '#/components/schemas/Cast'
            next:
              $ref: '#/components/schemas/NextCursor'
          required:
            - casts
            - next
      required:
        - result
      title: CastsSearchResponse
    CastComposerActionsListResponse:
      type: object
      properties:
        actions:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: The name of the action.
              icon:
                type: string
                description: The icon representing the action.
              description:
                type: string
                description: A brief description of the action.
              about_url:
                type: string
                format: uri
                description: URL to learn more about the action.
              image_url:
                type: string
                format: uri
                description: URL of the action's image.
              action_url:
                type: string
                format: uri
                description: URL to perform the action.
              action:
                type: object
                properties:
                  action_type:
                    type: string
                    description: Type of the action (e.g., post).
                  post_url:
                    type: string
                    format: uri
                    description: URL to post the action.
              octicon:
                type: string
                description: Icon name for the action.
              added_count:
                type: integer
                description: Number of times the action has been added.
              app_name:
                type: string
                description: Name of the application providing the action.
              author_fid:
                type: integer
                description: Author's Farcaster ID.
              category:
                type: string
                description: Category of the action.
              object:
                type: string
                description: Object type, which is "composer_action".
        next:
          $ref: '#/components/schemas/NextCursor'
      title: CastComposerActionsListResponse
    CastEmbedCrawlResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/EmbedUrlMetadata'
      required:
        - metadata
      title: CastEmbedCrawlResponse
    CastResponse:
      type: object
      properties:
        cast:
          $ref: '#/components/schemas/Cast'
      required:
        - cast
      title: CastResponse
    PostCastReqBodyEmbedsCastIdProperties:
      type: object
      properties:
        hash:
          type: string
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
      required:
        - hash
        - fid
      title: PostCastReqBodyEmbedsCastIdProperties
    PostCastReqBodyEmbeds:
      oneOf:
        - type: object
          properties:
            cast_id:
              $ref: '#/components/schemas/PostCastReqBodyEmbedsCastIdProperties'
          required:
            - cast_id
          additionalProperties: false
        - type: object
          properties:
            castId:
              $ref: '#/components/schemas/PostCastReqBodyEmbedsCastIdProperties'
          required:
            - castId
          additionalProperties: false
        - type: object
          properties:
            url:
              type: string
          required:
            - url
          additionalProperties: false
      title: PostCastReqBodyEmbeds
      additionalProperties: false
    CastParent:
      type: string
      description: parent_url of the channel the cast is in, or hash of the cast
      title: CastParent
    Idem:
      type: string
      title: Idem
      description: "An Idempotency key is a unique identifier for the request.\n**Note:** \n1) This is used to prevent duplicate requests. Use the same idem key on retry attempts.\n2) This should be a unique identifier for each request.\n3) Recommended format is a 16-character string generated by the developer at the time of making this request."
    PostCastReqBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        text:
          type: string
        embeds:
          type: array
          items:
            $ref: '#/components/schemas/PostCastReqBodyEmbeds'
          maxItems: 2
        parent:
          $ref: '#/components/schemas/CastParent'
        channel_id:
          type: string
          description: Channel ID of the channel where the cast is to be posted. e.g. neynar, farcaster, warpcast
          example: neynar
        idem:
          $ref: '#/components/schemas/Idem'
        parent_author_fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
      required:
        - signer_uuid
      title: PostCastReqBody
    PostCastResponse:
      type: object
      properties:
        success:
          type: boolean
        cast:
          type: object
          properties:
            hash:
              type: string
              pattern: ^(0x)?[a-fA-F0-9]{40}$
              example: '0x71d5225f77e0164388b1d4c120825f3a2c1f131c'
            author:
              type: object
              properties:
                fid:
                  nullable: true
                  allOf:
                    - $ref: '#/components/schemas/Fid'
              required:
                - fid
            text:
              type: string
          required:
            - hash
            - author
            - text
      required:
        - success
        - cast
      title: PostCastResponse
    DeleteCastReqBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        target_hash:
          type: string
          pattern: ^(0x)?[a-fA-F0-9]{40}$
          example: '0x71d5225f77e0164388b1d4c120825f3a2c1f131c'
      required:
        - signer_uuid
        - target_hash
      title: DeleteCastReqBody
    CastsResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            casts:
              type: array
              items:
                $ref: '#/components/schemas/Cast'
          required:
            - casts
      required:
        - result
      title: CastsResponse
    ChannelListResponse:
      type: object
      properties:
        channels:
          type: array
          items:
            $ref: '#/components/schemas/Channel'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - channels
      title: ChannelListResponse
    ChannelMember:
      type: object
      properties:
        object:
          type: string
          enum:
            - member
        role:
          $ref: '#/components/schemas/ChannelMemberRole'
        user:
          oneOf:
            - $ref: '#/components/schemas/UserDehydrated'
            - $ref: '#/components/schemas/User'
        channel:
          oneOf:
            - $ref: '#/components/schemas/Channel'
            - $ref: '#/components/schemas/ChannelDehydrated'
      required:
        - object
        - role
        - user
        - channel
      title: ChannelMember
    ChannelMemberListResponse:
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/ChannelMember'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - members
        - next
      title: ChannelMemberListResponse
    ChannelId:
      type: string
      description: The unique identifier of a farcaster channel
      example: neynar
      title: ChannelId
    ChannelMemberInvite:
      type: object
      properties:
        channel_id:
          $ref: '#/components/schemas/ChannelId'
        role:
          $ref: '#/components/schemas/ChannelMemberRole'
        inviter:
          $ref: '#/components/schemas/User'
        invited:
          $ref: '#/components/schemas/User'
      required:
        - channel_id
        - role
        - inviter
        - invited
      title: ChannelMemberInvite
    ChannelMemberInviteListResponse:
      type: object
      properties:
        invites:
          type: array
          items:
            $ref: '#/components/schemas/ChannelMemberInvite'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - invites
      title: ChannelMemberInviteListResponse
    InviteChannelMemberReqBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        channel_id:
          $ref: '#/components/schemas/ChannelId'
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        role:
          $ref: '#/components/schemas/ChannelMemberRole'
      required:
        - signer_uuid
        - channel_id
        - fid
        - role
      title: InviteChannelMemberReqBody
    RespondChannelInviteReqBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        channel_id:
          $ref: '#/components/schemas/ChannelId'
        role:
          $ref: '#/components/schemas/ChannelMemberRole'
        accept:
          type: boolean
          description: Accept or reject the invite
      required:
        - signer_uuid
        - channel_id
        - role
        - accept
      title: RespondChannelInviteReqBody
    RemoveChannelMemberReqBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        channel_id:
          $ref: '#/components/schemas/ChannelId'
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        role:
          $ref: '#/components/schemas/ChannelMemberRole'
      required:
        - signer_uuid
        - channel_id
        - fid
        - role
      title: RemoveChannelMemberReqBody
    ChannelSearchResponse:
      type: object
      properties:
        channels:
          type: array
          items:
            $ref: '#/components/schemas/Channel'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - channels
        - next
      title: ChannelSearchResponse
    ChannelResponseBulk:
      type: object
      properties:
        channels:
          type: array
          items:
            $ref: '#/components/schemas/Channel'
      required:
        - channels
      title: ChannelResponseBulk
    ChannelFollowReqBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        channel_id:
          $ref: '#/components/schemas/ChannelId'
      required:
        - signer_uuid
        - channel_id
      title: ChannelFollowReqBody
    Follower:
      type: object
      properties:
        object:
          type: string
          enum:
            - follower
        app:
          $ref: '#/components/schemas/UserDehydrated'
        user:
          $ref: '#/components/schemas/User'
      required:
        - object
        - user
      title: Follower
    FollowerDehydrated:
      type: object
      properties:
        object:
          type: string
          enum:
            - follower_dehydrated
        user:
          $ref: '#/components/schemas/UserDehydrated'
      required:
        - object
        - user
      title: FollowerDehydrated
    RelevantFollowersResponse:
      type: object
      properties:
        top_relevant_followers_hydrated:
          type: array
          items:
            $ref: '#/components/schemas/Follower'
        all_relevant_followers_dehydrated:
          type: array
          items:
            $ref: '#/components/schemas/FollowerDehydrated'
      required:
        - top_relevant_followers_hydrated
        - all_relevant_followers_dehydrated
      title: RelevantFollowersResponse
    UsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - users
        - next
      title: UsersResponse
    UsersActiveChannelsResponse:
      type: object
      properties:
        channels:
          type: array
          items:
            $ref: '#/components/schemas/Channel'
        next:
          $ref: '#/components/schemas/NextCursor'
      title: UsersActiveChannelsResponse
    ChannelActivity:
      type: object
      properties:
        object:
          type: string
          enum:
            - channel_activity
        cast_count_1d:
          type: string
        cast_count_7d:
          type: string
        cast_count_30d:
          type: string
        channel:
          $ref: '#/components/schemas/Channel'
      required:
        - object
        - cast_count_1d
        - cast_count_7d
        - cast_count_30d
        - channel
      title: ChannelActivity
    TrendingChannelResponse:
      type: object
      properties:
        channels:
          type: array
          items:
            $ref: '#/components/schemas/ChannelActivity'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - channels
        - next
      title: TrendingChannelResponse
    ChannelResponse:
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/Channel'
      required:
        - channel
      title: ChannelResponse
    FeedResponse:
      type: object
      properties:
        casts:
          type: array
          items:
            $ref: '#/components/schemas/Cast'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - casts
        - next
      title: FeedResponse
    BulkCastsResponse:
      type: object
      properties:
        casts:
          type: array
          items:
            $ref: '#/components/schemas/Cast'
      required:
        - casts
      title: BulkCastsResponse
    FnameAvailabilityResponse:
      type: object
      properties:
        available:
          type: boolean
      required:
        - available
      title: FnameAvailabilityResponse
    ReciprocalFollower:
      type: object
      properties:
        object:
          type: string
          enum:
            - reciprocal_follower
        user:
          $ref: '#/components/schemas/User'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
      required:
        - object
        - user
        - timestamp
      title: ReciprocalFollower
    FollowersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/Follower'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - users
        - next
      title: FollowersResponse
    FrameV2WithFullAuthor:
      type: object
      properties:
        version:
          type: string
          description: Version of the mini app, 'next' for v2, 'vNext' for v1
        image:
          type: string
          description: URL of the image
        frames_url:
          type: string
          description: Launch URL of the mini app
        title:
          type: string
          description: Button title of a mini app
        manifest:
          $ref: '#/components/schemas/FarcasterManifest'
        author:
          $ref: '#/components/schemas/User'
        metadata:
          type: object
          properties:
            html:
              $ref: '#/components/schemas/HtmlMetadata'
          required:
            - html
      required:
        - version
        - image
        - frames_url
      title: FrameV2WithFullAuthor
      description: Mini app v2 object with full user object
    FrameCatalogResponse:
      type: object
      properties:
        frames:
          type: array
          items:
            $ref: '#/components/schemas/FrameV2WithFullAuthor'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - frames
        - next
      title: FrameCatalogResponse
    NeynarPageImage:
      type: object
      properties:
        url:
          type: string
          format: uri
          description: The URL of the page's image.
          example: https://i.imgur.com/qo2AzBf.jpeg
        aspect_ratio:
          type: string
          enum:
            - 1.91:1
            - '1:1'
          description: The aspect ratio of the image.
      required:
        - url
        - aspect_ratio
      title: NeynarPageImage
    NeynarNextFramePage:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: The UUID of the next page.
      required:
        - uuid
      title: NeynarNextFramePage
    NeynarNextFramePageRedirect:
      type: object
      properties:
        redirect_url:
          type: string
          format: uri
          description: The URL to redirect to.
      required:
        - redirect_url
      title: NeynarNextFramePageRedirect
    NeynarNextFramePageMintUrl:
      type: object
      properties:
        mint_url:
          type: string
          description: The URL for minting, specific to the mint action.
      required:
        - mint_url
      title: NeynarNextFramePageMintUrl
    NeynarPageButton:
      type: object
      properties:
        title:
          type: string
          description: The title of the button.
        index:
          type: integer
          description: The index of the button, first button should have index 1 and so on.
        action_type:
          type: string
          enum:
            - post
            - post_redirect
            - mint
            - link
          description: The type of action that the button performs.
        next_page:
          oneOf:
            - $ref: '#/components/schemas/NeynarNextFramePage'
            - $ref: '#/components/schemas/NeynarNextFramePageRedirect'
            - $ref: '#/components/schemas/NeynarNextFramePageMintUrl'
      required:
        - title
        - index
        - action_type
      title: NeynarPageButton
    NeynarPageInput:
      type: object
      properties:
        text:
          type: object
          properties:
            enabled:
              default: false
              type: boolean
              description: Indicates if text input is enabled.
            placeholder:
              type: string
              description: The placeholder text for the input.
      title: NeynarPageInput
    NeynarFramePage:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the page.
        version:
          default: vNext
          type: string
          description: The version of the page schema.
          example: vNext
        title:
          type: string
          description: The title of the page.
          example: Welcome to Neynar
        image:
          $ref: '#/components/schemas/NeynarPageImage'
        buttons:
          type: array
          items:
            $ref: '#/components/schemas/NeynarPageButton'
        input:
          $ref: '#/components/schemas/NeynarPageInput'
      required:
        - uuid
        - title
        - image
      title: NeynarFramePage
    NeynarFrame:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the mini app.
        name:
          type: string
          description: Name of the mini app.
        link:
          type: string
          format: uri
          description: Generated link for the mini app's first page.
        pages:
          type: array
          items:
            $ref: '#/components/schemas/NeynarFramePage'
        valid:
          type: boolean
          description: Indicates if the mini app is valid.
      required:
        - uuid
        - name
        - link
        - pages
      title: NeynarFrame
    FrameInput:
      type: object
      properties:
        text:
          type: string
          description: Input text for the mini app
          example: Draw a purple ringed planet
      title: FrameInput
    FrameState:
      type: object
      properties:
        serialized:
          type: string
          description: State for the mini app in a serialized format
          example: '%7B%22counter%22%3A1%7D'
      required:
        - serialized
      title: FrameState
    FrameTransaction:
      type: object
      properties:
        hash:
          type: string
          description: Transaction hash
          example: '0xa80de157a3ab4648db1ecfab7e6355b342215bc549f6e37be9e6da527cc024f7'
      required:
        - hash
      title: FrameTransaction
    FrameAddress:
      type: string
      title: FrameAddress
      description: The connected wallet address of the interacting user.
    FrameAction:
      type: object
      properties:
        version:
          type: string
        title:
          type: string
        image:
          type: string
        button:
          $ref: '#/components/schemas/FrameActionButton'
        input:
          $ref: '#/components/schemas/FrameInput'
        state:
          $ref: '#/components/schemas/FrameState'
        transaction:
          $ref: '#/components/schemas/FrameTransaction'
        address:
          $ref: '#/components/schemas/FrameAddress'
        frames_url:
          type: string
          description: URL of the mini apps
        post_url:
          type: string
          description: URL of the post to get the next mini app
      required:
        - button
        - frames_url
        - post_url
      title: FrameAction
    CastId:
      type: object
      properties:
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        hash:
          type: string
      required:
        - fid
        - hash
      title: CastId
    FrameSignaturePacket:
      type: object
      properties:
        untrustedData:
          type: object
          properties:
            fid:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/Fid'
            url:
              type: string
              description: URL of the mini app
            messageHash:
              type: string
              description: Message hash
            timestamp:
              type: string
              description: Timestamp
            network:
              type: integer
              description: Network
            buttonIndex:
              type: integer
              description: Index of the button
            inputText:
              type: string
              description: Input text
            state:
              type: string
              description: State
            transactionId:
              type: string
              description: Transaction ID
            address:
              $ref: '#/components/schemas/EthAddress'
            castId:
              $ref: '#/components/schemas/CastId'
          description: Untrusted data from the user
        trustedData:
          type: object
          properties:
            messageBytes:
              type: string
              description: Message bytes
          description: Trusted data from the user
      required:
        - untrustedData
        - trustedData
      title: FrameSignaturePacket
      description: The Mini app Signature Packet (https://miniapps.farcaster.xyz/)
    FrameDeveloperManagedActionReqBody:
      type: object
      properties:
        cast_hash:
          type: string
          pattern: ^(0x)?[a-fA-F0-9]{40}$
          example: '0x71d5225f77e0164388b1d4c120825f3a2c1f131c'
        action:
          $ref: '#/components/schemas/FrameAction'
        signature_packet:
          $ref: '#/components/schemas/FrameSignaturePacket'
      required:
        - action
        - signature_packet
      title: FrameDeveloperManagedActionReqBody
    FrameActionReqBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        cast_hash:
          type: string
          pattern: ^(0x)?[a-fA-F0-9]{40}$
          example: '0x71d5225f77e0164388b1d4c120825f3a2c1f131c'
        action:
          $ref: '#/components/schemas/FrameAction'
      required:
        - signer_uuid
        - action
      title: FrameActionReqBody
    FrameNotificationTokens:
      type: object
      properties:
        notification_tokens:
          type: array
          items:
            type: object
            properties:
              object:
                type: string
                enum:
                  - notification_token
              url:
                type: string
              token:
                type: string
              status:
                type: string
                enum:
                  - enabled
                  - disabled
                  - invalid
              fid:
                nullable: true
                allOf:
                  - $ref: '#/components/schemas/Fid'
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - notification_tokens
        - next
      title: FrameNotificationTokens
    SendFrameNotificationsReqBody:
      type: object
      properties:
        target_fids:
          type: array
          items:
            nullable: true
            allOf:
              - $ref: '#/components/schemas/Fid'
          maxItems: 100
          description: An array of target FIDs to whom the notifications should be sent. Each FID must be a positive integer. Pass an empty array to send notifications to all FIDs with notifications enabled for the mini app.
          example:
            - 1
            - 2
            - 3
        filters:
          type: object
          properties:
            exclude_fids:
              type: array
              items:
                nullable: true
                allOf:
                  - $ref: '#/components/schemas/Fid'
              description: Only send notifications to users who are not in the given FIDs.
            following_fid:
              type: integer
              minimum: 0
              description: Only send notifications to users who follow the given FID.
              nullable: true
              example: 3
              format: int32
            minimum_user_score:
              type: number
              minimum: 0
              maximum: 1
              description: Only send notifications to users with a score greater than or equal to this value.
            near_location:
              type: object
              properties:
                latitude:
                  type: number
                  minimum: -90
                  maximum: 90
                  format: double
                longitude:
                  type: number
                  minimum: -180
                  maximum: 180
                  format: double
                address:
                  $ref: '#/components/schemas/LocationAddress'
                radius:
                  type: number
                  minimum: 0
                  description: The radius in meters for the location search. Any location within this radius will be returned.
              required:
                - latitude
                - longitude
              description: Only send notifications to users near a given location.
          description: Filters to apply to the target_fids set. All filters are additive, so only users matching all filters will be notified.
        notification:
          type: object
          properties:
            title:
              type: string
              minLength: 1
              maxLength: 32
              description: The title of the notification. Must be between 1 and 32 characters.
              example: New Message
            body:
              type: string
              minLength: 1
              maxLength: 128
              description: The body of the notification. Must be between 1 and 128 characters.
              example: You have received a new message in your inbox.
            target_url:
              type: string
              maxLength: 256
              format: uri
              description: The target URL to open when the user clicks the notification. Must be a valid URL.
              example: https://example.com/notifications
            uuid:
              type: string
              format: uuid
              description: An optional UUID for the notification, used as an idempotency key.
              example: 123e4567-e89b-12d3-a456-426614174000
          required:
            - title
            - body
            - target_url
      required:
        - target_fids
        - notification
      title: SendFrameNotificationsReqBody
    NotificationDelivery:
      type: object
      properties:
        object:
          type: string
          enum:
            - notification_delivery
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        status:
          type: string
          enum:
            - success
            - failed
            - invalid_token
            - rate_limited
            - token_not_found
            - token_disabled
            - http_error
            - invalid_target_url
        app_fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
      required:
        - object
        - fid
        - status
      title: NotificationDelivery
    SendFrameNotificationsResponse:
      type: object
      properties:
        notification_deliveries:
          type: array
          items:
            $ref: '#/components/schemas/NotificationDelivery'
      required:
        - notification_deliveries
      title: SendFrameNotificationsResponse
    NotificationCampaignStats:
      type: object
      properties:
        intended_recipient_notification_token_count:
          type: integer
          description: The total number of notification tokens for intended recipients.
          nullable: true
          format: int32
        intended_recipient_app_fids:
          type: array
          items:
            type: integer
            format: int32
          description: An array of Farcaster FIDs of intended recipient applications.
        successful_sends:
          type: integer
          description: The number of notifications successfully sent.
          nullable: true
          format: int32
        successful_sends_by_app_fid:
          type: object
          additionalProperties:
            type: integer
            format: int32
          description: A record mapping app FIDs (as strings) to the number of successful sends for that app.
        total_opens:
          type: integer
          description: The total number of times notifications from this campaign have been opened.
          nullable: true
          format: int32
        total_opens_by_app_fid:
          type: object
          additionalProperties:
            type: integer
            format: int32
          description: A record mapping app FIDs (as strings) to the number of opens for that app.
        unique_opens:
          type: integer
          description: The number of unique recipients who opened a notification from this campaign.
          nullable: true
          format: int32
        unique_opens_by_app_fid:
          type: object
          additionalProperties:
            type: integer
            format: int32
          description: A record mapping app FIDs (as strings) to the number of unique opens for that app.
        error_breakdown:
          type: object
          properties:
            delivery_errors:
              type: object
              additionalProperties:
                type: integer
                format: int32
              description: A record mapping delivery error types to their occurrence counts.
            http_errors:
              type: object
              additionalProperties:
                type: integer
                format: int32
              description: A record mapping HTTP status codes to their occurrence counts.
          description: Detailed breakdown of errors encountered during notification delivery.
      required:
        - intended_recipient_notification_token_count
        - intended_recipient_app_fids
        - successful_sends
        - successful_sends_by_app_fid
        - total_opens
        - total_opens_by_app_fid
        - unique_opens
        - unique_opens_by_app_fid
        - error_breakdown
      title: NotificationCampaignStats
    NotificationCampaign:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the notification campaign.
        title:
          type: string
          description: The title of the notification campaign.
        body:
          type: string
          description: The body text of the notification.
        created_at:
          type: string
          format: date-time
        stats:
          $ref: '#/components/schemas/NotificationCampaignStats'
      required:
        - id
        - title
        - body
        - created_at
        - stats
      title: NotificationCampaign
    Network:
      type: string
      enum:
        - ethereum
        - optimism
        - base
        - arbitrum
      description: A blockchain network e.g. "ethereum", "optimism", "base", "arbitrum"
      title: Network
    TransactionFrameDestination:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/EthAddress'
        network:
          $ref: '#/components/schemas/Network'
        token_contract_address:
          type: string
          pattern: ^0x[a-fA-F0-9]{40}$
          description: Token contract address for the payment (e.g. 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913 is USDC on Base)
          example: '0x833589fcd6edb6e08f4c7c32d4f71b54bda02913'
        amount:
          type: number
          minimum: 1.e-8
          description: Amount to send (must be greater than 0)
          example: 0.01
      required:
        - address
        - network
        - token_contract_address
        - amount
      title: TransactionFrameDestination
    TransactionFrameLineItem:
      type: object
      properties:
        name:
          type: string
          description: Name of the line item in transaction
          example: Payment
        description:
          type: string
          description: Description of the line item in transaction
          example: Payment for goods
        image:
          type: string
          description: Optional image URL for the line item in transaction
          example: https://i.imgur.com/ovGo3sz.png
      required:
        - name
        - description
      title: TransactionFrameLineItem
    TransactionFrameAction:
      type: object
      properties:
        text:
          type: string
          description: Custom text for action button
          example: Pay
        text_color:
          type: string
          description: Custom text color for action button
          example: '#FFFFFF'
        button_color:
          type: string
          description: Custom button color for action button
          example: '#000000'
      title: TransactionFrameAction
      description: Action button for primary CTA on the transaction mini app
    TransactionFrameConfig:
      type: object
      properties:
        allowlist_fids:
          type: array
          items:
            nullable: true
            allOf:
              - $ref: '#/components/schemas/Fid'
          description: Optional list of FIDs that are allowed to use this transaction mini app
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/TransactionFrameLineItem'
          minItems: 1
          description: List of items included in the transaction
        action:
          $ref: '#/components/schemas/TransactionFrameAction'
      required:
        - line_items
      title: TransactionFrameConfig
    FramePayTransactionReqBody:
      type: object
      properties:
        transaction:
          type: object
          properties:
            to:
              $ref: '#/components/schemas/TransactionFrameDestination'
          required:
            - to
        config:
          $ref: '#/components/schemas/TransactionFrameConfig'
        idem:
          $ref: '#/components/schemas/Idem'
      required:
        - transaction
        - config
      title: FramePayTransactionReqBody
    TransactionFrameType:
      type: string
      enum:
        - pay
      title: TransactionFrameType
      description: Type of transaction mini app
    TransactionFrameStatus:
      type: string
      enum:
        - created
        - completed
      title: TransactionFrameStatus
    TransactionFramePay:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the transaction mini app
        url:
          type: string
          format: uri
          description: URL that can be used to access the transaction mini app
        type:
          $ref: '#/components/schemas/TransactionFrameType'
        config:
          $ref: '#/components/schemas/TransactionFrameConfig'
        status:
          $ref: '#/components/schemas/TransactionFrameStatus'
        transaction:
          type: object
          properties:
            to:
              $ref: '#/components/schemas/TransactionFrameDestination'
          required:
            - to
      required:
        - id
        - url
        - type
        - config
        - status
        - transaction
      title: TransactionFramePay
    TransactionFrame:
      discriminator:
        propertyName: type
        mapping:
          pay: '#/components/schemas/TransactionFramePay'
      oneOf:
        - $ref: '#/components/schemas/TransactionFramePay'
      title: TransactionFrame
    TransactionFrameResponse:
      type: object
      properties:
        transaction_frame:
          $ref: '#/components/schemas/TransactionFrame'
      required:
        - transaction_frame
      title: TransactionFrameResponse
    FrameValidateAnalyticsInteractors:
      type: object
      properties:
        interactors:
          type: array
          items:
            type: object
            properties:
              fid:
                nullable: true
                allOf:
                  - $ref: '#/components/schemas/Fid'
              username:
                type: string
              interaction_count:
                type: number
            required:
              - fid
              - username
              - interaction_count
      required:
        - interactors
      title: FrameValidateAnalyticsInteractors
    FrameValidateAnalyticsTotalInteractors:
      type: object
      properties:
        total_interactors:
          type: number
      required:
        - total_interactors
      title: FrameValidateAnalyticsTotalInteractors
    FrameValidateAnalyticsInteractionsPerCast:
      type: object
      properties:
        interactions_per_cast:
          type: array
          items:
            type: object
            properties:
              start:
                type: string
                format: date-time
              stop:
                type: string
                format: date-time
              time:
                type: string
                format: date-time
              interaction_count:
                type: number
              cast_url:
                type: string
                format: uri
            required:
              - start
              - stop
              - time
              - interaction_count
              - cast_url
      required:
        - interactions_per_cast
      title: FrameValidateAnalyticsInteractionsPerCast
    FrameValidateAnalyticsInputText:
      type: object
      properties:
        input_texts:
          type: array
          items:
            type: object
            properties:
              fid:
                nullable: true
                allOf:
                  - $ref: '#/components/schemas/Fid'
              username:
                type: string
              input_text:
                type: string
            required:
              - fid
              - username
              - input_text
      required:
        - input_texts
      title: FrameValidateAnalyticsInputText
    FrameValidateAnalyticsResponse:
      oneOf:
        - $ref: '#/components/schemas/FrameValidateAnalyticsInteractors'
        - $ref: '#/components/schemas/FrameValidateAnalyticsTotalInteractors'
        - $ref: '#/components/schemas/FrameValidateAnalyticsInteractionsPerCast'
        - $ref: '#/components/schemas/FrameValidateAnalyticsInputText'
      title: FrameValidateAnalyticsResponse
    FrameValidateListResponse:
      type: object
      properties:
        frames:
          type: array
          items:
            type: string
            format: uri
      required:
        - frames
      title: FrameValidateListResponse
    ValidateFrameActionReqBody:
      type: object
      properties:
        message_bytes_in_hex:
          type: string
          description: Hexadecimal string of message bytes.
        cast_reaction_context:
          default: true
          type: boolean
          description: Adds viewer_context inside the cast object to indicate whether the interactor reacted to the cast housing the mini app.
        follow_context:
          default: false
          type: boolean
          description: Adds viewer_context inside the user (interactor) object to indicate whether the interactor follows or is followed by the cast author.
        signer_context:
          default: false
          type: boolean
          description: Adds context about the app used by the user inside `frame.action`.
        channel_follow_context:
          default: false
          type: boolean
          description: Adds context about the channel that the cast belongs to inside of the cast object.
      required:
        - message_bytes_in_hex
      title: ValidateFrameActionReqBody
    ValidatedFrameAction:
      type: object
      properties:
        object:
          type: string
          enum:
            - validated_frame_action
        url:
          type: string
          format: uri
        interactor:
          $ref: '#/components/schemas/User'
        tapped_button:
          type: object
          properties:
            index:
              type: integer
          required:
            - index
        input:
          $ref: '#/components/schemas/FrameInput'
        state:
          $ref: '#/components/schemas/FrameState'
        cast:
          $ref: '#/components/schemas/Cast'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        signer:
          type: object
          properties:
            client:
              $ref: '#/components/schemas/User'
        transaction:
          $ref: '#/components/schemas/FrameTransaction'
        address:
          $ref: '#/components/schemas/FrameAddress'
      required:
        - object
        - url
        - interactor
        - tapped_button
        - state
        - cast
        - timestamp
      title: ValidatedFrameAction
    ValidateFrameActionResponse:
      type: object
      properties:
        valid:
          type: boolean
          example: true
        action:
          $ref: '#/components/schemas/ValidatedFrameAction'
      required:
        - valid
        - action
      title: ValidateFrameActionResponse
    NeynarFrameCreationReqBody:
      type: object
      properties:
        name:
          type: string
          description: The name of the mini app.
        pages:
          type: array
          items:
            $ref: '#/components/schemas/NeynarFramePage'
      required:
        - name
        - pages
      title: NeynarFrameCreationReqBody
    NeynarFrameUpdateReqBody:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: The UUID of the mini app to update.
        name:
          type: string
          description: The name of the mini app.
        pages:
          type: array
          items:
            $ref: '#/components/schemas/NeynarFramePage'
      required:
        - uuid
        - pages
      title: NeynarFrameUpdateReqBody
    DeleteFrameReqBody:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
      title: DeleteFrameReqBody
    DeleteFrameResponse:
      type: object
      properties:
        success:
          type: boolean
        uuid:
          type: string
          format: uuid
      title: DeleteFrameResponse
    RelevantFungibleOwnersResponse:
      type: object
      properties:
        top_relevant_fungible_owners_hydrated:
          type: array
          items:
            $ref: '#/components/schemas/User'
        all_relevant_fungible_owners_dehydrated:
          type: array
          items:
            $ref: '#/components/schemas/UserDehydrated'
      required:
        - top_relevant_fungible_owners_hydrated
        - all_relevant_fungible_owners_dehydrated
      title: RelevantFungibleOwnersResponse
    TransactionSendFungiblesRecipient:
      type: object
      properties:
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        amount:
          type: number
          minimum: 1.e-8
          description: Amount to send (must be greater than 0)
      required:
        - fid
        - amount
      title: TransactionSendFungiblesRecipient
    TransactionSendFungiblesReqBody:
      type: object
      properties:
        network:
          type: string
          enum:
            - base
            - optimism
            - base-sepolia
        fungible_contract_address:
          type: string
          pattern: ^0x[a-fA-F0-9]{40}$
          description: Contract address of the fungible token to send. If not provided, the default is the native token of the network.
          example: '0x833589fcd6edb6e08f4c7c32d4f71b54bda02913'
        recipients:
          type: array
          items:
            $ref: '#/components/schemas/TransactionSendFungiblesRecipient'
          minItems: 1
          maxItems: 200
      required:
        - network
        - recipients
      title: TransactionSendFungiblesReqBody
    TransactionSendFungiblesReceipt:
      type: object
      properties:
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        amount:
          type: number
        status:
          type: string
          enum:
            - sent
            - failed
        reason:
          type: string
          description: Reason for failure (if status is failed)
      required:
        - fid
        - amount
        - status
      title: TransactionSendFungiblesReceipt
    TransactionSendTxInfo:
      type: object
      properties:
        network:
          type: string
          enum:
            - base
            - optimism
            - base-sepolia
        transaction_hash:
          type: string
        gas_used:
          type: string
          description: Gas used for the transaction.
        approval_hash:
          type: string
          description: Hash of the transaction that approved the transfer. This is only present if the fungible token is not native token of the network.
      required:
        - network
        - transaction_hash
        - gas_used
        - approval_hash
      title: TransactionSendTxInfo
    TransactionSendFungiblesResponse:
      type: object
      properties:
        send_receipts:
          type: array
          items:
            $ref: '#/components/schemas/TransactionSendFungiblesReceipt'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionSendTxInfo'
      required:
        - send_receipts
        - transactions
      title: TransactionSendFungiblesResponse
    NonceResponse:
      type: object
      properties:
        nonce:
          type: string
          description: The nonce value to sign the message
          example: neynarbMi9zSDuOC1GFqixR
      required:
        - nonce
      title: NonceResponse
    AuthorizationUrlResponse:
      type: object
      properties:
        authorization_url:
          type: string
          format: uri
      required:
        - authorization_url
      title: AuthorizationUrlResponse
    PublishMessageReqBody:
      type: object
      properties: {}
      title: PublishMessageReqBody
    PublishMessageResponse:
      type: object
      properties: {}
      title: PublishMessageResponse
    MuteRecord:
      type: object
      properties:
        object:
          type: string
          enum:
            - mute
        muted:
          $ref: '#/components/schemas/User'
        muted_at:
          $ref: '#/components/schemas/Timestamp'
      required:
        - object
        - muted
        - muted_at
      title: MuteRecord
    MuteListResponse:
      type: object
      properties:
        mutes:
          type: array
          items:
            $ref: '#/components/schemas/MuteRecord'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - mutes
        - next
      title: MuteListResponse
    MuteReqBody:
      type: object
      properties:
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        muted_fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
      required:
        - fid
        - muted_fid
      title: MuteReqBody
    MuteResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
      required:
        - success
      title: MuteResponse
    PrefixedHexString:
      type: string
      pattern: ^0x[a-fA-F0-9]+$
      description: Hexadecimal number expressed as string with '0x' prefix
      title: PrefixedHexString
    SimulateNftMintResponse:
      type: array
      items:
        type: object
        properties:
          recipient:
            type: object
            properties:
              address:
                $ref: '#/components/schemas/EthAddress'
              fid:
                nullable: true
                allOf:
                  - $ref: '#/components/schemas/Fid'
              quantity:
                type: integer
                minimum: 1
                description: Quantity to mint (must be at least 1).
                example: 1
            description: NFT mint recipient. Exactly one of "address" or "fid" must be set.
          function_name:
            type: string
            example: mintTo
          args:
            type: array
            items:
              nullable: true
          to:
            $ref: '#/components/schemas/EthAddress'
          data:
            type: string
            example: '0x1234abcd'
          value:
            type: string
            example: '0'
          network:
            type: string
            example: base
          calldata:
            type: string
            description: Calldata for the mint transaction.
            example: '0xabcdef'
          abi:
            nullable: true
            description: ABI for the mint function.
        required:
          - recipient
          - function_name
          - args
          - to
          - data
          - value
          - network
          - calldata
      title: SimulateNftMintResponse
      description: Calldata simulations for NFT minting.
    ReactionWithUserInfo:
      type: object
      properties:
        object:
          type: string
          enum:
            - likes
            - recasts
        cast:
          $ref: '#/components/schemas/CastDehydrated'
        user:
          $ref: '#/components/schemas/User'
      required:
        - object
        - cast
        - user
      title: ReactionWithUserInfo
    Notification:
      type: object
      properties:
        object:
          type: string
          enum:
            - notification
        most_recent_timestamp:
          type: string
          format: date-time
        type:
          type: string
          enum:
            - follows
            - recasts
            - likes
            - mention
            - reply
            - quote
        seen:
          type: boolean
        follows:
          type: array
          items:
            $ref: '#/components/schemas/Follower'
        cast:
          $ref: '#/components/schemas/Cast'
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/ReactionWithUserInfo'
        count:
          type: integer
          description: The number of notifications of this(follows, likes, recast) type bundled in a single notification.
          format: int32
      required:
        - object
        - most_recent_timestamp
        - type
        - seen
      title: Notification
    NotificationsResponse:
      type: object
      properties:
        unseen_notifications_count:
          type: integer
          format: int32
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - unseen_notifications_count
        - notifications
        - next
      title: NotificationsResponse
    NotificationType:
      type: string
      enum:
        - follows
        - recasts
        - likes
        - mentions
        - replies
        - quotes
      title: NotificationType
      description: The type of notification to mark as seen. If not provided, all notifications will be marked as seen.
    MarkNotificationsAsSeenReqBody:
      type: object
      properties:
        signer_uuid:
          type: string
          description: The UUID of a signer with at least one write permission.  Required unless a valid Authorization Bearer token is provided in the header.
        type:
          $ref: '#/components/schemas/NotificationType'
      title: MarkNotificationsAsSeenReqBody
    ReactionType:
      type: string
      enum:
        - like
        - recast
      title: ReactionType
    ReactionReqBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        reaction_type:
          $ref: '#/components/schemas/ReactionType'
        target:
          type: string
          description: Target cast hash (hex string starting with 0x) OR a valid URL.
          example: 0x3702ec1b298bb7ac6f00346432d959ad7b05b9a8 -OR- http://neynar.com/
        target_author_fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        idem:
          $ref: '#/components/schemas/Idem'
      required:
        - signer_uuid
        - reaction_type
        - target
      title: ReactionReqBody
    ReactionForCast:
      type: object
      properties:
        reaction_type:
          $ref: '#/components/schemas/ReactionType'
        app:
          $ref: '#/components/schemas/UserDehydrated'
        reaction_timestamp:
          type: string
          format: date-time
        object:
          type: string
          enum:
            - likes
            - recasts
        user:
          $ref: '#/components/schemas/User'
      required:
        - reaction_type
        - reaction_timestamp
        - object
        - user
      title: ReactionForCast
    ReactionsCastResponse:
      type: object
      properties:
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/ReactionForCast'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - reactions
        - next
      title: ReactionsCastResponse
    ReactionWithCastInfo:
      type: object
      properties:
        reaction_type:
          type: string
          enum:
            - like
            - recast
        app:
          $ref: '#/components/schemas/UserDehydrated'
        cast:
          $ref: '#/components/schemas/Cast'
        reaction_timestamp:
          type: string
          format: date-time
        object:
          type: string
          enum:
            - likes
            - recasts
        user:
          $ref: '#/components/schemas/UserDehydrated'
      required:
        - reaction_type
        - cast
        - reaction_timestamp
        - object
        - user
      title: ReactionWithCastInfo
    ReactionsResponse:
      type: object
      properties:
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/ReactionWithCastInfo'
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - reactions
        - next
      title: ReactionsResponse
    Ed25519PublicKey:
      type: string
      pattern: ^0x[a-fA-F0-9]{64}$
      example: '0x3daa8f99c5f760688a3c9f95716ed93dee5ed5d7722d776b7c4deac957755f22'
      description: Ed25519 public key
      title: Ed25519PublicKey
    RegisterDeveloperManagedSignedKeyReqBody:
      type: object
      properties:
        public_key:
          $ref: '#/components/schemas/Ed25519PublicKey'
        signature:
          type: string
          description: Signature generated by the custody address of the app. Signed data includes app_fid, deadline, signer's public key
          example: '0x7867e84cb6a64bf6e1954e52884133f1114eb3fd97f63ff55fa76c77c80beb6434eea9d3736b59caa3130d63121177acc752dc8a2561e9edf700642f390f92d11b'
        app_fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        deadline:
          type: integer
          description: unix timestamp in seconds that controls how long the signed key request is valid for. (24 hours from now is recommended)
        redirect_url:
          type: string
          description: |-
            Url to redirect to after the signer is approved.
            **Note** : This should only be used when requesting a signer from a native mobile application.
        sponsor:
          $ref: '#/components/schemas/SignedKeyRequestSponsor'
      required:
        - public_key
        - signature
        - app_fid
        - deadline
      title: RegisterDeveloperManagedSignedKeyReqBody
    DeveloperManagedSigner:
      type: object
      properties:
        public_key:
          $ref: '#/components/schemas/Ed25519PublicKey'
        status:
          type: string
          enum:
            - pending_approval
            - approved
            - revoked
        signer_approval_url:
          type: string
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
      required:
        - public_key
        - status
      title: DeveloperManagedSigner
    SharedSignerPermission:
      type: string
      enum:
        - WRITE_ALL
        - READ_ONLY
        - NONE
        - PUBLISH_CAST
        - DELETE_CAST
        - PUBLISH_REACTION
        - DELETE_REACTION
        - UPDATE_PROFILE
        - FOLLOW_USER
        - UNFOLLOW_USER
        - FOLLOW_CHANNEL
        - UNFOLLOW_CHANNEL
        - ADD_VERIFICATION
        - REMOVE_VERIFICATION
        - WRITE_FRAME_ACTION
      title: SharedSignerPermission
    Signer:
      type: object
      properties:
        object:
          type: string
          enum:
            - signer
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        public_key:
          $ref: '#/components/schemas/Ed25519PublicKey'
        status:
          type: string
          enum:
            - generated
            - pending_approval
            - approved
            - revoked
        signer_approval_url:
          type: string
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/SharedSignerPermission'
      required:
        - signer_uuid
        - public_key
        - status
      title: Signer
    SignerListResponse:
      type: object
      properties:
        signers:
          type: array
          items:
            $ref: '#/components/schemas/Signer'
      required:
        - signers
      title: SignerListResponse
    RegisterSignerKeyReqBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        signature:
          type: string
          description: Signature generated by the custody address of the app. Signed data includes app_fid, deadline, signer's public key
        app_fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        deadline:
          type: integer
          description: unix timestamp in seconds that controls how long the signed key request is valid for. (24 hours from now is recommended)
        redirect_url:
          type: string
          description: |-
            Url to redirect to after the signer is approved.
            **Note** : This should only be used when requesting a signer from a native mobile application.
        sponsor:
          $ref: '#/components/schemas/SignedKeyRequestSponsor'
      required:
        - signer_uuid
        - signature
        - app_fid
        - deadline
      title: RegisterSignerKeyReqBody
    StorageAllocation:
      type: object
      properties:
        object:
          type: string
          example: storage_allocation
        user:
          $ref: '#/components/schemas/UserDehydrated'
        units:
          type: integer
          example: 10
        expiry:
          type: string
          format: date-time
          example: '2024-10-08T22:03:49.000Z'
        timestamp:
          type: string
          format: date-time
          example: '2023-10-09T22:03:49.000Z'
      title: StorageAllocation
    StorageAllocationsResponse:
      type: object
      properties:
        total_active_units:
          type: integer
          example: 13
        allocations:
          type: array
          items:
            $ref: '#/components/schemas/StorageAllocation'
      title: StorageAllocationsResponse
    StorageObject:
      type: object
      properties:
        object:
          type: string
          example: storage
        used:
          type: integer
          example: 3659
        capacity:
          type: integer
          example: 10000
      title: StorageObject
    StorageUsageResponse:
      type: object
      properties:
        object:
          type: string
          example: storage_usage
        user:
          $ref: '#/components/schemas/UserDehydrated'
        casts:
          $ref: '#/components/schemas/StorageObject'
        reactions:
          $ref: '#/components/schemas/StorageObject'
        links:
          $ref: '#/components/schemas/StorageObject'
        verified_addresses:
          $ref: '#/components/schemas/StorageObject'
        username_proofs:
          $ref: '#/components/schemas/StorageObject'
        signers:
          $ref: '#/components/schemas/StorageObject'
        total_active_units:
          type: integer
          example: 2
      title: StorageUsageResponse
    BuyStorageReqBody:
      type: object
      properties:
        fid:
          type: integer
          minimum: 1
          example: 1
        units:
          type: integer
          minimum: 1
          description: |-
            Number of storage units to buy.
            A storage unit lets you store 5000 casts, 2500 reactions and 2500 links.
          example: 1
        idem:
          type: string
          description: "An Idempotency key is a unique identifier for the request.\n**Note:** \n1) This is used to prevent duplicate requests. Use the same idem key on retry attempts.\n2) This should be a unique identifier for each request.\n3) Recommended format is a 16-character string generated by the developer at the time of making this request."
      required:
        - fid
      title: BuyStorageReqBody
    ConflictErrorRes:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        property:
          type: string
        key:
          type: string
      required:
        - message
      description: Details for the conflict error response
      title: ConflictErrorRes
    BestFriendsResponse:
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            properties:
              fid:
                type: integer
              mutual_affinity_score:
                type: number
              username:
                type: string
            required:
              - fid
              - mutual_affinity_score
              - username
        next:
          $ref: '#/components/schemas/NextCursor'
      required:
        - users
      title: BestFriendsResponse
    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
      required:
        - user
      title: UserResponse
    BulkUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - users
      title: BulkUsersResponse
    UserFIDResponse:
      type: object
      properties:
        fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
      required:
        - fid
      title: UserFIDResponse
    RegisterUserOnChainReqBody:
      type: object
      properties:
        idem:
          type: string
          description: "An Idempotency key is a unique identifier for the request.\n**Note:** \n1) Pre-registration calls must be idempotent when using idempotency keys.\n2) This is used to prevent duplicate requests. Use the same idem key on retry attempts.\n3) This should be a unique identifier for each request.\n4) Recommended format is a 16-character string generated by the developer at the time of making this request."
        pre_registration_calls:
          type: array
          items:
            type: object
            properties:
              allow_failure:
                default: false
                type: boolean
                description: Set it to true if you want to ignore the failure of this call. If set to false, the registration will fail if this call fails.
              data:
                type: string
                pattern: ^0x[a-fA-F0-9]+$
                description: Call data payload (hex-encoded)
              target:
                type: string
                pattern: ^0x[a-fA-F0-9]{40}$
                description: Must be on the allowed contract allowlist. Contact support for more details.
                example: '0x5a927ac639636e534b678e81768ca19e2c6280b7'
              value:
                default: 0
                type: integer
                minimum: 0
                description: Value in wei to send with the transaction. This is not the amount of ETH that will be sent, but rather the value of the transaction.
            required:
              - data
              - target
        registration:
          type: object
          properties:
            deadline:
              type: integer
              minimum: 0
              example: 1715190000
            signature:
              $ref: '#/components/schemas/PrefixedHexString'
            custody_address:
              $ref: '#/components/schemas/EthAddress'
            recovery_address:
              $ref: '#/components/schemas/EthAddress'
          required:
            - deadline
            - signature
            - custody_address
            - recovery_address
        storage_units:
          type: integer
          minimum: 0
          example: 2
        signers:
          type: array
          items:
            type: object
            properties:
              signature:
                $ref: '#/components/schemas/PrefixedHexString'
              metadata:
                $ref: '#/components/schemas/PrefixedHexString'
              public_key:
                $ref: '#/components/schemas/Ed25519PublicKey'
              key_type:
                default: 1
                type: integer
                minimum: 1
              metadata_type:
                default: 1
                type: integer
                minimum: 1
              deadline:
                type: integer
                minimum: 0
                example: 1715190000
            required:
              - signature
              - metadata
              - public_key
              - deadline
      required:
        - registration
      title: RegisterUserOnChainReqBody
    RegisterUserOnChainResponse:
      type: object
      properties:
        message:
          type: string
          example: Account registered successfully
        transaction_hash:
          type: string
          example: '0x2e276b4d014334797d9951ce2d3b7a11a4a58855cb07b3761de36785c618220a'
        user:
          $ref: '#/components/schemas/User'
      title: RegisterUserOnChainResponse
    UserSearchResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            next:
              $ref: '#/components/schemas/NextCursor'
          required:
            - users
      required:
        - result
      title: UserSearchResponse
    UserPowerLiteResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            fids:
              type: array
              items:
                nullable: true
                allOf:
                  - $ref: '#/components/schemas/Fid'
              description: List of FIDs
          required:
            - fids
      required:
        - result
      title: UserPowerLiteResponse
    BulkUsersByAddressResponse:
      type: object
      title: BulkUsersByAddressResponse
      anyOf:
        - additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/User'
    VerificationType:
      default: 0
      type: integer
      enum:
        - 0
        - 1
      title: VerificationType
      description: Type of verification. 0 = EOA, 1 = contract
      format: int32
    VerificationChainId:
      default: 0
      type: integer
      enum:
        - 0
        - 1
        - 10
      title: VerificationChainId
      description: Chain ID for farcaster verifications. 0 for EOA verifications, 1 or 10 for contract verifications
      format: int32
    AddVerificationReqBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        address:
          $ref: '#/components/schemas/EthAddress'
        block_hash:
          type: string
          example: '0x191905a9201170abb55f4c90a4cc968b44c1b71cdf3db2764b775c93e7e22b29'
        eth_signature:
          type: string
          example: '0x2fc09da1f4dcb723fefb91f77932c249c418c0af00c66ed92ee1f35002c80d6a1145280c9f361d207d28447f8f7463366840d3a9309036cf6954afd1fd331beb1b'
        verification_type:
          $ref: '#/components/schemas/VerificationType'
        chain_id:
          $ref: '#/components/schemas/VerificationChainId'
      required:
        - signer_uuid
        - address
        - block_hash
        - eth_signature
      title: AddVerificationReqBody
    RemoveVerificationReqBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        address:
          $ref: '#/components/schemas/EthAddress'
        block_hash:
          type: string
          example: '0x191905a9201170abb55f4c90a4cc968b44c1b71cdf3db2764b775c93e7e22b29'
        eth_signature:
          type: string
          example: '0x2fc09da1f4dcb723fefb91f77932c249c418c0af00c66ed92ee1f35002c80d6a1145280c9f361d207d28447f8f7463366840d3a9309036cf6954afd1fd331beb1b'
      required:
        - signer_uuid
        - address
        - block_hash
        - eth_signature
      title: RemoveVerificationReqBody
    FollowReqBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        target_fids:
          type: array
          items:
            nullable: true
            allOf:
              - $ref: '#/components/schemas/Fid'
          maxItems: 100
          example:
            - 194
            - 3
      required:
        - signer_uuid
        - target_fids
      title: FollowReqBody
    FollowResponse:
      type: object
      properties:
        success:
          type: boolean
        target_fid:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Fid'
        hash:
          type: string
      required:
        - success
        - target_fid
        - hash
      title: FollowResponse
    BulkFollowResponse:
      type: object
      properties:
        success:
          type: boolean
        details:
          type: array
          items:
            $ref: '#/components/schemas/FollowResponse'
      required:
        - success
        - details
      title: BulkFollowResponse
    TokenBalance:
      type: object
      properties:
        object:
          type: string
          enum:
            - token_balance
        token:
          type: object
          properties:
            object:
              type: string
              enum:
                - token
            name:
              type: string
              description: The token name e.g. "Ethereum"
            symbol:
              type: string
              description: The token symbol e.g. "ETH"
            address:
              type: string
              description: The contract address of the token (omitted for native token)
            decimals:
              type: integer
              description: The number of decimals the token uses
          required:
            - object
            - name
            - symbol
        balance:
          type: object
          properties:
            in_token:
              type: string
              description: The balance in the token
            in_usdc:
              type: string
              description: The balance in USDC
          required:
            - in_token
            - in_usdc
      required:
        - object
        - token
        - balance
      title: TokenBalance
      description: The token balance associated with a wallet address and a network
    AddressBalance:
      type: object
      properties:
        object:
          type: string
          enum:
            - address_balance
        verified_address:
          type: object
          properties:
            address:
              type: string
              description: The wallet address
            network:
              $ref: '#/components/schemas/Network'
          required:
            - address
            - network
        token_balances:
          type: array
          items:
            $ref: '#/components/schemas/TokenBalance'
      required:
        - object
        - verified_address
        - token_balances
      title: AddressBalance
      description: The token balances associated with a wallet address
    BalanceResponse:
      type: object
      properties:
        user_balance:
          type: object
          properties:
            object:
              type: string
              enum:
                - user_balance
            user:
              $ref: '#/components/schemas/UserDehydrated'
            address_balances:
              type: array
              items:
                $ref: '#/components/schemas/AddressBalance'
          required:
            - object
            - user
            - address_balances
      title: BalanceResponse
    SubscriptionTier:
      type: object
      properties:
        id:
          type: integer
          example: 1
        price:
          type: object
          properties:
            period_duration_seconds:
              type: integer
              example: 2592000
            tokens_per_period:
              type: string
              example: '3000000000000000'
            initial_mint_price:
              type: string
              example: '0'
      title: SubscriptionTier
    Subscription:
      type: object
      properties:
        object:
          type: string
          enum:
            - subscription
        provider_name:
          type: string
          example: fabric_stp
        contract_address:
          type: string
          example: '0xff63fc310d47ef80961056ac8df0b3f1a9e3ef58'
        chain:
          type: integer
          example: 8453
        metadata:
          type: object
          properties:
            title:
              type: string
              example: /memes channel sub
            symbol:
              type: string
              example: MMS
            art_url:
              type: string
              example: https://storage.withfabric.xyz/loom/403fdc10-95f3-4b25-9d77-5aac7ccb9fd1.jpg
          required:
            - title
            - symbol
            - art_url
        owner_address:
          type: string
          example: '0xb6f6dce6000ca88cc936b450cedb16a5c15f157f'
        price:
          type: object
          properties:
            period_duration_seconds:
              type: integer
              example: 2592000
            tokens_per_period:
              type: string
              example: '350574998400000'
            initial_mint_price:
              type: string
              example: '0'
          required:
            - period_duration_seconds
            - tokens_per_period
            - initial_mint_price
        tiers:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionTier'
        protocol_version:
          type: integer
          example: 1
        token:
          type: object
          properties:
            symbol:
              type: string
              example: ETH
            address:
              type: string
              nullable: true
              example: null
            decimals:
              type: integer
              example: 18
            erc20:
              type: boolean
              example: false
          required:
            - symbol
            - address
            - decimals
            - erc20
      required:
        - object
        - contract_address
        - chain
        - metadata
        - owner_address
        - price
        - protocol_version
        - token
      title: Subscription
    Subscriptions:
      type: object
      properties:
        subscriptions_created:
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
      required:
        - subscriptions_created
      title: Subscriptions
    SubscriptionsResponse:
      type: object
      properties:
        subscriptions_created:
          type: array
          items:
            $ref: '#/components/schemas/Subscriptions'
      title: SubscriptionsResponse
    SubscribedTo:
      type: object
      properties:
        object:
          type: string
          enum:
            - subscription
        provider_name:
          type: string
          example: fabric_stp
        contract_address:
          type: string
          example: '0xff63fc310d47ef80961056ac8df0b3f1a9e3ef58'
        chain:
          type: integer
          example: 8453
        metadata:
          type: object
          properties:
            title:
              type: string
              example: /memes channel sub
            symbol:
              type: string
              example: MMS
            art_url:
              type: string
              example: https://storage.withfabric.xyz/loom/403fdc10-95f3-4b25-9d77-5aac7ccb9fd1.jpg
          required:
            - title
            - symbol
            - art_url
        owner_address:
          type: string
          example: '0xb6f6dce6000ca88cc936b450cedb16a5c15f157f'
        price:
          type: object
          properties:
            period_duration_seconds:
              type: integer
              example: 2592000
            tokens_per_period:
              type: string
              example: '350574998400000'
            initial_mint_price:
              type: string
              example: '0'
          required:
            - period_duration_seconds
            - tokens_per_period
            - initial_mint_price
        tiers:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionTier'
        protocol_version:
          type: integer
          example: 1
        token:
          type: object
          properties:
            symbol:
              type: string
              example: ETH
            address:
              type: string
              nullable: true
              example: null
            decimals:
              type: integer
              example: 18
            erc20:
              type: boolean
              example: false
          required:
            - symbol
            - address
            - decimals
            - erc20
        expires_at:
          type: string
          format: date-time
          example: '2023-09-13T22:10:22.000Z'
        subscribed_at:
          type: string
          format: date-time
          example: '2023-09-13T22:10:22.000Z'
        tier:
          $ref: '#/components/schemas/SubscriptionTier'
        creator:
          $ref: '#/components/schemas/User'
      required:
        - object
        - contract_address
        - chain
        - metadata
        - owner_address
        - price
        - protocol_version
        - token
        - expires_at
        - subscribed_at
        - tier
        - creator
      title: SubscribedTo
    SubscribedToResponse:
      type: object
      properties:
        subscribed_to:
          type: array
          items:
            $ref: '#/components/schemas/SubscribedTo'
      title: SubscribedToResponse
    SubscribedToObject:
      type: object
      properties:
        object:
          type: string
          enum:
            - subscription_dehydrated
        provider_name:
          type: string
          example: fabric_stp
        contract_address:
          type: string
          example: '0x325b3e2c19f4900f8f4eb5f6872dc2715e77cbac'
        protocol_version:
          type: integer
          example: 1
        chain:
          type: integer
          example: 8453
        expires_at:
          type: string
          format: date-time
          example: '2023-09-13T22:10:22.000Z'
        subscribed_at:
          type: string
          format: date-time
          example: '2023-09-13T22:10:22.000Z'
        tier_id:
          type: string
          example: '0'
      required:
        - object
        - provider_name
      title: SubscribedToObject
    Subscriber:
      type: object
      properties:
        object:
          type: string
          enum:
            - subscriber
        user:
          $ref: '#/components/schemas/User'
        subscribed_to:
          $ref: '#/components/schemas/SubscribedToObject'
      required:
        - object
        - user
        - subscribed_to
      title: Subscriber
    SubscribersResponse:
      type: object
      properties:
        subscribers:
          type: array
          items:
            $ref: '#/components/schemas/Subscriber'
      title: SubscribersResponse
    UpdateUserReqBody:
      type: object
      properties:
        signer_uuid:
          $ref: '#/components/schemas/SignerUUID'
        bio:
          type: string
        pfp_url:
          type: string
        url:
          type: string
        username:
          type: string
        display_name:
          type: string
        location:
          type: object
          properties:
            latitude:
              type: number
              minimum: -90
              maximum: 90
              format: double
            longitude:
              type: number
              minimum: -180
              maximum: 180
              format: double
          required:
            - latitude
            - longitude
        banner:
          type: string
          description: Requires pro subscription.
        primary_eth_address:
          type: string
          pattern: ^0x[a-fA-F0-9]{40}$
          description: Must be one of the verified addresses.
        primary_sol_address:
          type: string
          pattern: ^[1-9A-HJ-NP-Za-km-z]{32,44}$
          description: Must be one of the verified addresses.
        verified_accounts:
          type: object
          properties:
            x:
              type: string
            github:
              type: string
      required:
        - signer_uuid
      title: UpdateUserReqBody
    RegisterUserReqBody:
      type: object
      properties:
        signer:
          type: object
          properties:
            uuid:
              type: string
              format: uuid
            signed_key_request_metadata_signature:
              type: string
            app_fid:
              type: number
            deadline:
              type: number
          required:
            - uuid
            - signed_key_request_metadata_signature
            - app_fid
            - deadline
        signature:
          type: string
        fid:
          type: number
        requested_user_custody_address:
          type: string
        deadline:
          type: number
        fname:
          type: string
        metadata:
          type: object
          properties:
            bio:
              type: string
            pfp_url:
              type: string
            url:
              type: string
            username:
              type: string
            display_name:
              type: string
            verified_accounts:
              type: object
              properties:
                x:
                  type: string
                github:
                  type: string
            location:
              type: object
              properties:
                latitude:
                  type: number
                  minimum: -90
                  maximum: 90
                  format: double
                longitude:
                  type: number
                  minimum: -180
                  maximum: 180
                  format: double
              required:
                - latitude
                - longitude
      required:
        - signature
        - fid
        - requested_user_custody_address
        - deadline
      title: RegisterUserReqBody
    RegisterUserResponse:
      type: object
      properties:
        success:
          type: boolean
          enum:
            - true
        message:
          type: string
        signer:
          $ref: '#/components/schemas/Signer'
        signers:
          type: array
          items:
            type: object
            properties:
              object:
                type: string
                enum:
                  - signer
              public_key:
                $ref: '#/components/schemas/Ed25519PublicKey'
              status:
                type: string
                enum:
                  - generated
                  - pending_approval
                  - approved
                  - revoked
              signer_approval_url:
                type: string
              fid:
                nullable: true
                allOf:
                  - $ref: '#/components/schemas/Fid'
              permissions:
                type: array
                items:
                  $ref: '#/components/schemas/SharedSignerPermission'
              uuid:
                $ref: '#/components/schemas/SignerUUID'
            required:
              - public_key
              - status
              - uuid
        user:
          $ref: '#/components/schemas/User'
      required:
        - success
        - message
        - signers
      title: RegisterUserResponse
    WebhookSecret:
      type: object
      properties:
        uid:
          type: string
        value:
          type: string
        expires_at:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        deleted_at:
          type: string
      required:
        - uid
        - value
        - expires_at
        - created_at
        - updated_at
        - deleted_at
      title: WebhookSecret
    WebhookSubscriptionFiltersCast:
      type: object
      properties:
        exclude_author_fids:
          type: array
          items:
            type: integer
          description: |-
            Exclude casts that matches these authors.
            **Note:**
            This is applied as an AND operation against rest of the filters.
            Rest of the filters are bundled as an OR operation.
        author_fids:
          type: array
          items:
            type: integer
        mentioned_fids:
          type: array
          items:
            type: integer
        parent_urls:
          type: array
          items:
            type: string
        root_parent_urls:
          type: array
          items:
            type: string
        parent_hashes:
          type: array
          items:
            type: string
        parent_author_fids:
          type: array
          items:
            type: integer
        text:
          type: string
          description: "Regex pattern to match the text key of the cast.\n**Note:** \n1) Regex must be parsed by Go's RE2 engine (Test your expression here: https://www.lddgo.net/en/string/golangregex)\n2) Use backslashes to escape special characters.\nFor example: (?i)\\\\$degen should be written as (?i)\\\\\\\\$degen"
          example: (?i)\$degen
        embeds:
          type: string
          description: "Regex pattern to match the embeded_url (key embeds) of the cast.\n**Note:** \n1) Regex must be parsed by Go's RE2 engine (Test your expression here: https://www.lddgo.net/en/string/golangregex)\n2) Use backslashes to escape special characters.\nFor example: \\\\b(farcaster|neynar)\\\\b should be written as \\\\\\\\b(farcaster|neynar)\\\\\\\\b"
          example: "\b(farcaster|neynar)\b"
        minimum_author_score:
          default: 0
          type: number
          minimum: 0
          maximum: 1
        embedded_cast_author_fids:
          type: array
          items:
            type: number
          description: Filter for casts that contain embedded casts authored by these FIDs
        embedded_cast_hashes:
          type: array
          items:
            type: string
          description: Filter for casts that quote/embed these specific cast hashes
      title: WebhookSubscriptionFiltersCast
    WebhookSubscriptionFiltersFollow:
      type: object
      properties:
        fids:
          type: array
          items:
            type: integer
        target_fids:
          type: array
          items:
            type: integer
      title: WebhookSubscriptionFiltersFollow
    WebhookSubscriptionFiltersReaction:
      type: object
      properties:
        fids:
          type: array
          items:
            type: integer
        target_fids:
          type: array
          items:
            type: integer
        target_cast_hashes:
          type: array
          items:
            type: string
            pattern: ^(0x)?[a-fA-F0-9]{40}$
            example: '0x71d5225f77e0164388b1d4c120825f3a2c1f131c'
      title: WebhookSubscriptionFiltersReaction
    WebhookSubscriptionFiltersTrade:
      type: object
      properties:
        fids:
          type: array
          items:
            type: integer
        minimum_trader_neynar_score:
          type: number
          minimum: 0
          maximum: 1
        minimum_token_amount_usdc:
          type: number
          minimum: 0
      title: WebhookSubscriptionFiltersTrade
    WebhookSubscriptionFilters:
      type: object
      properties:
        cast.created:
          $ref: '#/components/schemas/WebhookSubscriptionFiltersCast'
        cast.deleted:
          $ref: '#/components/schemas/WebhookSubscriptionFiltersCast'
        user.created:
          type: object
          properties: {}
        user.updated:
          type: object
          properties:
            fids:
              type: array
              items:
                type: integer
        follow.created:
          $ref: '#/components/schemas/WebhookSubscriptionFiltersFollow'
        follow.deleted:
          $ref: '#/components/schemas/WebhookSubscriptionFiltersFollow'
        reaction.created:
          $ref: '#/components/schemas/WebhookSubscriptionFiltersReaction'
        reaction.deleted:
          $ref: '#/components/schemas/WebhookSubscriptionFiltersReaction'
        trade.created:
          $ref: '#/components/schemas/WebhookSubscriptionFiltersTrade'
      title: WebhookSubscriptionFilters
    WebhookSubscription:
      type: object
      properties:
        object:
          type: string
          enum:
            - webhook_subscription
        subscription_id:
          type: string
        filters:
          $ref: '#/components/schemas/WebhookSubscriptionFilters'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - object
        - subscription_id
        - filters
        - created_at
        - updated_at
      title: WebhookSubscription
    Webhook:
      type: object
      properties:
        object:
          type: string
          enum:
            - webhook
        webhook_id:
          type: string
        developer_uuid:
          type: string
        target_url:
          type: string
        title:
          type: string
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/WebhookSecret'
        description:
          type: string
        http_timeout:
          type: string
        rate_limit:
          type: integer
        active:
          type: boolean
        rate_limit_duration:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
        subscription:
          $ref: '#/components/schemas/WebhookSubscription'
      required:
        - object
        - webhook_id
        - developer_uuid
        - target_url
        - title
        - secrets
        - description
        - http_timeout
        - rate_limit
        - active
        - rate_limit_duration
        - created_at
        - updated_at
        - deleted_at
      title: Webhook
    WebhookListResponse:
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
      required:
        - webhooks
      title: WebhookListResponse
    WebhookResponse:
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean
        webhook:
          $ref: '#/components/schemas/Webhook'
      title: WebhookResponse
    WebhookPostReqBody:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        subscription:
          $ref: '#/components/schemas/WebhookSubscriptionFilters'
      required:
        - name
        - url
      title: WebhookPostReqBody
    WebhookPatchReqBody:
      type: object
      properties:
        webhook_id:
          type: string
        active:
          type: string
          enum:
            - 'true'
            - 'false'
      required:
        - webhook_id
        - active
      title: WebhookPatchReqBody
    WebhookPutReqBody:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        subscription:
          $ref: '#/components/schemas/WebhookSubscriptionFilters'
        webhook_id:
          type: string
      required:
        - name
        - url
        - webhook_id
      title: WebhookPutReqBody
    WebhookDeleteReqBody:
      type: object
      properties:
        webhook_id:
          type: string
      required:
        - webhook_id
      title: WebhookDeleteReqBody
    DeployFungibleReqBody:
      type: object
      properties:
        owner:
          type: string
          description: Ethereum address of the one who is creating the token
        symbol:
          type: string
          description: Symbol/Ticker for the token
        name:
          type: string
          description: Name of the token
        metadata[media]:
          nullable: true
          description: "Media file associated with the token. \nSupported formats are image/jpeg, image/gif and image/png"
          format: binary
          type: string
        metadata[description]:
          type: string
          description: Description of the token
        metadata[nsfw]:
          type: string
          enum:
            - 'true'
            - 'false'
          description: Indicates if the token is NSFW (Not Safe For Work).
        metadata[website_link]:
          type: string
          description: Website link related to the token
        metadata[twitter]:
          type: string
          description: Twitter profile link
        metadata[discord]:
          type: string
          description: Discord server link
        metadata[telegram]:
          type: string
          description: Telegram link
        network:
          default: base
          type: string
          enum:
            - base
          description: Network/Chain name
        factory:
          default: wow
          type: string
          enum:
            - wow
            - clanker
          description: |-
            Factory name
            - wow -> [wow.xyz](https://wow.xyz)
            - clanker -> [clanker.world](https://www.clanker.world)
      required:
        - owner
        - symbol
        - name
      title: DeployFungibleReqBody
    DeployFungibleResponse:
      type: object
      properties:
        contract:
          type: object
          properties:
            fungible:
              type: object
              properties:
                object:
                  type: string
                  example: fungible
                name:
                  type: string
                  description: Name of the token
                symbol:
                  type: string
                  description: Symbol of the token
                media:
                  type: string
                  description: URI of the token media
                address:
                  type: string
                  description: Contract address of the token
                decimals:
                  type: integer
                  description: Decimal precision of the token
      title: DeployFungibleResponse
    SubscriptionCheckResponse:
      type: object
      title: SubscriptionCheckResponse
      anyOf:
        - additionalProperties:
            properties:
              object:
                type: string
                enum:
                  - subscribed_to_dehydrated
              status:
                type: boolean
              expires_at:
                type: integer
                format: int64
                nullable: true
              subscribed_at:
                type: integer
                format: int64
                nullable: true
              tier:
                nullable: true
                allOf:
                  - $ref: '#/components/schemas/SubscriptionTier'
            required:
              - object
              - status
              - expires_at
              - subscribed_at
              - tier
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: API key to authorize requests
      x-default: NEYNAR_API_DOCS
  parameters:
    NeynarExperimentalHeader:
      name: x-neynar-experimental
      in: header
      description: Enables experimental features including filtering based on the Neynar score. See [docs](https://neynar.notion.site/Experimental-Features-1d2655195a8b80eb98b4d4ae7b76ae4a) for more details.
      schema:
        type: boolean
        default: false
      x-is-global-header: true
    AuthorizationHeader:
      name: Authorization
      description: Optional Bearer token for certain endpoints. The token format is described [here](https://docs.farcaster.xyz/reference/warpcast/api#authentication).
      in: header
      schema:
        type: string
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      x-is-global-header: true
    WalletIdHeader:
      name: x-wallet-id
      description: Wallet ID to use for transactions
      in: header
      required: true
      schema:
        type: string
      x-is-global-header: true
