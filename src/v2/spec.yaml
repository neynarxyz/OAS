openapi: 3.1.0
info:
  title: Farcaster API V2
  version: "2.14.0"
  description: >
    The Farcaster API allows you to interact with the Farcaster protocol.
    See the [Neynar docs](https://docs.neynar.com/reference) for more details.
  contact:
    name: Neynar
    url: https://neynar.com/
    email: team@neynar.com
servers:
  - url: https://api.neynar.com/v2

security:
  - ApiKeyAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: "API key to authorize requests"
      x-default: "NEYNAR_API_DOCS"

  parameters:
    NeynarExperimentalHeader:
      name: x-neynar-experimental
      in: header
      required: false
      schema:
        type: boolean
        default: false
      description: "Enables experimental features"
      x-is-global-header: true

  schemas:
    Address:
      type: string
      pattern: "^0x[a-fA-F0-9]{40}$"
      description: Ethereum address
    SolAddress:
      type: string
      pattern: "^[1-9A-HJ-NP-Za-km-z]{32,44}$"
      description: Solana address
    Fid:
      type: integer
      format: int32
      description: The unique identifier of a farcaster user (unsigned integer)
      examples:
        - 3
        - 191
        - 2
        - 194
        - 19960
    ChannelId:
      type: string
      description: The unique identifier of a farcaster channel
      examples:
        - "neynar"
    SignerUUID:
      type: string
      description: |
        UUID of the signer.
        `signer_uuid` is paired with API key, can't use a `uuid` made with a different API key.
      examples:
        - "19d0c5fd-9b33-4a48-a0e2-bc7b0555baec"
    SubscriptionProviders:
      type: string
      enum:
        - fabric_stp
        - paragraph
      description: |
        The provider of the subscription.
    SubscriptionProvider:
      type: string
      enum:
        - fabric_stp
      description: |
        The provider of the subscription.
    FollowSortType:
      type: string
      enum:
        - desc_chron
        - algorithmic
      examples:
        - "desc_chron"
    CastConversationSortType:
      type: string
      enum:
        - chron
        - desc_chron
        - algorithmic
      examples:
        - "chron"
    ForYouProvider:
      type: string
      default: openrank
      enum:
        - openrank
        - mbd
      description: |
        The provider of the For You feed.
    FeedTrendingProvider:
      type: string
      enum:
        - neynar
        - openrank
        - mbd
      default: neynar
      description: |
        The provider of the trending casts feed.
    ReactionType:
      type: string
      enum:
        - like
        - recast
    ReactionsType:
      type: string
      enum:
        - all
        - likes
        - recasts
    NextCursor:
      type: object
      description: Returns next cursor
      required:
        - cursor
      properties:
        cursor:
          type: [string, "null"]
    CastHash:
      type: string
      default: "0xfe90f9de682273e05b201629ad2338bdcd89b6be"
      description: Cast Hash
    CastNotificationType:
      type: string
      enum:
        - cast-mention
        - cast-reply
      description: |
        The notification type of a cast.
    CastParamType:
      type: string
      enum:
        - url
        - hash
      description: |
        The query param accepted by the API. Sent along with identifier param.
        url - Cast identifier is a url
        hash - Cast identifier is a hash
    ReplyDepth:
      type: integer
      description: |
        Depth of replies to fetch in the conversation.
      default: 2
      minimum: 0
      maximum: 5
    ErrorRes:
      type: object
      required:
        - message
      description: Details for the error response
      properties:
        code:
          type: string
        message:
          type: string
        property:
          type: string
        status:
          type: integer
          format: int32
    ConflictErrorRes:
      type: object
      required:
        - message
      description: Details for the conflict error response
      properties:
        code:
          type: string
        message:
          type: string
        property:
          type: string
        key:
          type: string
    Ed25519PublicKey:
      type: string
      pattern: "^0x[a-fA-F0-9]{64}$"
      description: Ed25519 public key
      examples:
        - "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
    Timestamp:
      type: string
      format: date-time
    EmbedUrl:
      type: object
      required:
        - url
      properties:
        url:
          type: string
        metadata:
          $ref: "#/components/schemas/EmbedUrlMetadata"

    FarcasterManifest:
      type: object
      properties:
        account_association:
          type: object
          properties:
            header:
              type: string
            payload:
              type: string
            signature:
              type: string
          required:
            - header
            - payload
            - signature
        frame:
          type: object
          properties:
            version:
              type: string
              enum:
                - "0.0.0"
                - "0.0.1"
                - "1"
                - "next"
            name:
              type: string
              maxLength: 32
            home_url:
              type: string
              maxLength: 512
            icon_url:
              type: string
              maxLength: 512
            image_url:
              type: string
              maxLength: 512
            button_title:
              type: string
              maxLength: 32
            splash_image_url:
              type: string
              maxLength: 512
            splash_background_color:
              type: string
            webhook_url:
              type: string
              maxLength: 512
          required:
            - version
            - name
            - home_url
            - icon_url
        triggers:
          type: array
          items:
            oneOf:
              - type: object
                properties:
                  type:
                    type: string
                    enum: ["cast"]
                  id:
                    type: string
                  url:
                    type: string
                    maxLength: 512
                  name:
                    type: string
                    maxLength: 32
                required:
                  - type
                  - id
                  - url
              - type: object
                properties:
                  type:
                    type: string
                    enum: ["composer"]
                  id:
                    type: string
                  url:
                    type: string
                    maxLength: 512
                  name:
                    type: string
                    maxLength: 32
                required:
                  - type
                  - id
                  - url
      required:
        - account_association

    # TwitterImageObject:
    #   type: object
    #   properties:
    #     alt:
    #       type: string
    #     height:
    #       type: string # Should be 'integer' but open-graph-scraper lies and returns a string
    #     url:
    #       type: string
    #     width:
    #       type: string # Should be 'integer' but open-graph-scraper lies and returns a string
    #   required:
    #     - url
    # TwitterPlayerObject:
    #   type: object
    #   properties:
    #     height:
    #       type: string # Should be 'integer' but open-graph-scraper lies and returns a string
    #     stream:
    #       type: string
    #     url:
    #       type: string
    #     width:
    #       type: string # Should be 'integer' but open-graph-scraper lies and returns a string
    #   required:
    #     - url
    ImageObject:
      type: object
      properties:
        height:
          type: string # Should be 'integer' but open-graph-scraper lies and returns a string
        type:
          type: string
        url:
          type: string
        width:
          type: string # Should be 'integer' but open-graph-scraper lies and returns a string
        alt:
          type: string
      required:
        - url
    VideoObject:
      type: object
      properties:
        height:
          type: string # Should be 'integer' but open-graph-scraper lies and returns a string
        type:
          type: string
        url:
          type: string
        width:
          type: string # Should be 'integer' but open-graph-scraper lies and returns a string
      required:
        - url
    # MusicSongObject:
    #   type: object
    #   properties:
    #     disc:
    #       type: string
    #     track:
    #       type: string # Should be 'integer' but open-graph-scraper lies and returns a string
    #     url:
    #       type: string
    #   required:
    #     - url
    OgObject:
      # Adapted from https://github.com/jshemas/openGraphScraper/blob/80b1800c377f5a647e365f07a2262e997a9b897c/lib/types.ts#L118-L347
      type: object
      properties:
        # alAndroidAppName:
        #   type: string
        # alAndroidClass:
        #   type: string
        # alAndroidPackage:
        #   type: string
        # alAndroidUrl:
        #   type: string
        # alIosAppName:
        #   type: string
        # alIosAppStoreId:
        #   type: string
        # alIosUrl:
        #   type: string
        # alIpadAppName:
        #   type: string
        # alIpadAppStoreId:
        #   type: string
        # alIpadUrl:
        #   type: string
        # alIphoneAppName:
        #   type: string
        # alIphoneAppStoreId:
        #   type: string
        # alIphoneUrl:
        #   type: string
        # alWebShouldFallback:
        #   type: string
        # alWebUrl:
        #   type: string
        # alWindowsAppId:
        #   type: string
        # alWindowsAppName:
        #   type: string
        # alWindowsPhoneAppId:
        #   type: string
        # alWindowsPhoneAppName:
        #   type: string
        # alWindowsPhoneUrl:
        #   type: string
        # alWindowsUniversalAppId:
        #   type: string
        # alWindowsUniversalAppName:
        #   type: string
        # alWindowsUniversalUrl:
        #   type: string
        # alWindowsUrl:
        #   type: string
        # articleAuthor:
        #   type: string
        # articleExpirationTime:
        #   type: string
        # articleModifiedTime:
        #   type: string
        # articlePublishedDate:
        #   type: string
        # articlePublishedTime:
        #   type: string
        # articleModifiedDate:
        #   type: string
        # articlePublisher:
        #   type: string
        # articleSection:
        #   type: string
        # articleTag:
        #   type: string
        # author:
        #   type: string
        # bookAuthor:
        #   type: string
        # bookCanonicalName:
        #   type: string
        # bookIsbn:
        #   type: string
        # bookReleaseDate:
        #   type: string
        # booksBook:
        #   type: string
        # booksRatingScale:
        #   type: string
        # booksRatingValue:
        #   type: string
        # bookTag:
        #   type: string
        # businessContactDataCountryName:
        #   type: string
        # businessContactDataLocality:
        #   type: string
        # businessContactDataPostalCode:
        #   type: string
        # businessContactDataRegion:
        #   type: string
        # businessContactDataStreetAddress:
        #   type: string
        # charset:
        #   type: string
        # customMetaTags:
        #   type: object
        #   additionalProperties:
        #     oneOf:
        #       - type: string
        #       - type: array
        #         items:
        #           type: string
        # dcContributor:
        #   type: string
        # dcCoverage:
        #   type: string
        # dcCreator:
        #   type: string
        # dcDate:
        #   type: string
        # dcDateCreated:
        #   type: string
        # dcDateIssued:
        #   type: string
        # dcDescription:
        #   type: string
        # dcFormatMedia:
        #   type: string
        # dcFormatSize:
        #   type: string
        # dcIdentifier:
        #   type: string
        # dcLanguage:
        #   type: string
        # dcPublisher:
        #   type: string
        # dcRelation:
        #   type: string
        # dcRights:
        #   type: string
        # dcSource:
        #   type: string
        # dcSubject:
        #   type: string
        # dcTitle:
        #   type: string
        # dcType:
        #   type: string
        # error:
        #   type: string
        # errorDetails:
        #   type: object
        favicon:
          type: string
        # fbAppId:
        #   type: string
        # jsonLD:
        #   type: array
        #   items:
        #     type: object
        modifiedTime:
          type: string
        # musicAlbum:
        #   type: string
        # musicAlbumDisc:
        #   type: string
        # musicAlbumTrack:
        #   type: string
        # musicAlbumUrl:
        #   type: string
        # musicCreator:
        #   type: string
        # musicDuration:
        #   type: string
        # musicMusician:
        #   type: string
        # musicPlaylist:
        #   type: string
        # musicRadioStation:
        #   type: string
        # musicReleaseDate:
        #   type: string
        # musicSong:
        #   type: array
        #   items:
        #     $ref: "#/components/schemas/MusicSongObject"
        ogArticleAuthor:
          type: string
        ogArticleExpirationTime:
          type: string
        ogArticleModifiedTime:
          type: string
        ogArticlePublishedTime:
          type: string
        ogArticlePublisher:
          type: string
        ogArticleSection:
          type: string
        ogArticleTag:
          type: string
        ogAudio:
          type: string
        ogAudioSecureURL:
          type: string
        ogAudioType:
          type: string
        ogAudioURL:
          type: string
        ogAvailability:
          type: string
        ogDate:
          type: string
        ogDescription:
          type: string
        ogDeterminer:
          type: string
        ogEpisode:
          type: string
        ogImage:
          type: array
          items:
            $ref: "#/components/schemas/ImageObject"
        ogLocale:
          type: string
        ogLocaleAlternate:
          type: string
        ogLogo:
          type: string
        ogMovie:
          type: string
        ogPriceAmount:
          type: string
        ogPriceCurrency:
          type: string
        ogProductAvailability:
          type: string
        ogProductCondition:
          type: string
        ogProductPriceAmount:
          type: string
        ogProductPriceCurrency:
          type: string
        ogProductRetailerItemId:
          type: string
        ogSiteName:
          type: string
        ogTitle:
          type: string
        ogType:
          type: string
        ogUrl:
          type: string
        ogVideo:
          type: array
          items:
            $ref: "#/components/schemas/VideoObject"
        ogVideoActor:
          type: string
        ogVideoActorId:
          type: string
        ogVideoActorRole:
          type: string
        ogVideoDirector:
          type: string
        ogVideoDuration:
          type: string
        ogVideoOther:
          type: string
        ogVideoReleaseDate:
          type: string
        ogVideoSecureURL:
          type: string
        ogVideoSeries:
          type: string
        ogVideoTag:
          type: string
        ogVideoTvShow:
          type: string
        ogVideoWriter:
          type: string
        ogWebsite:
          type: string
        # placeLocationLatitude:
        #   type: string
        # placeLocationLongitude:
        #   type: string
        # profileFirstName:
        #   type: string
        # profileGender:
        #   type: string
        # profileLastName:
        #   type: string
        # profileUsername:
        #   type: string
        # publishedTime:
        #   type: string
        # releaseDate:
        #   type: string
        # requestUrl:
        #   type: string
        # restaurantContactInfoCountryName:
        #   type: string
        # restaurantContactInfoEmail:
        #   type: string
        # restaurantContactInfoLocality:
        #   type: string
        # restaurantContactInfoPhoneNumber:
        #   type: string
        # restaurantContactInfoPostalCode:
        #   type: string
        # restaurantContactInfoRegion:
        #   type: string
        # restaurantContactInfoStreetAddress:
        #   type: string
        # restaurantContactInfoWebsite:
        #   type: string
        # restaurantMenu:
        #   type: string
        # restaurantRestaurant:
        #   type: string
        # restaurantSection:
        #   type: string
        # restaurantVariationPriceAmount:
        #   type: string
        # restaurantVariationPriceCurrency:
        #   type: string
        # success:
        #   type: boolean
        # twitterAccount:
        #   type: string
        # twitterAppIdGooglePlay:
        #   type: string
        # twitterAppIdiPad:
        #   type: string
        # twitterAppIdiPhone:
        #   type: string
        # twitterAppNameGooglePlay:
        #   type: string
        # twitterAppNameiPad:
        #   type: string
        # twitterAppNameiPhone:
        #   type: string
        # twitterAppUrlGooglePlay:
        #   type: string
        # twitterAppUrliPad:
        #   type: string
        # twitterAppUrliPhone:
        #   type: string
        # twitterCard:
        #   type: string
        # twitterCreator:
        #   type: string
        # twitterCreatorId:
        #   type: string
        # twitterDescription:
        #   type: string
        # twitterImage:
        #   type: array
        #   items:
        #     $ref: "#/components/schemas/TwitterImageObject"
        # twitterPlayer:
        #   type: array
        #   items:
        #     $ref: "#/components/schemas/TwitterPlayerObject"
        # twitterPlayerStreamContentType:
        #   type: string
        # twitterSite:
        #   type: string
        # twitterSiteId:
        #   type: string
        # twitterTitle:
        #   type: string
        # twitterUrl:
        #   type: string
        updatedTime:
          type: string
    OembedData:
      # Adapted from https://github.com/extractus/oembed-extractor/blob/e3b9aff4084118e12b6e98bdf997a78901ea6dfd/index.d.ts#L30-L107
      type: object
      description: Basic data structure of every oembed response see https://oembed.com/
      required:
        - type
        - version
      properties:
        type:
          type: string
          # enum:
          #   - rich
          #   - video
          #   - photo
          #   - link
        version:
          type: [string, "null"]
        title:
          type: [string, "null"]
          description: A text title, describing the resource.
        author_name:
          type: [string, "null"]
          description: The name of the author/owner of the resource.
        author_url:
          type: [string, "null"]
          description: A URL for the author/owner of the resource.
        provider_name:
          type: [string, "null"]
          description: The name of the resource provider.
        provider_url:
          type: [string, "null"]
          description: The url of the resource provider.
        cache_age:
          type: [string, "null"]
          description: The suggested cache lifetime for this resource, in seconds. Consumers may choose to use this value or not.
        thumbnail_url:
          type: [string, "null"]
          description: A URL to a thumbnail image representing the resource. The thumbnail must respect any maxwidth and maxheight parameters. If this parameter is present, thumbnail_width and thumbnail_height must also be present.
        thumbnail_width:
          type: [number, "null"]
          description: The width of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_height must also be present.
        thumbnail_height:
          type: [number, "null"]
          description: The height of the optional thumbnail. If this parameter is present, thumbnail_url and thumbnail_width must also be present.
    OembedLinkData:
      allOf:
        - $ref: "#/components/schemas/OembedData"
        - type: object
          required:
            - type
          properties:
            type:
              type: string
              enum:
                - link
    OembedPhotoData:
      allOf:
        - $ref: "#/components/schemas/OembedData"
        - type: object
          required:
            - type
            - url
            - width
            - height
          properties:
            type:
              type: string
              enum:
                - photo
            url:
              type: [string, "null"]
              description: The source URL of the image. Consumers should be able to insert this URL into an <img> element. Only HTTP and HTTPS URLs are valid.
            width:
              type: [number, "null"]
              description: The width in pixels of the image specified in the url parameter.
            height:
              type: [number, "null"]
              description: The height in pixels of the image specified in the url parameter.
    OembedVideoData:
      allOf:
        - $ref: "#/components/schemas/OembedData"
        - type: object
          required:
            - type
            - html
            - width
            - height
          properties:
            type:
              type: string
              enum:
                - video
            html:
              type: [string, "null"]
              description: The HTML required to embed a video player. The HTML should have no padding or margins. Consumers may wish to load the HTML in an off-domain iframe to avoid XSS vulnerabilities.
            width:
              type: [number, "null"]
              description: The width in pixels required to display the HTML.
            height:
              type: [number, "null"]
              description: The height in pixels required to display the HTML.
    OembedRichData:
      allOf:
        - $ref: "#/components/schemas/OembedData"
        - type: object
          required:
            - type
            - html
            - width
            - height
          properties:
            type:
              type: string
              enum:
                - rich
            html:
              type: [string, "null"]
              description: The HTML required to display the resource. The HTML should have no padding or margins. Consumers may wish to load the HTML in an off-domain iframe to avoid XSS vulnerabilities. The markup should be valid XHTML 1.0 Basic.
            width:
              type: [number, "null"]
              description: The width in pixels required to display the HTML.
            height:
              type: [number, "null"]
              description: The height in pixels required to display the HTML.
    EmbedUrlMetadata:
      type: object
      required:
        - _status
      properties:
        _status:
          type: string
        content_type:
          type: [string, "null"]
        content_length:
          type: [integer, "null"]
        image:
          type: object
          properties:
            height_px:
              type: integer
            width_px:
              type: integer
        video:
          type: object
          properties:
            duration_s:
              type: number
            stream:
              type: array
              items:
                type: object
                properties:
                  codec_name:
                    type: string
                  height_px:
                    type: integer
                  width_px:
                    type: integer
        html:
          allOf:
            - $ref: "#/components/schemas/OgObject"
            - type: object
              properties:
                oembed:
                  oneOf:
                    - $ref: "#/components/schemas/OembedRichData"
                    - $ref: "#/components/schemas/OembedVideoData"
                    - $ref: "#/components/schemas/OembedPhotoData"
                    - $ref: "#/components/schemas/OembedLinkData"
                  discriminator:
                    propertyName: type
                    mapping:
                      rich: "#/components/schemas/OembedRichData"
                      video: "#/components/schemas/OembedVideoData"
                      photo: "#/components/schemas/OembedPhotoData"
                      link: "#/components/schemas/OembedLinkData"
        frame:
          $ref: "#/components/schemas/Frame"

    ChannelMemberRole:
      type: string
      description: The role of a channel member
      enum:
        - member
        - moderator
    CastId:
      type: object
      required:
        - fid
        - hash
      properties:
        fid:
          $ref: "#/components/schemas/Fid"
        hash:
          type: string
    EmbedCast:
      type: object
      required:
        - cast
      properties:
        cast_id:
          $ref: "#/components/schemas/CastId"
          deprecated: true
          description: '[DEPRECATED: Use "cast" key instead]'
        cast:
          $ref: "#/components/schemas/CastEmbedded"
    EmbedCastDeep:
      type: object
      required:
        - cast
      properties:
        cast_id:
          $ref: "#/components/schemas/CastId"
          deprecated: true
          description: '[DEPRECATED: Use "cast" key instead]'
        cast:
          $ref: "#/components/schemas/CastDehydrated"
    Frame:
      discriminator:
        propertyName: "version"
      oneOf:
        - $ref: "#/components/schemas/FrameV1"
        - $ref: "#/components/schemas/FrameV2"
      mapping:
        # 'vNext' for v1, and 'next' for v2. See specs:
        # v1: https://docs.farcaster.xyz/developers/frames/spec#constructing-a-frame
        # v2: https://docs.farcaster.xyz/developers/frames/v2/spec#frame-embed-metatags
        vNext: "#/components/schemas/FrameV1"
        next: "#/components/schemas/FrameV2"
        "1": "#/components/schemas/FrameV2"
        "0.0.0": "#/components/schemas/FrameV2"
        "0.0.1": "#/components/schemas/FrameV2"

    FrameBase:
      description: Frame base object used across all versions
      type: object
      required:
        - version
        - image
        - frames_url
      properties:
        version:
          type: string
          description: Version of the frame, 'next' for v2, 'vNext' for v1
        image:
          type: string
          description: URL of the image
        frames_url:
          type: string
          description: Launch URL of the frame

    FrameV1:
      description: Frame v1 object
      allOf:
        - $ref: "#/components/schemas/FrameBase"
        - type: object
          properties:
            buttons:
              type: array
              items:
                $ref: "#/components/schemas/FrameActionButton"
            post_url:
              type: string
              description: Post URL to take an action on this frame
            title:
              type: string
            image_aspect_ratio:
              type: string
            input:
              type: object
              properties:
                text:
                  type: string
                  description: Input text for the frame
            state:
              type: object
              properties:
                serialized:
                  type: string
                  description: State for the frame in a serialized format
    FrameV2:
      description: Frame v2 object
      allOf:
        - $ref: "#/components/schemas/FrameBase"
        # required properties come from FrameEmbed
        # See: https://docs.farcaster.xyz/developers/frames/v2/spec#frame-embed-metatags
        - type: object
          required:
            - title
            - name
            - icon
          properties:
            manifest:
              $ref: "#/components/schemas/FarcasterManifest"
            author:
              $ref: "#/components/schemas/UserDehydrated"

    SubscriptionTier:
      type: object
      properties:
        id:
          type: integer
          examples:
            - 1
        price:
          type: object
          properties:
            period_duration_seconds:
              type: integer
              examples:
                - 2592000
            tokens_per_period:
              type: string
              examples:
                - "3000000000000000"
            initial_mint_price:
              type: string
              examples:
                - "0"
    SubscribedTo:
      allOf:
        - $ref: "#/components/schemas/Subscription"
        - type: object
          required:
            - expires_at
            - subscribed_at
            - tier
            - creator
          properties:
            expires_at:
              type: string
              format: date-time
              examples:
                - "2023-09-13T22:10:22.000Z"
            subscribed_at:
              type: string
              format: date-time
              examples:
                - "2023-09-13T22:10:22.000Z"
            tier:
              $ref: "#/components/schemas/SubscriptionTier"
            creator:
              $ref: "#/components/schemas/User"
    Subscriber:
      type: object
      required:
        - object
        - user
        - subscribed_to
      properties:
        object:
          type: string
          examples:
            - "subscriber"
        user:
          $ref: "#/components/schemas/User"
        subscribed_to:
          $ref: "#/components/schemas/SubscribedToObject"
    ValidateFrameActionReqBody:
      type: object
      required:
        - message_bytes_in_hex
      properties:
        message_bytes_in_hex:
          type: string
          description: Hexadecimal string of message bytes.
        cast_reaction_context:
          default: true
          type: boolean
          description: Adds viewer_context inside the cast object to indicate whether the interactor reacted to the cast housing the frame.
        follow_context:
          default: false
          type: boolean
          description: Adds viewer_context inside the user (interactor) object to indicate whether the interactor follows or is followed by the cast author.
        signer_context:
          default: false
          type: boolean
          description: Adds context about the app used by the user inside `frame.action`.
        channel_follow_context:
          default: false
          type: boolean
          description: Adds context about the channel that the cast belongs to inside of the cast object.
    SendFrameNotificationsReqBody:
      type: object
      required:
        - target_fids
        - notification
      properties:
        target_fids:
          type: array
          items:
            $ref: "#/components/schemas/Fid"
          maxItems: 100
          description: An array of target FIDs to whom the notifications should be sent. Each FID must be a positive integer, with a maximum of 100 FIDs allowed per call.
          example: [1, 2, 3]
        notification:
          type: object
          required:
            - title
            - body
            - target_url
          properties:
            title:
              type: string
              maxLength: 32
              minLength: 1
              description: The title of the notification. Must be between 1 and 32 characters.
              example: "New Message"
            body:
              type: string
              maxLength: 128
              minLength: 1
              description: The body of the notification. Must be between 1 and 128 characters.
              example: "You have received a new message in your inbox."
            target_url:
              type: string
              format: uri
              maxLength: 256
              description: The target URL to open when the user clicks the notification. Must be a valid URL.
              example: "https://example.com/notifications"
            uuid:
              type: string
              format: uuid
              description: An optional UUID for the notification, used as an idempotency key.
              example: "123e4567-e89b-12d3-a456-426614174000"
    RemoveChannelMemberReqBody:
      type: object
      required:
        - signer_uuid
        - channel_id
        - fid
        - role
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        channel_id:
          $ref: "#/components/schemas/ChannelId"
        fid:
          $ref: "#/components/schemas/Fid"
        role:
          $ref: "#/components/schemas/ChannelMemberRole"
    Subscriptions:
      type: object
      required:
        - object
        - subscriptions_created
      properties:
        object:
          type: string
        subscriptions_created:
          type: array
          items:
            $ref: "#/components/schemas/Subscription"
    Subscription:
      type: object
      required:
        - object
        - contract_address
        - chain
        - metadata
        - owner_address
        - price
        - protocol_version
        - token
      properties:
        object:
          type: string
          examples:
            - "subscription"
        provider_name:
          type: string
          examples:
            - "fabric_stp"
        contract_address:
          type: string
          examples:
            - "0xff63fc310d47ef80961056ac8df0b3f1a9e3ef58"
        chain:
          type: integer
          examples:
            - 8453
        metadata:
          type: object
          properties:
            title:
              type: string
              examples:
                - "/memes channel sub"
            symbol:
              type: string
              examples:
                - "MMS"
            art_url:
              type: string
              examples:
                - "https://storage.withfabric.xyz/loom/403fdc10-95f3-4b25-9d77-5aac7ccb9fd1.jpg"
          required:
            - title
            - symbol
            - art_url
        owner_address:
          type: string
          examples:
            - "0xb6f6dce6000ca88cc936b450cedb16a5c15f157f"
        price:
          type: object
          properties:
            period_duration_seconds:
              type: integer
              examples:
                - 2592000
            tokens_per_period:
              type: string
              examples:
                - "350574998400000"
            initial_mint_price:
              type: string
              examples:
                - "0"
          required:
            - period_duration_seconds
            - tokens_per_period
            - initial_mint_price
        tiers:
          type: array
          items:
            $ref: "#/components/schemas/SubscriptionTier"
        protocol_version:
          type: integer
          examples:
            - 1
        token:
          type: object
          properties:
            symbol:
              type: string
              examples:
                - "ETH"
            address:
              type: [string, "null"]
              examples:
                - null
            decimals:
              type: integer
              examples:
                - 18
            erc20:
              type: boolean
              examples:
                - false
          required:
            - symbol
            - address
            - decimals
            - erc20
    SubscribedToObject:
      type: object
      properties:
        object:
          type: string
          examples:
            - "subscription_dehydrated"
        provider_name:
          type: string
          examples:
            - "fabric_stp"
        contract_address:
          type: string
          examples:
            - "0x325b3e2c19f4900f8f4eb5f6872dc2715e77cbac"
        protocol_version:
          type: integer
          examples:
            - 1
        chain:
          type: integer
          examples:
            - 8453
        expires_at:
          type: string
          format: date-time
          examples:
            - "2023-09-13T22:10:22.000Z"
        subscribed_at:
          type: string
          format: date-time
          examples:
            - "2023-09-13T22:10:22.000Z"
        tier_id:
          type: string
          examples:
            - "0"
      required:
        - object
        - provider_name
    SubscribersResponse:
      type: object
      properties:
        subscribers:
          type: array
          items:
            $ref: "#/components/schemas/Subscriber"
    SubscribedToResponse:
      type: object
      properties:
        subscribed_to:
          type: array
          items:
            $ref: "#/components/schemas/SubscribedTo"
    SubscriptionsResponse:
      type: object
      properties:
        subscriptions_created:
          type: array
          items:
            $ref: "#/components/schemas/Subscriptions"

    FrameSignaturePacket:
      type: object
      description: The Frame Signature Packet (https://docs.farcaster.xyz/developers/frames/spec#frame-signature-packet)
      required:
        - untrustedData
        - trustedData
      properties:
        untrustedData:
          type: object
          description: Untrusted data from the user
          properties:
            fid:
              $ref: "#/components/schemas/Fid"
            url:
              type: string
              description: URL of the frame
            messageHash:
              type: string
              description: Message hash
            timestamp:
              type: string
              description: Timestamp
            network:
              type: integer
              description: Network
            buttonIndex:
              type: integer
              description: Index of the button
            inputText:
              type: string
              description: Input text
            state:
              type: string
              description: State
            transactionId:
              type: string
              description: Transaction ID
            address:
              $ref: "#/components/schemas/Address"
            castId:
              $ref: "#/components/schemas/CastId"
        trustedData:
          type: object
          description: Trusted data from the user
          properties:
            messageBytes:
              type: string
              description: Message bytes
    FrameAction:
      type: object
      required:
        - button
        - frames_url
        - post_url
      properties:
        version:
          type: string
        title:
          type: string
        image:
          type: string
        button:
          $ref: "#/components/schemas/FrameActionButton"
        input:
          $ref: "#/components/schemas/FrameInput"
        state:
          $ref: "#/components/schemas/FrameState"
        transaction:
          $ref: "#/components/schemas/FrameTransaction"
        address:
          $ref: "#/components/schemas/FrameAddress"
        frames_url:
          type: string
          description: URL of the frames
        post_url:
          type: string
          description: URL of the post to get the next frame
    FrameButtonActionType:
      type: string
      description: The action type of a frame button. Action types "mint" & "link" are to be handled on the client side only and so they will produce a no/op for POST /farcaster/frame/action.
      enum:
        - post
        - post_redirect
        - tx
        - link
        - mint
    FrameInput:
      type: object
      properties:
        text:
          type: string
          description: Input text for the frame
          examples:
            - "Draw a purple ringed planet"
    FrameState:
      type: object
      required:
        - serialized
      properties:
        serialized:
          type: string
          description: State for the frame in a serialized format
          examples:
            - "%7B%22counter%22%3A1%7D"
    FrameAddress:
      type: string
      description: The connected wallet address of the interacting user.
    FrameTransaction:
      type: object
      required:
        - hash
      properties:
        hash:
          type: string
          description: Transaction hash
          examples:
            - "0xa80de157a3ab4648db1ecfab7e6355b342215bc549f6e37be9e6da527cc024f7"
    FrameActionButton:
      type: object
      required:
        - index
        - action_type
      properties:
        title:
          type: string
          description: Title of the button
        index:
          type: integer
          description: Index of the button
        action_type:
          $ref: "#/components/schemas/FrameButtonActionType"
        target:
          type: string
          description: Target of the button
        post_url:
          type: string
          description: Used specifically for the tx action type to post a successful transaction hash
    ReactionLike:
      type: object
      required:
        - fid
      properties:
        fid:
          $ref: "#/components/schemas/Fid"
    ReactionRecast:
      type: object
      required:
        - fid
        - fname
      properties:
        fid:
          $ref: "#/components/schemas/Fid"
        fname:
          type: string
    LocationAddress:
      type: object
      required:
        - city
        - country
      properties:
        city:
          type: string
        state:
          type: string
        state_code:
          type: string
        country:
          type: string
        country_code:
          type: string
    Location:
      description: Coordinates and place names for a location
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
        address:
          $ref: "#/components/schemas/LocationAddress"
    User:
      type: object
      required:
        - object
        - fid
        - custody_address
        - username
        - profile
        - follower_count
        - following_count
        - verifications
        - verified_addresses
        - verified_accounts
        - power_badge
      properties:
        object:
          type: string
          enum:
            - user
        fid:
          $ref: "#/components/schemas/Fid"
        username:
          type: string
        display_name:
          type: string
        custody_address:
          $ref: "#/components/schemas/Address"
        pfp_url:
          type: string
          description: The URL of the user's profile picture
        profile:
          type: object
          required:
            - bio
          properties:
            bio:
              type: object
              required:
                - text
                - mentioned_profiles
              properties:
                text:
                  type: string
                mentioned_profiles:
                  type: array
                  items:
                    type: string
                  default: []
            location:
              $ref: "#/components/schemas/Location"
        follower_count:
          type: integer
          format: int32
          description: The number of followers the user has.
        following_count:
          type: integer
          format: int32
          description: The number of users the user is following.
        verifications:
          type: array
          items:
            $ref: "#/components/schemas/Address"
        verified_addresses:
          type: object
          required:
            - eth_addresses
            - sol_addresses
          properties:
            eth_addresses:
              type: array
              description: List of verified Ethereum addresses of the user sorted by oldest to most recent.
              items:
                $ref: "#/components/schemas/Address"
            sol_addresses:
              type: array
              description: List of verified Solana addresses of the user sorted by oldest to most recent.
              items:
                $ref: "#/components/schemas/SolAddress"
        verified_accounts:
          type: array
          description: Verified accounts of the user on other platforms, currently only X is supported.
          items:
            type: object
            properties:
              platform:
                type: string
                enum:
                  - x
                  - github
              username:
                type: string
        power_badge:
          type: boolean
        experimental:
          type: object
          required:
            - neynar_user_score
          properties:
            neynar_user_score:
              type: number
              format: double
              description: Score that represents the probability that the account is not spam.
        viewer_context:
          $ref: "#/components/schemas/UserViewerContext"
    TokenBalance:
      type: object
      description: The token balance associated with a wallet address and a network
      required:
        - object
        - token
        - balance
      properties:
        object:
          type: string
          enum:
            - token_balance
        token:
          type: object
          required:
            - object
            - name
            - symbol
          properties:
            object:
              type: string
              enum:
                - token
            name:
              type: string
              description: The token name e.g. "Ethereum"
            symbol:
              type: string
              description: The token symbol e.g. "ETH"
            address:
              type: string
              description: The contract address of the token (omitted for native token)
            decimals:
              type: integer
              description: The number of decimals the token uses
        balance:
          type: object
          required:
            - in_token
            - in_usdc
          properties:
            in_token:
              type: string
              description: The balance in the token
            in_usdc:
              type: string
              description: The balance in USDC
    Networks:
      type: string
      description: A blockchain network e.g. "base"
      enum:
        - "base"
    AddressBalance:
      type: object
      description: The token balances associated with a wallet address
      required:
        - object
        - verified_address
        - token_balances
      properties:
        object:
          type: string
          enum:
            - address_balance
        verified_address:
          type: object
          required:
            - address
            - network
          properties:
            address:
              type: string
              description: The wallet address
            network:
              $ref: "#/components/schemas/Networks"
        token_balances:
          type: array
          items:
            $ref: "#/components/schemas/TokenBalance"
    BalanceResponse:
      type: object
      properties:
        user_balance:
          type: object
          required:
            - object
            - user
            - address_balances
          properties:
            object:
              type: string
              enum:
                - user_balance
            user:
              $ref: "#/components/schemas/UserDehydrated"
            address_balances:
              type: array
              items:
                $ref: "#/components/schemas/AddressBalance"
    Embed:
      oneOf:
        - $ref: "#/components/schemas/EmbedUrl"
        - $ref: "#/components/schemas/EmbedCast"
    EmbedDeep:
      oneOf:
        - $ref: "#/components/schemas/EmbedUrl"
        - $ref: "#/components/schemas/EmbedCastDeep"
    CastEmbedded:
      # This should just be Cast, but have to duplicate to avoid the circular reference caused by embedded casts,
      # because Readme chokes on them.
      type: object
      required:
        - hash
        - parent_hash
        - parent_url
        - root_parent_url
        - parent_author
        - author
        - text
        - timestamp
        - type
        - embeds
        - channel
      properties:
        hash:
          type: string
        parent_hash:
          type: [string, "null"]
        parent_url:
          type: [string, "null"]
        root_parent_url:
          type: [string, "null"]
        parent_author:
          type: object
          required:
            - fid
          properties:
            fid:
              oneOf:
                - type: "null"
                - $ref: "#/components/schemas/Fid"
        author:
          $ref: "#/components/schemas/UserDehydrated"
        app:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserDehydrated"
        text:
          type: string
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        type:
          $ref: "#/components/schemas/CastNotificationType"
        embeds:
          type: array
          items:
            $ref: "#/components/schemas/EmbedDeep"
        channel:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/DehydratedChannel"
    Cast:
      type: object
      required:
        - hash
        - parent_hash
        - parent_url
        - root_parent_url
        - parent_author
        - author
        - text
        - timestamp
        - embeds
      properties:
        hash:
          type: string
        parent_hash:
          type: [string, "null"]
        parent_url:
          type: [string, "null"]
        root_parent_url:
          type: [string, "null"]
        parent_author:
          type: object
          required:
            - fid
          properties:
            fid:
              oneOf:
                - type: "null"
                - $ref: "#/components/schemas/Fid"
        author:
          $ref: "#/components/schemas/User"
        text:
          type: string
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        embeds:
          type: array
          items:
            $ref: "#/components/schemas/Embed"
        type:
          $ref: "#/components/schemas/CastNotificationType"
    ProfileUrl:
      type: object
      required:
        - pfp
      properties:
        pfp:
          type: object
          required:
            - url
          properties:
            url:
              type: string
    SearchedUser:
      anyOf:
        - $ref: "#/components/schemas/User"
        - $ref: "#/components/schemas/ProfileUrl"
    SignedKeyRequestSponsor:
      type: object
      properties:
        fid:
          $ref: "#/components/schemas/Fid"
          description: FID of the sponsor
        signature:
          type: string
          description: Signature generated by the fid of the sponsor and the signature generated from signKeyRequest for the app.
        sponsored_by_neynar:
          type: boolean
          description: |
            Neynar will sponsor the signer if set to true.
            **Note: ** If sponsor.fid and sponsor.signature are provided along with sponsored_by_neynar set to true, 
            the sponsor.fid and sponsor.signature will be ignored. 
            Neynar will sponsor the signer on behalf of the user. The developer will get charged in compute units.
    RegisterSignerKeyReqBody:
      type: object
      required:
        - signer_uuid
        - signature
        - app_fid
        - deadline
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        signature:
          type: string
          description: Signature generated by the custody address of the app. Signed data includes app_fid, deadline, signer’s public key
        app_fid:
          $ref: "#/components/schemas/Fid"
          description: Application FID
        deadline:
          type: integer
          description: unix timestamp in seconds that controls how long the signed key request is valid for. (24 hours from now is recommended)
        redirect_url:
          type: string
          description: |
            Url to redirect to after the signer is approved. 
            **Note** : This should only be used when requesting a signer from a native mobile application.
        sponsor:
          $ref: "#/components/schemas/SignedKeyRequestSponsor"
    RegisterDeveloperManagedSignedKeyReqBody:
      type: object
      required:
        - public_key
        - signature
        - app_fid
        - deadline
      properties:
        public_key:
          $ref: "#/components/schemas/Ed25519PublicKey"
          description: Public key of the signer. For better security, private/public keys should not be re-used on the same account or across accounts
        signature:
          type: string
          description: Signature generated by the custody address of the app. Signed data includes app_fid, deadline, signer’s public key
          examples:
            - "0x7867e84cb6a64bf6e1954e52884133f1114eb3fd97f63ff55fa76c77c80beb6434eea9d3736b59caa3130d63121177acc752dc8a2561e9edf700642f390f92d11b"
        app_fid:
          $ref: "#/components/schemas/Fid"
          description: Application FID
        deadline:
          type: integer
          description: unix timestamp in seconds that controls how long the signed key request is valid for. (24 hours from now is recommended)
        redirect_url:
          type: string
          description: |
            Url to redirect to after the signer is approved. 
            **Note** : This should only be used when requesting a signer from a native mobile application.
        sponsor:
          $ref: "#/components/schemas/SignedKeyRequestSponsor"
    CastParent:
      type: string
      description: parent_url of the channel the cast is in, or hash of the cast
    PostCastReqBodyEmbedsCastIdProperties:
      type: object
      required:
        - hash
        - fid
      properties:
        hash:
          type: string
        fid:
          $ref: "#/components/schemas/Fid"
    PostCastReqBodyEmbeds:
      type: object
      properties:
        cast_id:
          $ref: "#/components/schemas/PostCastReqBodyEmbedsCastIdProperties"
        castId:
          $ref: "#/components/schemas/PostCastReqBodyEmbedsCastIdProperties"
        url:
          type: string
      oneOf:
        - required: ["cast_id"]
        - required: ["castId"]
        - required: ["url"]
    PostCastReqBody:
      type: object
      required:
        - signer_uuid
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        text:
          type: string
        embeds:
          type: array
          items:
            $ref: "#/components/schemas/PostCastReqBodyEmbeds"
        parent:
          $ref: "#/components/schemas/CastParent"
        channel_id:
          type: string
          description: Channel ID of the channel where the cast is to be posted. e.g. neynar, farcaster, warpcast
          examples:
            - "neynar"
        idem:
          $ref: "#/components/schemas/Idem"
        parent_author_fid:
          $ref: "#/components/schemas/Fid"
    MuteReqBody:
      type: object
      required:
        - fid
        - muted_fid
      properties:
        fid:
          $ref: "#/components/schemas/Fid"
        muted_fid:
          $ref: "#/components/schemas/Fid"
    BlockReqBody:
      type: object
      required:
        - signer_uuid
        - blocked_fid
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        blocked_fid:
          $ref: "#/components/schemas/Fid"
    BanReqBody:
      type: object
      required:
        - fids
      properties:
        fids:
          type: array
          items:
            $ref: "#/components/schemas/Fid"
    ReactionReqBody:
      type: object
      required:
        - signer_uuid
        - reaction_type
        - target
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        reaction_type:
          $ref: "#/components/schemas/ReactionType"
        target:
          type: string
        target_author_fid:
          $ref: "#/components/schemas/Fid"
          description: If the target is a cast hash, this value should indicate the target cast's author's FID (unsigned integer)
        idem:
          $ref: "#/components/schemas/Idem"
    ChannelType:
      type: string
      enum:
        - "id"
        - "parent_url"
    CastEmbedCrawlResponse:
      type: object
      required:
        - metadata
      properties:
        metadata:
          $ref: "#/components/schemas/EmbedUrlMetadata"
    PublishMessageReqBody:
      type: object
    PublishMessageResponse:
      type: object
    DeleteCastReqBody:
      type: object
      required:
        - signer_uuid
        - target_hash
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        target_hash:
          $ref: "#/components/schemas/CastHash"
    FollowReqBody:
      type: object
      required:
        - signer_uuid
        - target_fids
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        target_fids:
          type: array
          items:
            $ref: "#/components/schemas/Fid"
          maxItems: 100
    FrameDeveloperManagedActionReqBody:
      type: object
      required:
        - action
        - signature_packet
      properties:
        cast_hash:
          $ref: "#/components/schemas/CastHash"
        action:
          $ref: "#/components/schemas/FrameAction"
        signature_packet:
          $ref: "#/components/schemas/FrameSignaturePacket"
    FrameActionReqBody:
      type: object
      required:
        - signer_uuid
        - action
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        cast_hash:
          $ref: "#/components/schemas/CastHash"
        action:
          $ref: "#/components/schemas/FrameAction"
    AddVerificationReqBody:
      "x-is-request-body": true
      type: object
      required:
        - signer_uuid
        - address
        - block_hash
        - eth_signature
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        address:
          $ref: "#/components/schemas/Address"
        block_hash:
          type: string
        eth_signature:
          type: string
        verification_type:
          $ref: "#/components/schemas/VerificationType"
        chain_id:
          $ref: "#/components/schemas/VerificationChainId"
    RemoveVerificationReqBody:
      type: object
      required:
        - signer_uuid
        - address
        - block_hash
        - eth_signature
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        address:
          $ref: "#/components/schemas/Address"
        block_hash:
          type: string
    UpdateUserReqBody:
      type: object
      required:
        - signer_uuid
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        bio:
          type: string
        pfp_url:
          type: string
        url:
          type: string
        username:
          type: string
        display_name:
          type: string
        location:
          type: object
          required:
            - latitude
            - longitude
          properties:
            latitude:
              type: number
              format: double
              minimum: -90
              maximum: 90
            longitude:
              type: number
              format: double
              minimum: -180
              maximum: 180
        verified_accounts:
          type: object
          properties:
            x:
              type: string
            github:
              type: string
    CastViewerContext:
      type: object
      description: Adds context on interactions the viewer has made with the cast.
      required:
        - liked
        - recasted
      properties:
        liked:
          description: Indicates if the viewer liked the cast.
          type: boolean
        recasted:
          description: Indicates if the viewer recasted the cast.
          type: boolean
    UserViewerContext:
      type: object
      description: Adds context on the viewer's follow relationship with the user.
      required:
        - following
        - followed_by
        - blocking
        - blocked_by
      properties:
        following:
          description: Indicates if the viewer is following the user.
          type: boolean
        followed_by:
          description: Indicates if the viewer is followed by the user.
          type: boolean
        blocking:
          description: Indicates if the viewer is blocking the user.
          type: boolean
        blocked_by:
          description: Indicates if the viewer is blocked by the user.
          type: boolean
    CastWithInteractionsReactions:
      type: object
      required:
        - likes
        - recasts
        - likes_count
        - recasts_count
      properties:
        likes:
          type: array
          items:
            $ref: "#/components/schemas/ReactionLike"
        recasts:
          type: array
          items:
            $ref: "#/components/schemas/ReactionRecast"
        likes_count:
          type: integer
          format: int32
        recasts_count:
          type: integer
          format: int32
    CastWithInteractionsReplies:
      type: object
      required:
        - count
      properties:
        count:
          type: integer
          format: int32
    ChannelOrDehydratedChannel:
      oneOf:
        - $ref: "#/components/schemas/Channel"
        - $ref: "#/components/schemas/DehydratedChannel"
      discriminator:
        propertyName: object
        mapping:
          channel: "#/components/schemas/Channel"
          dehydrated_channel: "#/components/schemas/DehydratedChannel"
    CastWithInteractions:
      allOf:
        - $ref: "#/components/schemas/Cast"
        - type: object
          required:
            - reactions
            - replies
            - thread_hash
            - mentioned_profiles
            - channel
          properties:
            frames:
              type: array
              items:
                $ref: "#/components/schemas/Frame"
            reactions:
              $ref: "#/components/schemas/CastWithInteractionsReactions"
            replies:
              $ref: "#/components/schemas/CastWithInteractionsReplies"
            thread_hash:
              type: [string, "null"]
            mentioned_profiles:
              type: array
              items:
                $ref: "#/components/schemas/User"
            channel:
              oneOf:
                - $ref: "#/components/schemas/ChannelOrDehydratedChannel"
                - type: "null"
            viewer_context:
              $ref: "#/components/schemas/CastViewerContext"
            author_channel_context:
              $ref: "#/components/schemas/ChannelUserContext"
    CastWithInteractionsAndConversations:
      allOf:
        - $ref: "#/components/schemas/CastWithInteractions"
        - type: object
          required:
            - direct_replies
          properties:
            direct_replies:
              type: array
              items:
                $ref: "#/components/schemas/CastWithInteractionsAndConversationsRef"
              description: "note: This is recursive. It contains the direct replies to the cast and their direct replies up to n reply_depth."
    CastWithInteractionsAndConversationsRef:
      description: Reference to CastWithInteractionsAndConversations to avoid circular reference
      allOf:
        - $ref: "#/components/schemas/CastWithInteractions"
        - type: object
          required:
            - direct_replies
          properties:
            direct_replies:
              type: array
              items:
                type: object
              description: "note: This is recursive. It contains the direct replies to the cast and their direct replies up to n reply_depth."
    Conversation:
      type: object
      required:
        - conversation
      properties:
        conversation:
          type: object
          required:
            - cast
          properties:
            cast:
              $ref: "#/components/schemas/CastWithInteractionsAndConversations"
            chronological_parent_casts:
              type: array
              items:
                $ref: "#/components/schemas/CastWithInteractions"
        next:
          $ref: "#/components/schemas/NextCursor"
    FrameNotificationTokens:
      type: object
      required:
        - notification_tokens
        - next
      properties:
        notification_tokens:
          type: array
          items:
            type: object
            properties:
              object:
                type: string
                enum:
                  - notification_token
              url:
                type: string
              token:
                type: string
              status:
                type: string
                enum:
                  - enabled
                  - disabled
              fid:
                $ref: "#/components/schemas/Fid"
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
        next:
          $ref: "#/components/schemas/NextCursor"
    ConversationSummary:
      type: object
      required:
        - summary
      properties:
        summary:
          type: object
          required:
            - text
            - participants
            - mentioned_profiles
          properties:
            text:
              type: string
              description: Summary generated by an LLM
            participants:
              type: array
              items:
                $ref: "#/components/schemas/User"
              description: Users who casted in a conversation thread
            mentioned_profiles:
              type: array
              items:
                $ref: "#/components/schemas/User"
              description: Users who were mentioned in a conversation thread
    SharedSignerPermission:
      type: string
      enum:
        - WRITE_ALL
        - READ_ONLY
        - NONE
        - PUBLISH_CAST
        - DELETE_CAST
        - PUBLISH_REACTION
        - DELETE_REACTION
        - UPDATE_PROFILE
        - FOLLOW_USER
        - UNFOLLOW_USER
        - FOLLOW_CHANNEL
        - UNFOLLOW_CHANNEL
        - ADD_VERIFICATION
        - REMOVE_VERIFICATION
        - WRITE_FRAME_ACTION
    Signer:
      type: object
      required:
        - signer_uuid
        - public_key
        - status
      properties:
        object:
          type: string
          enum:
            - signer
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        public_key:
          $ref: "#/components/schemas/Ed25519PublicKey"
        status:
          type: string
          enum:
            - generated
            - pending_approval
            - approved
            - revoked
        signer_approval_url:
          type: string
        fid:
          $ref: "#/components/schemas/Fid"
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/SharedSignerPermission"
    DeveloperManagedSigner:
      type: object
      required:
        - public_key
        - status
      properties:
        public_key:
          $ref: "#/components/schemas/Ed25519PublicKey"
        status:
          type: string
          enum:
            - pending_approval
            - approved
            - revoked
        signer_approval_url:
          type: string
        fid:
          $ref: "#/components/schemas/Fid"
    CastResponse:
      type: object
      required:
        - cast
      properties:
        cast:
          $ref: "#/components/schemas/CastWithInteractions"
    ChannelFollowReqBody:
      type: object
      required:
        - signer_uuid
        - channel_id
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        channel_id:
          $ref: "#/components/schemas/ChannelId"
    DehydratedChannel:
      type: object
      required:
        - id
        - name
        - object
      properties:
        id:
          type: string
        name:
          type: string
        object:
          type: string
          enum:
            - channel_dehydrated
        image_url:
          type: string
        viewer_context:
          $ref: "#/components/schemas/ChannelUserContext"
    Channel:
      type: object
      required:
        - id
        - url
        - object
      properties:
        id:
          type: string
        url:
          type: string
        name:
          type: string
        description:
          type: string
        object:
          type: string
          enum:
            - channel
        created_at:
          description: Epoch timestamp in seconds.
          type: number
        follower_count:
          description: Number of followers the channel has.
          type: number
        external_link:
          type: object
          description: Channel's external link.
          properties:
            title:
              type: string
            url:
              type: string
        image_url:
          type: string
        parent_url:
          type: string
          format: uri
        lead:
          $ref: "#/components/schemas/User"
        moderator_fids:
          type: array
          items:
            $ref: "#/components/schemas/Fid"
        member_count:
          type: integer
          format: int32
        moderator:
          $ref: "#/components/schemas/User"
          deprecated: true
          description: Use `lead` instead.
        pinned_cast_hash:
          $ref: "#/components/schemas/CastHash"
          description: Hash of the pinned cast in the channel.
        hosts:
          type: array
          deprecated: true
          items:
            $ref: "#/components/schemas/User"
        viewer_context:
          $ref: "#/components/schemas/ChannelUserContext"
    ChannelUserContext:
      description: Adds context on the viewer's or author's role in the channel.
      type: object
      required:
        - following
      properties:
        following:
          description: Indicates if the user is following the channel.
          type: boolean
        role:
          $ref: "#/components/schemas/ChannelMemberRole"
    ChannelListResponse:
      type: object
      required:
        - channels
      properties:
        channels:
          type: array
          items:
            $ref: "#/components/schemas/Channel"
        next:
          $ref: "#/components/schemas/NextCursor"
    ChannelMemberInvite:
      type: object
      required:
        - channel_id
        - role
        - inviter
        - invited
      properties:
        channel_id:
          $ref: "#/components/schemas/ChannelId"
        role:
          $ref: "#/components/schemas/ChannelMemberRole"
        inviter:
          $ref: "#/components/schemas/User"
        invited:
          $ref: "#/components/schemas/User"
    InviteChannelMemberReqBody:
      type: object
      required:
        - signer_uuid
        - channel_id
        - fid
        - role
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        channel_id:
          $ref: "#/components/schemas/ChannelId"
        fid:
          $ref: "#/components/schemas/Fid"
        role:
          $ref: "#/components/schemas/ChannelMemberRole"
    ChannelMember:
      type: object
      required:
        - object
        - role
        - user
        - channel
      properties:
        object:
          type: string
          enum:
            - member
        role:
          $ref: "#/components/schemas/ChannelMemberRole"
        user:
          oneOf:
            - $ref: "#/components/schemas/User"
            - $ref: "#/components/schemas/UserDehydrated"
        channel:
          oneOf:
            - $ref: "#/components/schemas/Channel"
            - $ref: "#/components/schemas/DehydratedChannel"
    ChannelMemberListResponse:
      type: object
      required:
        - members
        - next
      properties:
        members:
          type: array
          items:
            $ref: "#/components/schemas/ChannelMember"
        next:
          $ref: "#/components/schemas/NextCursor"
    ChannelMemberInviteListResponse:
      type: object
      required:
        - invites
      properties:
        invites:
          type: array
          items:
            $ref: "#/components/schemas/ChannelMemberInvite"
        next:
          $ref: "#/components/schemas/NextCursor"
    ChannelSearchResponse:
      type: object
      required:
        - channels
        - next
      properties:
        channels:
          type: array
          items:
            $ref: "#/components/schemas/Channel"
        next:
          $ref: "#/components/schemas/NextCursor"
    ChannelResponse:
      type: object
      required:
        - channel
      properties:
        channel:
          $ref: "#/components/schemas/Channel"
    ChannelResponseBulk:
      type: object
      required:
        - channels
      properties:
        channels:
          type: array
          items:
            $ref: "#/components/schemas/Channel"
    UserSearchResponse:
      type: object
      required:
        - result
      properties:
        result:
          type: object
          required:
            - users
          properties:
            users:
              type: array
              items:
                $ref: "#/components/schemas/SearchedUser"
            next:
              $ref: "#/components/schemas/NextCursor"
    ChannelActivity:
      type: object
      required:
        - object
        - cast_count_1d
        - cast_count_7d
        - cast_count_30d
        - channel
      properties:
        object:
          type: string
          enum:
            - channel_activity
        cast_count_1d:
          type: string
        cast_count_7d:
          type: string
        cast_count_30d:
          type: string
        channel:
          $ref: "#/components/schemas/Channel"
    TrendingChannelResponse:
      type: object
      required:
        - channels
        - next
      properties:
        channels:
          type: array
          items:
            $ref: "#/components/schemas/ChannelActivity"
        next:
          $ref: "#/components/schemas/NextCursor"
    BulkCastsResponse:
      type: object
      required:
        - casts
      properties:
        casts:
          type: array
          items:
            $ref: "#/components/schemas/CastWithInteractions"
    CastsResponse:
      type: object
      required:
        - result
      properties:
        result:
          type: object
          required:
            - casts
          properties:
            casts:
              type: array
              items:
                $ref: "#/components/schemas/CastWithInteractions"
    CastsSearchResponse:
      type: object
      required:
        - result
      properties:
        result:
          type: object
          required:
            - casts
            - next
          properties:
            casts:
              type: array
              items:
                $ref: "#/components/schemas/CastWithInteractions"
            next:
              $ref: "#/components/schemas/NextCursor"
    CastsMetrics:
      type: object
      required:
        - start
        - resolution_in_seconds
        - cast_count
      properties:
        start:
          type: string
          format: date-time
        resolution_in_seconds:
          type: integer
          format: int32
        cast_count:
          type: integer
          format: int32
    CastsMetricsResponse:
      type: object
      required:
        - metrics
      properties:
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/CastsMetrics"
    FeedResponse:
      type: object
      required:
        - casts
        - next
      properties:
        casts:
          type: array
          items:
            $ref: "#/components/schemas/CastWithInteractions"
        next:
          $ref: "#/components/schemas/NextCursor"
    PostCastResponse:
      type: object
      required:
        - success
        - cast
      properties:
        success:
          type: boolean
        cast:
          type: object
          required:
            - hash
            - author
            - text
          properties:
            hash:
              $ref: "#/components/schemas/CastHash"
            author:
              type: object
              required:
                - fid
              properties:
                fid:
                  $ref: "#/components/schemas/Fid"
            text:
              type: string
    OperationResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
    FollowResponse:
      type: object
      required:
        - success
        - target_fid
        - hash
      properties:
        success:
          type: boolean
        target_fid:
          $ref: "#/components/schemas/Fid"
        hash:
          type: string
    BulkFollowResponse:
      type: object
      required:
        - success
        - details
      properties:
        success:
          type: boolean
        details:
          type: array
          items:
            $ref: "#/components/schemas/FollowResponse"
    NotificationsResponse:
      type: object
      required:
        - unseen_notifications_count
        - notifications
        - next
      properties:
        unseen_notifications_count:
          type: integer
          format: int32
        notifications:
          type: array
          items:
            $ref: "#/components/schemas/Notification"
        next:
          $ref: "#/components/schemas/NextCursor"
    Notification:
      type: object
      required:
        - object
        - most_recent_timestamp
        - type
        - seen
      properties:
        object:
          type: string
        most_recent_timestamp:
          type: string
          format: date-time
        type:
          type: string
          enum:
            - follows
            - recasts
            - likes
            - mention
            - reply
            - quote
        seen:
          type: boolean
        follows:
          type: array
          items:
            $ref: "#/components/schemas/Follow"
        cast:
          $ref: "#/components/schemas/CastWithInteractions"
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/ReactionWithUserInfo"
        count:
          type: integer
          format: int32
          description: The number of notifications of this(follows, likes, recast) type bundled in a single notification.
    Follow:
      type: object
      required:
        - object
        - user
      properties:
        object:
          type: string
          enum:
            - follow
        user:
          $ref: "#/components/schemas/User"
    CastDehydrated:
      type: object
      required:
        - object
        - hash
      properties:
        object:
          type: string
          enum:
            - cast_dehydrated
        hash:
          type: string
        author:
          $ref: "#/components/schemas/UserDehydrated"
        app:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserDehydrated"
    ReactionWithUserInfo:
      type: object
      required:
        - object
        - cast
        - user
      properties:
        object:
          type: string
          enum:
            - likes
            - recasts
        cast:
          $ref: "#/components/schemas/CastDehydrated"
        user:
          $ref: "#/components/schemas/User"
    ReactionForCast:
      type: object
      required:
        - reaction_type
        - reaction_timestamp
        - object
        - user
      properties:
        reaction_type:
          type: string
          enum:
            - like
            - recast
        reaction_timestamp:
          type: string
          format: date-time
        object:
          type: string
          enum:
            - likes
            - recasts
        user:
          $ref: "#/components/schemas/User"
    ReactionWithCastInfo:
      type: object
      required:
        - reaction_type
        - cast
        - reaction_timestamp
        - object
        - user
      properties:
        reaction_type:
          type: string
          enum:
            - like
            - recast
        cast:
          $ref: "#/components/schemas/CastWithInteractions"
        reaction_timestamp:
          type: string
          format: date-time
        object:
          type: string
          enum:
            - likes
            - recasts
        user:
          $ref: "#/components/schemas/UserDehydrated"
    RelevantFollowersResponse:
      type: object
      required:
        - top_relevant_followers_hydrated
        - all_relevant_followers_dehydrated
      properties:
        top_relevant_followers_hydrated:
          type: array
          items:
            $ref: "#/components/schemas/HydratedFollower"
        all_relevant_followers_dehydrated:
          type: array
          items:
            $ref: "#/components/schemas/DehydratedFollower"
    HydratedFollower:
      type: object
      properties:
        object:
          type: string
          enum:
            - follow
        user:
          $ref: "#/components/schemas/User"
    DehydratedFollower:
      type: object
      properties:
        object:
          type: string
          enum:
            - follow
        user:
          $ref: "#/components/schemas/UserDehydrated"
    UserDehydrated:
      type: object
      required:
        - object
        - fid
      properties:
        object:
          type: string
          enum:
            - user_dehydrated
        fid:
          $ref: "#/components/schemas/Fid"
        username:
          type: string
        display_name:
          type: string
        pfp_url:
          type: string
    UserResponse:
      type: object
      required:
        - user
      properties:
        user:
          $ref: "#/components/schemas/User"
    ReactionsResponse:
      type: object
      required:
        - reactions
        - next
      properties:
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/ReactionWithCastInfo"
        next:
          $ref: "#/components/schemas/NextCursor"
    ReactionsCastResponse:
      type: object
      required:
        - reactions
        - next
      properties:
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/ReactionForCast"
        next:
          $ref: "#/components/schemas/NextCursor"
    RelevantFungibleOwnersResponse:
      type: object
      required:
        - top_relevant_fungible_owners_hydrated
        - all_relevant_fungible_owners_dehydrated
      properties:
        top_relevant_owners_hydrated:
          type: array
          items:
            $ref: "#/components/schemas/User"
        all_relevant_owners_dehydrated:
          type: array
          items:
            $ref: "#/components/schemas/User"
    StorageAllocationsResponse:
      type: object
      properties:
        total_active_units:
          type: integer
          examples:
            - 13
        allocations:
          type: array
          items:
            $ref: "#/components/schemas/StorageAllocation"
    StorageAllocation:
      type: object
      properties:
        object:
          type: string
          examples:
            - "storage_allocation"
        user:
          $ref: "#/components/schemas/UserDehydrated"
        units:
          type: integer
          examples:
            - 10
        expiry:
          type: string
          format: date-time
          examples:
            - "2024-10-08T22:03:49.000Z"
        timestamp:
          type: string
          format: date-time
          examples:
            - "2023-10-09T22:03:49.000Z"
    StorageUsageResponse:
      type: object
      properties:
        object:
          type: string
          examples:
            - "storage_usage"
        user:
          $ref: "#/components/schemas/UserDehydrated"
        casts:
          $ref: "#/components/schemas/StorageObject"
        reactions:
          $ref: "#/components/schemas/StorageObject"
        links:
          $ref: "#/components/schemas/StorageObject"
        verified_addresses:
          $ref: "#/components/schemas/StorageObject"
        username_proofs:
          $ref: "#/components/schemas/StorageObject"
        signers:
          $ref: "#/components/schemas/StorageObject"
        total_active_units:
          type: integer
          examples:
            - 2
    StorageObject:
      type: object
      properties:
        object:
          type: string
          examples:
            - "storage"
        used:
          type: integer
          examples:
            - 3659
        capacity:
          type: integer
          examples:
            - 10000
    BulkUsersResponse:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
    UsersResponse:
      type: object
      required:
        - users
        - next
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
        next:
          $ref: "#/components/schemas/NextCursor"
    FollowersResponse:
      type: object
      required:
        - users
        - next
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/HydratedFollower"
        next:
          $ref: "#/components/schemas/NextCursor"
    BulkUsersByAddressResponse:
      type: object
      additionalProperties:
        type: array
        items:
          $ref: "#/components/schemas/User"
    FeedType:
      type: string
      enum:
        - following
        - filter
    FilterType:
      type: string
      description: The type of filter to apply to the feed.
      enum:
        - fids
        - parent_url
        - channel_id
        - embed_url
        - embed_types
        - global_trending
    EmbedType:
      type: string
      description: The content type of the embedded file
      enum:
        - text
        - image
        - video
        - audio
        - text/html
        - text/plain
        - image/jpeg
        - image/png
        - image/gif
        - image/webp
        - image/svg+xml
        - image/heif
        - video/mp4
        - video/quicktime
        - audio/mpeg
        - application/pdf
        - application/json
        - application/x-mpegurl
    FnameAvailabilityResponse:
      type: object
      required:
        - available
      properties:
        available:
          type: boolean
    NeynarFrame:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the frame.
        name:
          type: string
          description: Name of the frame.
        link:
          type: string
          format: uri
          description: Generated link for the frame's first page.
        pages:
          type: array
          items:
            $ref: "#/components/schemas/NeynarFramePage"
        valid:
          type: boolean
          description: Indicates if the frame is valid.
      required:
        - uuid
        - name
        - pages
        - link
    NeynarFramePage:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the page.
        version:
          type: string
          default: "vNext"
          examples:
            - "vNext"
          description: The version of the page schema.
        title:
          type: string
          examples:
            - "Welcome to Neynar"
          description: The title of the page.
        image:
          $ref: "#/components/schemas/NeynarPageImage"
        buttons:
          type: array
          items:
            $ref: "#/components/schemas/NeynarPageButton"
        input:
          $ref: "#/components/schemas/NeynarPageInput"
      required:
        - uuid
        - title
        - version
        - image
    NeynarPageImage:
      type: object
      properties:
        url:
          type: string
          format: uri
          examples:
            - "https://i.imgur.com/qo2AzBf.jpeg"
          description: The URL of the page's image.
        aspect_ratio:
          type: string
          description: The aspect ratio of the image.
          enum:
            - "1.91:1"
            - "1:1"
      required:
        - url
        - aspect_ratio
    NeynarPageButton:
      type: object
      properties:
        title:
          type: string
          description: The title of the button.
        index:
          type: integer
          description: The index of the button, first button should have index 1 and so on.
        action_type:
          type: string
          description: The type of action that the button performs.
          enum:
            - "post"
            - "post_redirect"
            - "mint"
            - "link"
        next_page:
          oneOf:
            - $ref: "#/components/schemas/NeynarNextFramePage"
            - $ref: "#/components/schemas/NeynarNextFramePageRedirect"
            - $ref: "#/components/schemas/NeynarNextFramePageMintUrl"
      required:
        - title
        - index
        - action_type
    NeynarPageInput:
      type: object
      properties:
        text:
          type: object
          properties:
            enabled:
              type: boolean
              default: false
              description: Indicates if text input is enabled.
            placeholder:
              type: string
              description: The placeholder text for the input.
          required:
            - enabled
    NeynarNextFramePage:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: The UUID of the next page.
      required:
        - uuid
    NeynarNextFramePageRedirect:
      type: object
      properties:
        redirect_url:
          type: string
          format: uri
          description: The URL to redirect to.
      required:
        - redirect_url
    NeynarNextFramePageMintUrl:
      type: object
      properties:
        mint_url:
          type: string
          description: The URL for minting, specific to the mint action.
      required:
        - mint_url
    NeynarFrameCreationReqBody:
      type: object
      properties:
        name:
          type: string
          description: The name of the frame.
        pages:
          type: array
          items:
            $ref: "#/components/schemas/NeynarFramePage"
      required:
        - name
        - pages
    NeynarFrameUpdateReqBody:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: The UUID of the frame to update.
        name:
          type: string
          description: The name of the frame.
        pages:
          type: array
          items:
            $ref: "#/components/schemas/NeynarFramePage"
      required:
        - uuid
        - pages
    ValidatedFrameAction:
      type: object
      required:
        - cast
        - interactor
        - timestamp
        - tapped_button
        - url
        - object
        - state
      properties:
        object:
          type: string
          enum:
            - validated_frame_action
        url:
          type: string
          format: uri
        interactor:
          $ref: "#/components/schemas/User"
        tapped_button:
          type: object
          required:
            - index
          properties:
            index:
              type: integer
        input:
          $ref: "#/components/schemas/FrameInput"
        state:
          $ref: "#/components/schemas/FrameState"
        cast:
          $ref: "#/components/schemas/CastWithInteractions"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        signer:
          type: object
          properties:
            client:
              $ref: "#/components/schemas/User"
        transaction:
          $ref: "#/components/schemas/FrameTransaction"
        address:
          $ref: "#/components/schemas/FrameAddress"
    FrameCatalogResponse:
      type: object
      required:
        - frames
        - next
      properties:
        frames:
          type: array
          items:
            $ref: "#/components/schemas/FrameV2"
        next:
          $ref: "#/components/schemas/NextCursor"
    SendFrameNotificationsResponse:
      type: object
      required:
        - notification_deliveries
      properties:
        notification_deliveries:
          type: array
          items:
            $ref: "#/components/schemas/NotificationDelivery"
    NotificationDelivery:
      type: object
      required:
        - object
        - fid
        - status
      properties:
        object:
          type: string
          enum:
            - notification_delivery
        fid:
          $ref: "#/components/schemas/Fid"
        status:
          type: string
          enum:
            - success
            - token_not_found
            - token_disabled
            - failed
    ValidateFrameActionResponse:
      type: object
      required:
        - valid
        - action
      properties:
        valid:
          type: boolean
          examples:
            - true
        action:
          $ref: "#/components/schemas/ValidatedFrameAction"
    DeleteFrameReqBody:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
    UserFIDResponse:
      type: object
      required:
        - fid
      properties:
        fid:
          type: integer
    RegisterUserReqBody:
      type: object
      required:
        - signature
        - fid
        - requested_user_custody_address
        - deadline
      properties:
        signature:
          type: string
        fid:
          type: number
        requested_user_custody_address:
          type: string
        deadline:
          type: number
        fname:
          type: string
        metadata:
          type: object
          properties:
            bio:
              type: string
            pfp_url:
              type: string
            url:
              type: string
            username:
              type: string
            display_name:
              type: string
            verified_accounts:
              type: object
              properties:
                x:
                  type: string
                github:
                  type: string
            location:
              type: object
              required:
                - latitude
                - longitude
              properties:
                latitude:
                  type: number
                  format: double
                  minimum: -90
                  maximum: 90
                longitude:
                  type: number
                  format: double
                  minimum: -180
                  maximum: 180
    RegisterUserResponse:
      type: object
      required:
        - success
        - message
        - signer
      properties:
        success:
          type: boolean
          enum:
            - true
        message:
          type: string
        signer:
          $ref: "#/components/schemas/Signer"
        user:
          $ref: "#/components/schemas/User"
    MuteRecord:
      type: object
      required:
        - object
        - muted
        - timestamp
        - muted_at
      properties:
        object:
          type: string
          enum:
            - mute
        muted:
          $ref: "#/components/schemas/User"
        muted_at:
          $ref: "#/components/schemas/Timestamp"
    MuteListResponse:
      type: object
      required:
        - mutes
        - next
      properties:
        mutes:
          type: array
          items:
            $ref: "#/components/schemas/MuteRecord"
        next:
          $ref: "#/components/schemas/NextCursor"
    MuteResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          examples:
            - true
        message:
          type: string
    BlockRecord:
      type: object
      required:
        - object
        - timestamp
        - blocked_at
      properties:
        object:
          type: string
          enum:
            - block
        blocked:
          $ref: "#/components/schemas/User"
        blocker:
          $ref: "#/components/schemas/User"
        blocked_at:
          $ref: "#/components/schemas/Timestamp"
    BlockListResponse:
      type: object
      required:
        - blocks
        - next
      properties:
        blocks:
          type: array
          items:
            $ref: "#/components/schemas/BlockRecord"
        next:
          $ref: "#/components/schemas/NextCursor"
    BanRecord:
      type: object
      required:
        - object
        - timestamp
        - banned_at
      properties:
        object:
          type: string
          enum:
            - ban
        banned:
          $ref: "#/components/schemas/User"
        banned_at:
          $ref: "#/components/schemas/Timestamp"
    BanListResponse:
      type: object
      required:
        - bans
        - next
      properties:
        bans:
          type: array
          items:
            $ref: "#/components/schemas/BanRecord"
        next:
          $ref: "#/components/schemas/NextCursor"
    BanResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          examples:
            - true
        message:
          type: [string, "null"]
    UsersActiveChannelsResponse:
      type: object
      properties:
        channels:
          type: array
          items:
            $ref: "#/components/schemas/Channel"
        next:
          $ref: "#/components/schemas/NextCursor"
    VerificationType:
      type: integer
      format: int32
      default: 0
      enum: [0, 1]
      description: Type of verification. 0 = EOA, 1 = contract
    VerificationChainId:
      type: integer
      format: int32
      default: 0
      enum: [0, 1, 10]
      description: Chain ID for farcaster verifications. 0 for EOA verifications, 1 or 10 for contract verifications
    DeleteFrameResponse:
      type: object
      properties:
        success:
          type: boolean
        uuid:
          type: string
          format: uuid
    Webhook:
      type: object
      required:
        - object
        - webhook_id
        - developer_uuid
        - target_url
        - title
        - secrets
        - description
        - http_timeout
        - rate_limit
        - active
        - rate_limit_duration
        - created_at
        - updated_at
        - deleted_at
      properties:
        object:
          type: string
          enum:
            - webhook
        webhook_id:
          type: string
        developer_uuid:
          type: string
        target_url:
          type: string
        title:
          type: string
        secrets:
          type: array
          items:
            $ref: "#/components/schemas/WebhookSecret"
        description:
          type: string
        http_timeout:
          type: string
        rate_limit:
          type: integer
        active:
          type: boolean
        rate_limit_duration:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
        subscription:
          $ref: "#/components/schemas/WebhookSubscription"
    WebhookSecret:
      type: object
      required:
        - uid
        - value
        - expires_at
        - created_at
        - updated_at
        - deleted_at
      properties:
        uid:
          type: string
        value:
          type: string
        expires_at:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        deleted_at:
          type: string
    WebhookSubscription:
      type: object
      required:
        - object
        - subscription_id
        - filters
        - created_at
        - updated_at
      properties:
        object:
          type: string
          enum:
            - webhook_subscription
        subscription_id:
          type: string
        filters:
          $ref: "#/components/schemas/WebhookSubscriptionFilters"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    WebhookSubscriptionFiltersFollow:
      type: object
      properties:
        fids:
          type: array
          items:
            type: integer
        target_fids:
          type: array
          items:
            type: integer
    WebhookSubscriptionFiltersReaction:
      type: object
      properties:
        fids:
          type: array
          items:
            type: integer
        target_fids:
          type: array
          items:
            type: integer
    WebhookSubscriptionFiltersCast:
      type: object
      properties:
        exclude_author_fids:
          description: |
            Exclude casts that matches these authors.
            **Note:**
            This is applied as an AND operation against rest of the filters.
            Rest of the filters are bundled as an OR operation.
          type: array
          items:
            type: integer
        author_fids:
          type: array
          items:
            type: integer
        mentioned_fids:
          type: array
          items:
            type: integer
        parent_urls:
          type: array
          items:
            type: string
        root_parent_urls:
          type: array
          items:
            type: string
        parent_hashes:
          type: array
          items:
            type: string
        parent_author_fids:
          type: array
          items:
            type: integer
        text:
          type: string
          description: |
            Regex pattern to match the text key of the cast.
            **Note:** 
            1) Regex must be parsed by Go's RE2 engine (Test your expression here: https://www.lddgo.net/en/string/golangregex)
            2) Use backslashes to escape special characters.
            For example: (?i)\\$degen should be written as (?i)\\\\$degen
          examples:
            - "(?i)\\$degen"
        embeds:
          type: string
          description: |
            Regex pattern to match the embeded_url (key embeds) of the cast.
            **Note:** 
            1) Regex must be parsed by Go's RE2 engine (Test your expression here: https://www.lddgo.net/en/string/golangregex)
            2) Use backslashes to escape special characters.
            For example: \\b(farcaster|neynar)\\b should be written as \\\\b(farcaster|neynar)\\\\b
          examples:
            - "\b(farcaster|neynar)\b"
    WebhookSubscriptionFilters:
      type: object
      properties:
        cast.created:
          $ref: "#/components/schemas/WebhookSubscriptionFiltersCast"
        cast.deleted:
          $ref: "#/components/schemas/WebhookSubscriptionFiltersCast"
        user.created:
          type: object
        user.updated:
          type: object
          properties:
            fids:
              type: array
              items:
                type: integer
        follow.created:
          $ref: "#/components/schemas/WebhookSubscriptionFiltersFollow"
        follow.deleted:
          $ref: "#/components/schemas/WebhookSubscriptionFiltersFollow"
        reaction.created:
          $ref: "#/components/schemas/WebhookSubscriptionFiltersReaction"
        reaction.deleted:
          $ref: "#/components/schemas/WebhookSubscriptionFiltersReaction"
    WebhookPostReqBody:
      type: object
      required:
        - name
        - url
      properties:
        name:
          type: string
        url:
          type: string
        subscription:
          $ref: "#/components/schemas/WebhookSubscriptionFilters"
    WebhookPutReqBody:
      type: object
      required:
        - name
        - url
        - webhook_id
      properties:
        name:
          type: string
        url:
          type: string
        subscription:
          $ref: "#/components/schemas/WebhookSubscriptionFilters"
        webhook_id:
          type: string
    WebhookPatchReqBody:
      type: object
      required:
        - webhook_id
        - active
      properties:
        webhook_id:
          type: string
        active:
          type: string
          enum:
            - "true"
            - "false"
    WebhookDeleteReqBody:
      type: object
      required:
        - webhook_id
      properties:
        webhook_id:
          type: string
    WebhookResponse:
      type: object
      properties:
        message:
          type: string
        success:
          type: boolean
        webhook:
          $ref: "#/components/schemas/Webhook"
    WebhookListResponse:
      type: object
      required:
        - webhooks
      properties:
        webhooks:
          type: array
          items:
            $ref: "#/components/schemas/Webhook"
    # WebhookSubscriptionResponse:
    #   type: object
    #   required:
    #   - subscription
    #   properties:
    #     subscription:
    #       $ref: '#/components/schemas/WebhookSubscription'
    # WebhookUpdateSubscriptionReqBody:
    #   type: object
    #   required:
    #     - webhook_id
    #     - subscription
    #   properties:
    #     webhook_id:
    #       type: string
    #     subscription:
    #       $ref: '#/components/schemas/WebhookSubscriptionFilters'
    FrameType:
      type: string
      enum:
        - uuid
        - url
      description: Type of identifier (either 'uuid' or 'url')
    FrameValidateListResponse:
      type: object
      required:
        - frames
      properties:
        frames:
          type: array
          items:
            type: string
            format: uri
    FrameValidateAnalyticsInteractors:
      type: object
      required:
        - interactors
      properties:
        interactors:
          type: array
          items:
            type: object
            required:
              - fid
              - username
              - interaction_count
            properties:
              fid:
                $ref: "#/components/schemas/Fid"
              username:
                type: string
              interaction_count:
                type: number
    FrameValidateAnalyticsTotalInteractors:
      type: object
      required:
        - total_interactors
      properties:
        total_interactors:
          type: number
    FrameValidateAnalyticsInteractionsPerCast:
      type: object
      required:
        - interactions_per_cast
      properties:
        interactions_per_cast:
          type: array
          items:
            type: object
            required:
              - start
              - stop
              - time
              - interaction_count
              - cast_url
            properties:
              start:
                type: string
                format: date-time
              stop:
                type: string
                format: date-time
              time:
                type: string
                format: date-time
              interaction_count:
                type: number
              cast_url:
                type: string
                format: uri
    FrameValidateAnalyticsInputText:
      type: object
      required:
        - input_texts
      properties:
        input_texts:
          type: array
          items:
            type: object
            required:
              - fid
              - username
              - input_text
            properties:
              fid:
                $ref: "#/components/schemas/Fid"
              username:
                type: string
              input_text:
                type: string
    FrameValidateAnalyticsResponse:
      oneOf:
        - $ref: "#/components/schemas/FrameValidateAnalyticsInteractors"
        - $ref: "#/components/schemas/FrameValidateAnalyticsTotalInteractors"
        - $ref: "#/components/schemas/FrameValidateAnalyticsInteractionsPerCast"
        - $ref: "#/components/schemas/FrameValidateAnalyticsInputText"
    ValidateFrameAnalyticsType:
      type: string
      enum:
        - total-interactors
        - interactors
        - interactions-per-cast
        - input-text
    AuthorizationUrlResponse:
      type: object
      required:
        - authorization_url
      properties:
        authorization_url:
          type: string
          format: uri
    AuthorizationUrlResponseType:
      type: string
      enum:
        - code
    BulkUserAddressType:
      type: string
      enum:
        - custody_address
        - verified_address
    RespondChannelInviteReqBody:
      type: object
      required:
        - signer_uuid
        - channel_id
        - role
        - accept
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        channel_id:
          $ref: "#/components/schemas/ChannelId"
        role:
          $ref: "#/components/schemas/ChannelMemberRole"
        accept:
          type: boolean
          description: Accept or reject the invite
    Idem:
      type: string
      description: |
        An Idempotency key is a unique identifier for the request.
        **Note:** 
        1) This is used to prevent duplicate requests. Use the same idem key on retry attempts.
        2) This should be a unique identifier for each request.
        3) Recommended format is a 16-character string generated by the developer at the time of making this request.
    BuyStorageReqBody:
      type: object
      required:
        - fid
      properties:
        fid:
          type: integer
          minimum: 1
          examples:
            - 1
        units:
          type: integer
          description: |
            Number of storage units to buy.
            A storage unit lets you store 5000 casts, 2500 reactions and 2500 links.
          minimum: 1
          examples:
            - 1
        idem:
          $ref: "#/components/schemas/Idem"
    ZodError:
      type: object
      required:
        - message
        - code
        - errors
      properties:
        message:
          type: string
          examples:
            - "Invalid query parameters"
        code:
          type: string
          examples:
            - "InvalidField"
        errors:
          type: array
          items:
            type: object
            required:
              - code
              - expected
              - received
              - path
              - message
            properties:
              code:
                type: string
              expected:
                type: string
              received:
                type: string
              path:
                type: array
                items:
                  type: string
              message:
                type: string
    CastComposerType:
      type: string
      enum:
        - top
        - featured
    CastComposerActionsListResponse:
      type: object
      properties:
        actions:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: The name of the action.
              icon:
                type: string
                description: The icon representing the action.
              description:
                type: string
                description: A brief description of the action.
              about_url:
                type: string
                format: uri
                description: URL to learn more about the action.
              image_url:
                type: string
                format: uri
                description: URL of the action's image.
              action_url:
                type: string
                format: uri
                description: URL to perform the action.
              action:
                type: object
                properties:
                  action_type:
                    type: string
                    description: Type of the action (e.g., post).
                  post_url:
                    type: string
                    format: uri
                    description: URL to post the action.
              octicon:
                type: string
                description: Icon name for the action.
              added_count:
                type: integer
                description: Number of times the action has been added.
              app_name:
                type: string
                description: Name of the application providing the action.
              author_fid:
                type: integer
                description: Author's Farcaster ID.
              category:
                type: string
                description: Category of the action.
              object:
                type: string
                description: Object type, which is "composer_action".
        next:
          $ref: "#/components/schemas/NextCursor"
    SubscriptionStatus:
      type: object
      properties:
        object:
          type: string
          enum: ["subscribed_to_dehydrated"]
        status:
          type: boolean
        expires_at:
          type: [integer, "null"]
          format: int64
        subscribed_at:
          type: [integer, "null"]
          format: int64
        tier:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/SubscriptionTier"
      required:
        - object
        - status
        - expires_at
        - subscribed_at
        - tier
    Fids:
      type: array
      items:
        $ref: "#/components/schemas/Fid"
      description: List of FIDs
    UserPowerLiteResponse:
      type: object
      required:
        - result
      properties:
        result:
          type: object
          required:
            - fids
          properties:
            fids:
              $ref: "#/components/schemas/Fids"
    NotificationType:
      type: string
      enum:
        - follows
        - recasts
        - likes
        - mentions
        - replies
        - quotes
    MarkNotificationsAsSeenReqBody:
      type: object
      required:
        - signer_uuid
      properties:
        signer_uuid:
          type: string
          description: |
            The UUID of the signer. Signer should have atleast one write permission
        type:
          $ref: "#/components/schemas/NotificationType"
    FarcasterActionReqBody:
      type: object
      required:
        - signer_uuid
        - base_url
        - action
      properties:
        signer_uuid:
          type: string
          format: uuid
          description: |
            The signer_uuid of the user on behalf of whom the action is being performed.
          examples:
            - "123e4567-e89b-12d3-a456-426614174000"
        base_url:
          type: string
          format: uri
          description: |
            The base URL of the app on which the action is being performed.
          examples:
            - "https://example.com"
        action:
          type: object
          required:
            - type
          properties:
            type:
              type: string
              description: |
                The type of action being performed.
              examples:
                - "create.user"
            payload:
              description: |
                The payload of the action being performed.
              type: object
    ValidateFrameAggregateWindow:
      type: string
      enum:
        - "10s"
        - "1m"
        - "2m"
        - "5m"
        - "10m"
        - "20m"
        - "30m"
        - "2h"
        - "12h"
        - "1d"
        - "7d"
    SubscriptionCheckResponse:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/SubscriptionStatus"
      examples:
        - summary: Active subscription example
          value:
            "0xedd3783e8c7c52b80cfbd026a63c207edc9cbee7":
              object: "subscribed_to_dehydrated"
              status: true
              expires_at: 1748890497000
              subscribed_at: 1719256819704
              tier:
                id: 1
                price:
                  period_duration_seconds: 2592000
                  tokens_per_period: "3499999997472000"
                  initial_mint_price: "0"
        - summary: Inactive subscription example
          value:
            "0x5a927ac639636e534b678e81768ca19e2c6280b7":
              object: "subscribed_to_dehydrated"
              status: false
              expires_at: null
              subscribed_at: null
              tier: null
    DeployFungibleReqBody:
      type: object
      properties:
        owner:
          type: string
          description: Ethereum address of the one who is creating the token
        symbol:
          type: string
          description: Symbol/Ticker for the token
        name:
          type: string
          description: Name of the token
        metadata[media]:
          oneOf:
            - type: string
              format: binary
              description: |
                Media file associated with the token. 
                Supported formats are image/jpeg, image/gif and image/png
            - type: string
              description: URI of the media file
        metadata[description]:
          type: string
          description: Description of the token
        metadata[nsfw]:
          type: string
          enum:
            - "true"
            - "false"
          description: |
            Indicates if the token is NSFW (Not Safe For Work).
        metadata[website_link]:
          type: string
          description: Website link related to the token
        metadata[twitter]:
          type: string
          description: Twitter profile link
        metadata[discord]:
          type: string
          description: Discord server link
        metadata[telegram]:
          type: string
          description: Telegram link
        network:
          type: string
          default: base
          enum:
            - base
          description: Network/Chain name
        factory:
          type: string
          default: wow
          enum:
            - wow
            - clanker
          description: |
            Factory name
            - wow -> [wow.xyz](https://wow.xyz)
            - clanker -> [clanker.world](https://www.clanker.world)
      required:
        - owner
        - symbol
        - name
    DeployFungibleResponse:
      type: object
      properties:
        contract:
          type: object
          properties:
            fungible:
              type: object
              properties:
                object:
                  type: string
                  example: fungible
                name:
                  type: string
                  description: Name of the token
                symbol:
                  type: string
                  description: Symbol of the token
                media:
                  type: string
                  description: URI of the token media
                address:
                  type: string
                  description: Contract address of the token
                decimals:
                  type: integer
                  description: Decimal precision of the token
    NonceResponse:
      type: object
      required:
        - nonce
      properties:
        nonce:
          type: string
          description: The nonce value to sign the message
          examples: ["neynarbMi9zSDuOC1GFqixR"]
    SignerListResponse:
      type: object
      required:
        - signers
      properties:
        signers:
          type: array
          items:
            $ref: "#/components/schemas/Signer"

  responses:
    401Response:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    404Response:
      description: "Resource not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    400Response:
      description: "Bad Request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    400ZodResponse:
      description: "Bad Request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ZodError"
    403Response:
      description: "Forbidden"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    409Response:
      description: "Conflict"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ConflictErrorRes"
    500Response:
      description: "Server Error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"

tags:
  - name: User
    description: Operations related to user
    externalDocs:
      description: More info about user
      url: https://docs.neynar.com/reference/user-operations
  - name: Signer
    description: Operations related to signer
    externalDocs:
      description: More info about signer
      url: https://docs.neynar.com/reference/signer-operations
  - name: Cast
    description: Operations related to cast
    externalDocs:
      description: More info about cast
      url: https://docs.neynar.com/reference/cast-operations
  - name: Feed
    description: Operations related to feed
    externalDocs:
      description: More info about feed
      url: https://docs.neynar.com/reference/feed-operations
  - name: Reaction
    description: Operations related to reaction
    externalDocs:
      description: More info about reaction
      url: https://docs.neynar.com/reference/reaction-operations
  - name: Notifications
    description: Operations related to notifications
    externalDocs:
      description: More info about notifications
      url: https://docs.neynar.com/reference/notifications-operations
  - name: Channel
    description: Operations related to channels
    externalDocs:
      description: More info about channels
      url: https://docs.neynar.com/reference/channel-operations
  - name: Follows
    description: Operations related to follows
    externalDocs:
      description: More info about follows
      url: https://docs.neynar.com/reference/follows-operations
  - name: Storage
    description: Operations related to storage
    externalDocs:
      description: More info about storage
      url: https://docs.neynar.com/reference/storage-operations
  - name: Frame
    description: Operations related to frames
  - name: fname
    description: Operations related to fname
  - name: Webhook
    description: Operations related to a webhook
  - name: Action
    description: Securely communicate and perform actions on behalf of users across different apps
    externalDocs:
      description: More info about farcaster actions
      url: https://docs.neynar.com/docs/farcaster-actions-spec
  - name: Subscribers
    description: Operations related to a subscriptions
  - name: Mute
    description: Operations related to a mute
  - name: Block
    description: Operations related to a block
  - name: Ban
    description: Operations related to a ban
  - name: Onchain
    description: Operations related to onchain data
  - name: Login
    description: Operations related to login
  - name: Metrics
    description: Operations related to retrieving metrics

paths:
  /farcaster/user/fid:
    get:
      tags:
        - User
      summary: Fetch fresh FID
      description: Fetches FID to [assign it to new user](https://docs.neynar.com/reference/register-account)
      externalDocs:
        url: https://docs.neynar.com/reference/get-fresh-account-fid
      operationId: get-fresh-account-FID
      parameters:
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFIDResponse"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/signer/developer_managed:
    get:
      tags:
        - Signer
      summary: Status by public key
      description: Fetches the status of a developer managed signer by public key
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-developer-managed-signer
      operationId: lookup-developer-managed-signer
      parameters:
        - name: public_key
          required: true
          in: query
          example: "0x3daa8f99c5f760688a3c9f95716ed93dee5ed5d7722d776b7c4deac957755f22"
          schema:
            $ref: "#/components/schemas/Ed25519PublicKey"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeveloperManagedSigner"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/signer/developer_managed/signed_key:
    post:
      tags:
        - Signer
      summary: Register Signed Key
      description: Registers an signed key and returns the developer managed signer status with an approval url.
      externalDocs:
        url: https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer
      operationId: register-signed-key-for-developer-managed-signer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterDeveloperManagedSignedKeyReqBody"
            example:
              app_fid: 18949
              deadline: 1693627665
              public_key: "0x3daa8f99c5f760688a3c9f95716ed93dee5ed5d7722d776b7c4deac957755f22"
              signature: "0xe5d95c391e165dac8efea373efe301d3ea823e1f41713f8943713cbe2850566672e33ff3e17e19abb89703f650a2597f62b4fda0ce28ca15d59eb6d4e971ee531b"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeveloperManagedSigner"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/signer:
    get:
      tags:
        - Signer
      summary: Status
      description: Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-signer
      operationId: lookup-signer
      parameters:
        - name: signer_uuid
          required: true
          in: query
          example: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
          schema:
            $ref: "#/components/schemas/SignerUUID"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signer"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
    post:
      tags:
        - Signer
      summary: Create signer
      description: |
        Creates a signer and returns the signer status. \
        **Note**: While tesing please reuse the signer, it costs money to approve a signer.
      externalDocs:
        url: https://docs.neynar.com/reference/create-signer
      operationId: create-signer
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signer"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/signer/list:
    get:
      tags:
        - Signer
      summary: List signers
      description: Fetches a list of signers for a custody address
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-signers
      operationId: fetch-signers
      parameters:
        - name: message
          in: query
          required: true
          description: |
            A Sign-In with Ethereum (SIWE) message that the user's Ethereum wallet signs. This message
            includes details such as the domain, address, statement, URI, nonce, and other relevant
            information following the EIP-4361 standard. It should be structured and URL-encoded.

            example: 
            example.com wants you to sign in with your Ethereum account:\\n0x23A...F232\\n\\nSign in to continue.\\n\\nURI: example.com\\nVersion: 1\\nChain ID: 1\\nNonce: xyz123\\nIssued At: 2021-09-01T14:52:07Z
          schema:
            type: string
            example: "example.com%20wants%20you%20to%20sign%20in%20with%20your%20Ethereum%20account%3A%5Cn0x23A...F232%5Cn%5CnSign%20in%20to%20continue.%5Cn%5CnURI%3A%20example.com%5CnVersion%3A%201%5CnChain%20ID%3A%201%5CnNonce%3A%20xyz123%5CnIssued%20At%3A%202021-09-01T14%3A52%3A07Z"
        - name: signature
          in: query
          description: |
            The digital signature produced by signing the provided SIWE message with the user's
            Ethereum private key. This signature is used to verify the authenticity of the message and
            the identity of the signer.
          required: true
          schema:
            type: string
            example: "0x25f8...1cf"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignerListResponse"
        "401":
          $ref: "#/components/responses/401Response"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/signer/signed_key:
    post:
      tags:
        - Signer
      summary: Register Signed Key
      description: Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
      externalDocs:
        url: https://docs.neynar.com/reference/register-signed-key
      operationId: register-signed-key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterSignerKeyReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              app_fid: 18949
              deadline: 1693627665
              signature: "0xe5d95c391e165dac8efea373efe301d3ea823e1f41713f8943713cbe2850566672e33ff3e17e19abb89703f650a2597f62b4fda0ce28ca15d59eb6d4e971ee531b"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signer"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/user/search:
    get:
      tags:
        - User
      summary: Search for Usernames
      description: Search for Usernames
      externalDocs:
        url: https://docs.neynar.com/reference/search-user
      operationId: search-user
      parameters:
        - name: q
          in: query
          required: true
          example: r
          schema:
            type: string
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return search results that respects this user's mutes and blocks and includes `viewer_context`.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: limit
          in: query
          required: false
          description: Number of users to fetch
          example: 10
          schema:
            type: integer
            format: int32
            default: 5
            minimum: 1
            maximum: 10
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSearchResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/user/bulk:
    get:
      tags:
        - User
      summary: By FIDs
      description: Fetches information about multiple users based on FIDs
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-bulk-users
      operationId: fetch-bulk-users
      parameters:
        - name: fids
          description: Comma separated list of FIDs, up to 100 at a time
          in: query
          required: true
          example: 194, 191, 6131
          schema:
            type: string
            x-comma-separated: true
            x-accept-as: integer
        - name: viewer_fid
          in: query
          required: false
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkUsersResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/user/power:
    get:
      tags:
        - User
      summary: Power users
      description: Fetches power users based on Warpcast power badges. Information is updated once a day.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-power-users
      operationId: fetch-power-users
      parameters:
        - name: viewer_fid
          in: query
          required: false
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: limit
          in: query
          required: false
          description: Number of power users to fetch
          example: 10
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 100
            minimum: 1
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/user/power_lite:
    get:
      tags:
        - User
      summary: Power user FIDs
      description: Fetches power users and respond in a backwards compatible format to Warpcast's deprecated power badge endpoint.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-power-users-lite
      operationId: fetch-power-users-lite
      parameters:
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPowerLiteResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/user/bulk-by-address:
    get:
      tags:
        - User
      summary: By Eth or Sol addresses
      description:
        Fetches all users based on multiple Ethereum or Solana addresses.


        Each farcaster user has a custody Ethereum address and optionally verified Ethereum or Solana addresses. This endpoint returns all users that have any of the given addresses as their custody or verified Ethereum or Solana addresses.


        A custody address can be associated with only 1 farcaster user at a time but a verified address can be associated with multiple users.

        You can pass in Ethereum and Solana addresses, comma separated, in the same request. The response will contain users associated with the given addresses.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-bulk-users-by-eth-or-sol-address
      operationId: fetch-bulk-users-by-eth-or-sol-address
      parameters:
        - name: addresses
          description: Comma separated list of Ethereum addresses, up to 350 at a time
          in: query
          required: true
          example: "0xa6a8736f18f383f1cc2d938576933e5ea7df01a1,0x7cac817861e5c3384753403fb6c0c556c204b1ce"
          schema:
            type: string
            x-comma-separated: true
        - name: address_types
          in: query
          description: >
            Customize which address types the request should search for. This is a comma-separated string that can include the following values: 'custody_address' and 'verified_address'. By default api returns both. To select multiple types, use a comma-separated list of these values.
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/BulkUserAddressType"
          explode: false
        - name: viewer_fid
          in: query
          required: false
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkUsersByAddressResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
  /farcaster/user/channels:
    get:
      tags:
        - Channel
      summary: Following
      description: Returns a list of all channels with their details that a FID follows.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-channels
      operationId: fetch-user-channels
      parameters:
        - name: fid
          in: query
          required: true
          description: The FID of the user.
          schema:
            $ref: "#/components/schemas/Fid"
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          example: 30
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelListResponse"
  /farcaster/user/memberships/list:
    get:
      tags:
        - Channel
      summary: Member of
      description: Returns a list of all channels with their details that an FID is a member of. Data may have a delay of up to 1 hour.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-channel-memberships
      operationId: fetch-user-channel-memberships
      parameters:
        - name: fid
          in: query
          required: true
          description: The FID of the user.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          example: 30
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelMemberListResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/user:
    patch:
      tags:
        - User
      summary: Update user profile
      description: |
        Update user profile \
        (In order to update user's profile `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/update-user
      operationId: update-user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              bio: "Experimenting on Farcaster"
              pfp_url: "https://i.imgur.com/keIWEYM.jpg"
              username: "dan"
              display_name: "Dan Romero"
              latitude: 37.7749
              longitude: -122.4194
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
    post:
      tags:
        - User
      summary: Register new account
      description: |
        Register account on farcaster.

        **Note:** This API must be called within 10 minutes of the fetch FID API call (i.e., /v2/farcaster/user/fid). Otherwise, Neynar will assign this FID to another available user.
      externalDocs:
        url: https://docs.neynar.com/reference/register-account
      operationId: register-account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserReqBody"
            example:
              signature: "0xe0cd4da80fb30d59e3ce5a10768c35043bc31487362977cf0a3acf15338a730f4aa329568055c943d777dd81fcb60292f15fc0bcf644da1943b6aa0b3ea9bdcf1b"
              fid: 321518
              requested_user_custody_address: "0x2c57e688154C082955cF205F4A335E852D3e25f1"
              deadline: 1707371935
              fname: "desired_fname"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterUserResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "401":
          $ref: "#/components/responses/401Response"
        "404":
          $ref: "#/components/responses/404Response"
        "409":
          $ref: "#/components/responses/409Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/message:
    post:
      tags:
        - Signer
      summary: Publish message
      description: Publish a message to farcaster.
        The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
      externalDocs:
        url: https://docs.neynar.com/reference/publish-message-to-farcaster
      operationId: publish-message-to-farcaster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublishMessageReqBody"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublishMessageResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/cast/embed/crawl:
    get:
      tags:
        - Cast
      summary: Embedded URL metadata
      description: Crawls the given URL and returns metadata useful when embedding the URL in a cast.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-embedded-url-metadata
      operationId: fetch-embedded-url-metadata
      parameters:
        - name: url
          in: query
          schema:
            type: string
          description: URL to crawl metadata of
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CastEmbedCrawlResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/cast:
    get:
      tags:
        - Cast
      summary: By hash or URL
      description: Gets information about an individual cast by passing in a Warpcast web URL or cast hash
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url
      operationId: lookup-cast-by-hash-or-warpcast-url
      parameters:
        - name: identifier
          required: true
          in: query
          example: "https://warpcast.com/rish/0x9288c1"
          description: Cast identifier (Its either a url or a hash)
          schema:
            type: string
        - name: type
          required: true
          in: query
          example: url
          schema:
            $ref: "#/components/schemas/CastParamType"
        - name: viewer_fid
          in: query
          required: false
          description: adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CastResponse"
        "400":
          $ref: "#/components/responses/400Response"
    post:
      tags:
        - Cast
      summary: Post a cast
      description: |
        Posts a cast or cast reply. Works with mentions and embeds.  
        (In order to post a cast `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/publish-cast
      operationId: publish-cast
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCastReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              text: "Writing to @farcaster via the @neynar APIs 🪐"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostCastResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
    delete:
      tags:
        - Cast
      summary: Delete a cast
      description: |
        Delete an existing cast. \
        (In order to delete a cast `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/delete-cast
      operationId: delete-cast
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteCastReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              target_hash: "0x1ea99cbed57e4020314ba3fadd7c692d2de34d5f"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/casts:
    get:
      tags:
        - Cast
      summary: Bulk fetch casts
      description: Fetch multiple casts using their respective hashes.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-bulk-casts
      operationId: fetch-bulk-casts
      parameters:
        - name: casts
          in: query
          required: true
          description: "Hashes of the cast to be retrived (Comma separated, no spaces)"
          example: "0xa896906a5e397b4fec247c3ee0e9e4d4990b8004,0x27ff810f7f718afd8c40be236411f017982e0994"
          schema:
            type: string
            x-comma-separated: true
        - name: viewer_fid
          in: query
          required: false
          description: adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: sort_type
          in: query
          required: false
          description: "Optional parameter to sort the casts based on different criteria"
          schema:
            type: string
            enum:
              - trending
              - likes
              - recasts
              - replies
              - recent
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CastsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/cast/search:
    get:
      tags:
        - Cast
      summary: Search for casts
      description: Search for casts based on a query string, with optional AND filters
      externalDocs:
        url: https://docs.neynar.com/reference/search-casts
      operationId: search-casts
      parameters:
        - name: q
          in: query
          required: true
          description: "Query string to search for casts. Include 'before:YYYY-MM-DD' or 'after:YYYY-MM-DD' to search for casts before or after a specific date."
          example: "star wars"
          schema:
            type: string
        - name: author_fid
          in: query
          required: false
          description: "Fid of the user whose casts you want to search"
          example: 194
          schema:
            $ref: "#/components/schemas/Fid"
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return search results that respects this user's mutes and blocks and includes `viewer_context`.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: parent_url
          in: query
          required: false
          schema:
            type: string
          description: "Parent URL of the casts you want to search"
        - name: channel_id
          in: query
          required: false
          schema:
            type: string
          description: "Channel ID of the casts you want to search"
        - name: priority_mode
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: When true, only returns search results from power badge users and users that the viewer follows (if viewer_fid is provided).
        - name: limit
          in: query
          required: false
          example: 25
          description: Number of results to fetch
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 100
            minimum: 1
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CastsSearchResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/cast/metrics:
    get:
      tags:
        - Metrics
      summary: Metrics for casts
      description: Fetches metrics casts matching a query
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-cast-metrics
      operationId: fetch-cast-metrics
      parameters:
        - name: q
          in: query
          required: true
          description: "Query string to search for casts"
          example: "star wars"
          schema:
            type: string
        - name: interval
          in: query
          required: false
          description: "Interval of time for which to fetch metrics. Choices are `1d`, `7d`, `30d`"
          schema:
            type: string
            enum:
              - 1d
              - 7d
              - 30d
        - name: author_fid
          in: query
          required: false
          description: "Fid of the user whose casts you want to search"
          example: 194
          schema:
            $ref: "#/components/schemas/Fid"
        - name: channel_id
          in: query
          required: false
          schema:
            type: string
          description: "Channel ID of the casts you want to search"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CastsMetricsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/cast/conversation:
    get:
      tags:
        - Cast
      summary: Conversation for a cast
      description: Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-cast-conversation
      operationId: lookup-cast-conversation
      parameters:
        - name: identifier
          required: true
          in: query
          example: "https://warpcast.com/rish/0x9288c1"
          description: Cast identifier (Its either a url or a hash)
          schema:
            type: string
        - name: type
          required: true
          in: query
          example: url
          schema:
            $ref: "#/components/schemas/CastParamType"
        - name: reply_depth
          in: query
          required: false
          description: "The depth of replies in the conversation that will be returned (default 2)"
          schema:
            $ref: "#/components/schemas/ReplyDepth"
        - name: include_chronological_parent_casts
          in: query
          required: false
          description: "Include all parent casts in chronological order"
          schema:
            type: boolean
            default: false
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return a conversation that respects this user's mutes and blocks and includes `viewer_context`.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: sort_type
          in: query
          required: false
          description: Sort type for the ordering of descendants. Default is `chron`
          schema:
            $ref: "#/components/schemas/CastConversationSortType"
        - name: fold
          in: query
          required: false
          description: Show conversation above or below the fold. Lower quality responses are hidden below the fold. Not passing in a value shows the full conversation without any folding.
          schema:
            type: string
            enum:
              - above
              - below
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          example: 30
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 50
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/cast/conversation/summary:
    get:
      tags:
        - Cast
      summary: Conversation summary for a cast
      description: >
        Generates a summary of all casts related to a conversation surrounding
        a cast by passing in a cast hash or Warpcast URL. 
        Summary is generated by an LLM and is intended to be passed as a context to AI agents.
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-cast-conversation-summary
      operationId: lookup-cast-conversation-summary
      parameters:
        - name: identifier
          required: true
          in: query
          example: "0x9288c1e862aa72bd69d0e383a28b9a76b63cbdb4"
          description: Cast identifier (Its either a url or a hash)
          schema:
            type: string
        - name: limit
          in: query
          description: Number of casts to consider in a summary up to a point of target cast
          required: false
          example: 50
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 50
          x-is-limit-param: true
        - name: prompt
          required: false
          in: query
          example: be unreasonably dramatic
          description: Additional prompt used to generate a summary
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConversationSummary"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed:
    get:
      summary: By filters
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-feed
      operationId: fetch-feed
      tags:
        - Feed
      description: Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
      parameters:
        - name: feed_type
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/FeedType"
            default: following
          example: filter
          description: Defaults to following (requires FID or address). If set to filter (requires filter_type)
        - name: filter_type
          in: query
          schema:
            $ref: "#/components/schemas/FilterType"
          example: fids
          description: Used when feed_type=filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id)
        - name: fid
          in: query
          schema:
            $ref: "#/components/schemas/Fid"
          description: (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
        - name: fids
          in: query
          schema:
            type: string
          example: 3,2,194
          description: Used when filter_type=FIDs . Create a feed based on a list of FIDs. Max array size is 100. Requires feed_type and filter_type.
        - name: parent_url
          in: query
          schema:
            type: string
          description: Used when filter_type=parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
        - name: channel_id
          in: query
          schema:
            type: string
          description: Used when filter_type=channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type.
        - name: members_only
          in: query
          description: Used when filter_type=channel_id. Only include casts from members of the channel. True by default.
          schema:
            type: boolean
            default: true
        - name: embed_url
          in: query
          schema:
            type: string
          description: Used when filter_type=embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
        - name: embed_types
          in: query
          schema:
            type: array
            items:
              $ref: "#/components/schemas/EmbedType"
          explode: false
          description: Used when filter_type=embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type
        - name: with_recasts
          in: query
          description: Include recasts in the response, true by default
          schema:
            type: boolean
            default: true
        - name: limit
          in: query
          description: Number of results to fetch
          example: 30
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed/following:
    get:
      summary: Following
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-following-feed
      operationId: fetch-user-following-feed
      tags:
        - Feed
      description: Fetch feed based on who a user is following
      parameters:
        - name: fid
          in: query
          required: true
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
          description: FID of user whose feed you want to create
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: with_recasts
          in: query
          description: Include recasts in the response, true by default
          schema:
            type: boolean
            default: true
        - name: limit
          in: query
          description: Number of results to fetch
          example: 30
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed/for_you:
    get:
      summary: For you
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-feed-for-you
      operationId: fetch-feed-for-you
      tags:
        - Feed
      description: Fetch a personalized For You feed for a user
      parameters:
        - name: fid
          in: query
          required: true
          example: 194
          schema:
            $ref: "#/components/schemas/Fid"
          description: FID of user whose feed you want to create
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: provider
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/ForYouProvider"
        - name: limit
          in: query
          required: false
          description: Number of results to fetch
          example: 30
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 50
          x-is-limit-param: true
        - name: cursor
          in: query
          required: false
          description: Pagination cursor.
          schema:
            type: string
        - name: provider_metadata
          in: query
          schema:
            type: string
          description: |
            provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ZodError"
                  - $ref: "#/components/schemas/ErrorRes"
  /farcaster/user/subscriptions_created:
    get:
      tags:
        - Subscribers
      summary: Subscriptions created by FID
      description: Fetch created subscriptions for a given FID's.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-subscriptions-for-fid
      operationId: fetch-subscriptions-for-fid
      parameters:
        - name: fid
          in: query
          required: true
          example: 528
          schema:
            default: 528
            $ref: "#/components/schemas/Fid"
        - name: subscription_provider
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/SubscriptionProvider"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/user/subscribed_to:
    get:
      tags:
        - Subscribers
      summary: Subscribed to
      description: Fetch what FIDs and contracts a FID is subscribed to.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-subscribed-to-for-fid
      operationId: fetch-subscribed-to-for-fid
      parameters:
        - name: fid
          in: query
          required: true
          example: 3206
          schema:
            default: 3206
            $ref: "#/components/schemas/Fid"
        - name: viewer_fid
          in: query
          required: false
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: subscription_provider
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/SubscriptionProvider"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscribedToResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/user/subscribers:
    get:
      tags:
        - Subscribers
      summary: Subscribers of a user
      description: Fetch subscribers for a given FID's contracts. Doesn't return addresses that don't have an FID.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-subscribers-for-fid
      operationId: fetch-subscribers-for-fid
      parameters:
        - name: fid
          in: query
          required: true
          example: 3206
          schema:
            default: 3206
            $ref: "#/components/schemas/Fid"
        - name: viewer_fid
          in: query
          required: false
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: subscription_provider
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/SubscriptionProviders"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscribersResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed/channels:
    get:
      summary: By channel IDs
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-feed-by-channel-ids
      operationId: fetch-feed-by-channel-ids
      tags:
        - Feed
      description: Fetch feed based on channel IDs
      parameters:
        - name: channel_ids
          in: query
          required: true
          example: neynar,farcaster
          schema:
            type: string
            x-comma-separated: true
          description: Comma separated list of up to 10 channel IDs e.g. neynar,farcaster
        - name: with_recasts
          in: query
          description: Include recasts in the response, true by default
          schema:
            type: boolean
            default: true
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: with_replies
          in: query
          description: Include replies in the response, false by default
          schema:
            type: boolean
            default: false
        - name: members_only
          in: query
          description: Only include casts from members of the channel. True by default.
          schema:
            type: boolean
            default: true
        - name: fids
          in: query
          description: Comma separated list of FIDs to filter the feed by, up to 10 at a time
          required: false
          schema:
            type: string
            x-comma-separated: true
            x-accept-as: integer
        - name: limit
          in: query
          description: Number of results to fetch
          example: 30
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
        - name: should_moderate
          in: query
          description: If true, only casts that have been liked by the moderator (if one exists) will be returned.
          deprecated: true
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed/parent_urls:
    get:
      summary: By parent URLs
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-feed-by-parent-urls
      operationId: fetch-feed-by-parent-urls
      tags:
        - Feed
      description: Fetch feed based on parent URLs
      parameters:
        - name: parent_urls
          in: query
          required: true
          example: "chain://eip155:1/erc721:0xd4498134211baad5846ce70ce04e7c4da78931cc"
          schema:
            type: string
            x-comma-separated: true
          description: Comma separated list of parent_urls
        - name: with_recasts
          in: query
          description: Include recasts in the response, true by default
          schema:
            type: boolean
            default: true
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: with_replies
          in: query
          description: Include replies in the response, false by default
          schema:
            type: boolean
            default: false
        - name: limit
          in: query
          description: Number of results to fetch
          example: 30
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed/frames:
    get:
      summary: Casts with Frames
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-frames-only-feed
      operationId: fetch-frames-only-feed
      tags:
        - Feed
      description: Fetch feed of casts with Frames, reverse chronological order
      parameters:
        - name: limit
          in: query
          description: Number of results to fetch
          example: 30
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed/trending:
    get:
      summary: Trending feeds
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-trending-feed
      operationId: fetch-trending-feed
      tags:
        - Feed
      description: Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
      parameters:
        - name: limit
          in: query
          description: Number of results to fetch
          example: 10
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 10
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor
          schema:
            type: string
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: time_window
          in: query
          description: Time window for trending casts (7d window for channel feeds only)
          schema:
            type: string
            enum:
              - 1h
              - 6h
              - 12h
              - 24h
              - 7d
            default: 24h
        - name: channel_id
          in: query
          description: Channel ID to filter trending casts. Less active channels might have no casts in the time window selected.
          schema:
            type: string
          example: neynar
        - name: provider
          in: query
          description: The provider of the trending casts feed.
          schema:
            $ref: "#/components/schemas/FeedTrendingProvider"
          example: neynar
        - name: provider_metadata
          in: query
          schema:
            type: string
          description: |
            provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ZodError"
                  - $ref: "#/components/schemas/ErrorRes"
        "404":
          $ref: "#/components/responses/404Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/feed/user/popular:
    get:
      summary: 10 most popular casts
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-popular-casts-by-user
      operationId: fetch-popular-casts-by-user
      tags:
        - Feed
      description: Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
      parameters:
        - name: fid
          in: query
          required: true
          example: 194
          schema:
            $ref: "#/components/schemas/Fid"
          description: FID of user whose feed you want to create
        - name: viewer_fid
          in: query
          required: false
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkCastsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed/user/replies_and_recasts:
    get:
      summary: Replies and recasts
      description: Fetch recent replies and recasts for a given user FID; sorted by most recent first
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user
      operationId: fetch-replies-and-recasts-for-user
      tags:
        - Feed
      parameters:
        - name: fid
          in: query
          required: true
          example: 194
          schema:
            $ref: "#/components/schemas/Fid"
          description: FID of user whose replies and recasts you want to fetch
        - name: filter
          in: query
          required: false
          example: replies
          schema:
            type: string
            default: all
            enum:
              - replies
              - recasts
              - all
          description: filter to fetch only replies or recasts
        - name: limit
          in: query
          description: Number of results to fetch
          example: 30
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 50
            example: 25
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return a feed that respects this user's mutes and blocks and includes `viewer_context`.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed/user/casts:
    get:
      summary: Chronologically
      description: Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-casts-for-user
      operationId: fetch-casts-for-user
      tags:
        - Feed
      parameters:
        - name: fid
          in: query
          required: true
          example: 194
          schema:
            $ref: "#/components/schemas/Fid"
          description: FID of user whose recent casts you want to fetch
        - name: viewer_fid
          in: query
          required: false
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
          description: FID of the user viewing the feed
        - name: limit
          in: query
          required: false
          description: Number of results to fetch
          example: 30
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 150
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor
          schema:
            type: string
        - name: include_replies
          in: query
          required: false
          description: Include reply casts by the author in the response, true by default
          schema:
            type: boolean
            default: true
        - name: parent_url
          in: query
          required: false
          schema:
            type: string
          description: Parent URL to filter the feed; mutually exclusive with channel_id
        - name: channel_id
          in: query
          required: false
          schema:
            type: string
          description: Channel ID to filter the feed; mutually exclusive with parent_url
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/frame:
    get:
      tags:
        - Frame
      summary: Frame by UUID or URL
      description: Fetch a frame either by UUID or Neynar URL
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-neynar-frame
      operationId: lookup-neynar-frame
      parameters:
        - name: type
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/FrameType"
        - name: uuid
          in: query
          schema:
            type: string
            format: uuid
          description: UUID of the frame to fetch
        - name: url
          in: query
          schema:
            type: string
          description: URL of the Neynar frame to fetch
      responses:
        "200":
          description: A frame object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NeynarFrame"
        "404":
          $ref: "#/components/responses/404Response"
    post:
      tags:
        - Frame
      summary: Create frame
      description: Create a new frame with a list of pages.
      externalDocs:
        url: https://docs.neynar.com/reference/publish-neynar-frame
      operationId: publish-neynar-frame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NeynarFrameCreationReqBody"
      responses:
        "200":
          description: Frame created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NeynarFrame"
        "400":
          $ref: "#/components/responses/400Response"
    put:
      tags:
        - Frame
      summary: Update frame
      description: Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
      externalDocs:
        url: https://docs.neynar.com/reference/update-neynar-frame
      operationId: update-neynar-frame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NeynarFrameUpdateReqBody"
      responses:
        "200":
          description: Frame updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NeynarFrame"
        "404":
          $ref: "#/components/responses/404Response"
        "400":
          $ref: "#/components/responses/400Response"
    delete:
      tags:
        - Frame
      summary: Delete frame
      description: Delete an existing frame, if it was made by the developer (identified by API key)
      externalDocs:
        url: https://docs.neynar.com/reference/delete-neynar-frame
      operationId: delete-neynar-frame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteFrameReqBody"
      responses:
        "200":
          description: Frame deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteFrameResponse"
        "404":
          $ref: "#/components/responses/404Response"

  /farcaster/frame/catalog:
    get:
      tags:
        - Frame
      summary: Frames Catalog
      description: A curated list of featured frames
      operationId: fetch-frame-catalog
      parameters:
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrameCatalogResponse"

  /farcaster/frame/list:
    get:
      tags:
        - Frame
      summary: List of frames
      description: Fetch a list of frames made by the developer (identified by API key)
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-neynar-frames
      operationId: fetch-neynar-frames
      responses:
        "200":
          description: A list of frames
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NeynarFrame"
        "404":
          $ref: "#/components/responses/404Response"
  /farcaster/frame/crawl:
    get:
      tags:
        - Frame
      summary: Meta tags from URL
      description: Fetches the frame meta tags from the URL
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url
      operationId: fetch-frame-meta-tags-from-url
      parameters:
        - name: url
          in: query
          required: true
          schema:
            type: string
            format: uri
          example: https://frames.neynar.com/f/862277df/ff7be6a4
          description: The frame URL to crawl
      responses:
        "200":
          description: The response object containing the frame object
          content:
            application/json:
              schema:
                type: object
                description: The frame object containing the meta tags
                required:
                  - frame
                properties:
                  frame:
                    $ref: "#/components/schemas/Frame"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/reaction:
    post:
      tags:
        - Reaction
      summary: Post a reaction
      description: |
        Post a reaction (like or recast) to a given cast \
        (In order to post a reaction `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/publish-reaction
      operationId: publish-reaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReactionReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              target: "0x1ea99cbed57e4020314ba3fadd7c692d2de34d5f"
              reaction_type: like
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
    delete:
      tags:
        - Reaction
      summary: Delete reaction
      description: |
        Delete a reaction (like or recast) to a cast \
        (In order to delete a reaction `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/delete-reaction
      operationId: delete-reaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReactionReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              target: "0x1ea99cbed57e4020314ba3fadd7c692d2de34d5f"
              reaction_type: like
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/user/verification:
    post:
      tags:
        - User
      summary: Add verification
      description: |
        Adds verification for an eth address or contract for the user \
        (In order to add verification `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/publish-verification
      operationId: publish-verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddVerificationReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              address: "0x1ea99cbed57e4020314ba3fadd7c692d2de34d5f"
              block_hash: "0x191905a9201170abb55f4c90a4cc968b44c1b71cdf3db2764b775c93e7e22b29"
              eth_signature: "0x2fc09da1f4dcb723fefb91f77932c249c418c0af00c66ed92ee1f35002c80d6a1145280c9f361d207d28447f8f7463366840d3a9309036cf6954afd1fd331beb1b"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
    delete:
      tags:
        - User
      summary: Delete verification
      description: |
        Removes verification for an eth address for the user \
        (In order to delete verification `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/delete-verification
      operationId: delete-verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveVerificationReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              address: "0x1ea99cbed57e4020314ba3fadd7c692d2de34d5f"
              block_hash: "0x191905a9201170abb55f4c90a4cc968b44c1b71cdf3db2764b775c93e7e22b29"
              eth_signature: "0x2fc09da1f4dcb723fefb91f77932c249c418c0af00c66ed92ee1f35002c80d6a1145280c9f361d207d28447f8f7463366840d3a9309036cf6954afd1fd331beb1"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
  /farcaster/user/follow:
    post:
      tags:
        - User
      summary: Follow user
      description: |
        Follow a user \
        (In order to follow a user `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/follow-user
      operationId: follow-user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FollowReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              target_fids:
                - 3
                - 194
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkFollowResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
    delete:
      tags:
        - User
      summary: Unfollow user
      description: |
        Unfollow a user \
        (In order to unfollow a user `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/unfollow-user
      operationId: unfollow-user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FollowReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              target_fids:
                - 3
                - 194
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkFollowResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/user/custody-address:
    get:
      tags:
        - User
      summary: "By custody-address"
      description: "Lookup a user by custody-address"
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-user-by-custody-address
      operationId: lookup-user-by-custody-address
      parameters:
        - name: custody_address
          in: query
          required: true
          schema:
            type: string
          example: "0xd1b702203b1b3b641a699997746bd4a12d157909"
          description: Custody Address associated with mnemonic
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
  /farcaster/user/by_username:
    get:
      tags:
        - User
      summary: "By username"
      description: "Fetches a single hydrated user object given a username"
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-user-by-username
      operationId: lookup-user-by-username
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
          example: "neynar"
          description: Username of the user to fetch
        - name: viewer_fid
          in: query
          required: false
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/user/by_location:
    get:
      tags:
        - User
      summary: "By location"
      description: "Fetches a list of users given a location"
      operationId: fetch-users-by-location
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-users-by-location
      parameters:
        - name: latitude
          in: query
          required: true
          schema:
            type: number
            example: 37.77
          description: Latitude of the location
        - name: longitude
          in: query
          required: true
          schema:
            type: number
            example: -122.41
          description: Longitude of the location
        - name: viewer_fid
          in: query
          description: FID of the user viewing the feed. Providing this will return a list of users that respects this user's mutes and blocks and includes `viewer_context`.
          required: false
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: limit
          in: query
          required: false
          example: 30
          schema:
            type: integer
            example: 10
            default: 25
            maximum: 100
          x-is-limit-param: true
          description: Number of results to fetch
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: Pagination cursor
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/user/balance:
    get:
      tags:
        - Onchain
      summary: "Token balance"
      description: "Fetches the token balances of a user given their FID"
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-balance
      operationId: fetch-user-balance
      parameters:
        - name: fid
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Fid"
          example: 3
          description: FID of the user to fetch
        - name: networks
          in: query
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Networks"
          explode: false
          description: Comma separated list of networks to fetch balances for. Currently, only "base" is supported.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BalanceResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/user/interactions:
    get:
      tags:
        - User
      summary: User interactions
      description: Returns a list of interactions between two users
      operationId: fetch-user-interactions
      parameters:
        - name: fids
          description: Comma separated list of two FIDs
          in: query
          required: true
          example: 194, 191
          schema:
            type: string
            x-comma-separated: true
            x-accept-as: integer
        - name: type
          in: query
          required: false
          description: Comma seperated list of Interaction type to fetch
          schema:
            type: array
            items:
              $ref: "#/components/schemas/NotificationType"
          explode: false
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                required:
                  - interactions
                properties:
                  interactions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Notification"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/login/nonce:
    get:
      tags:
        - Login
      summary: Fetch nonce
      description: Nonce to sign a message
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-nonce
      operationId: fetch-nonce
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NonceResponse"
        "401":
          $ref: "#/components/responses/401Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/login/authorize:
    get:
      tags:
        - Signer
      summary: Fetch authorization url
      description: Fetch authorization url (Fetched authorized url useful for SIWN login operation)
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-authorization-url
      operationId: fetch-authorization-url
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: response_type
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/AuthorizationUrlResponseType"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationUrlResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "401":
          $ref: "#/components/responses/401Response"
  /farcaster/frame/developer_managed/action:
    post:
      tags:
        - Frame
      summary: Signature packet
      description: |
        Post a frame action that has been signed with a developer managed signer

        The POST request to the post_url has a timeout of 5 seconds.
      externalDocs:
        url: https://docs.neynar.com/reference/post-frame-action-developer-managed
      operationId: post-frame-action-developer-managed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrameDeveloperManagedActionReqBody"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Frame"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/frame/action:
    post:
      tags:
        - Frame
      summary: Post a frame action, cast action or a cast composer action
      description: |
        Post frame actions, cast actions or cast composer actions to the server  \
        (In order to post any of these actions, you need to have an approved `signer_uuid`)

        The POST request to the post_url has a timeout of 5 seconds for frames.
      externalDocs:
        url: https://docs.neynar.com/reference/post-frame-action
      operationId: post-frame-action
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrameActionReqBody"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Frame"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/frame/notification_tokens:
    get:
      tags:
        - Frame
      summary: |
        List of frame notification tokens
      description: |
        Returns a list of notifications tokens related for an app
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-notification-tokens
      operationId: fetch-notification-tokens
      parameters:
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          example: 30
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: fids
          description: Comma separated list of FIDs, up to 100 at a time
          in: query
          required: false
          example: 194, 191, 6131
          schema:
            type: string
            x-comma-separated: true
            x-accept-as: integer
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrameNotificationTokens"
        "400":
          $ref: "#/components/responses/400Response"

  /farcaster/frame/notifications:
    post:
      tags:
        - Frame
      summary: Send notifications
      description: |
        Send notifications to interactors of a frame
      externalDocs:
        url: https://docs.neynar.com/reference/publish-frame-notifications
      operationId: publish-frame-notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendFrameNotificationsReqBody"
            example:
              target_fids: [1, 6131]
              notification:
                title: "Title for the notification"
                body: "Body of the notification describing the event for the user"
                target_url: "https://domain-of-your-frame.com/the-page-on-which-the-user-should-land"
                uuid: "9cb07cfe-1130-48b3-a245-5dd153ced3a3"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendFrameNotificationsResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ZodError"
                  - $ref: "#/components/schemas/ErrorRes"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/frame/validate:
    post:
      tags:
        - Frame
      summary: Validate frame action
      description: |
        Validates a frame against by an interacting user against a Farcaster Hub \
        (In order to validate a frame, message bytes from Frame Action must be provided in hex)
      externalDocs:
        url: https://docs.neynar.com/reference/validate-frame-action
      operationId: validate-frame-action
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateFrameActionReqBody"
            example:
              message_bytes_in_hex: "0a49080d1085940118f6a6a32e20018201390a1a86db69b3ffdf6ab8acb6872b69ccbe7eb6a67af7ab71e95aa69f10021a1908ef011214237025b322fd03a9ddc7ec6c078fb9c56d1a72111214e3d88aeb2d0af356024e0c693f31c11b42c76b721801224043cb2f3fcbfb5dafce110e934b9369267cf3d1aef06f51ce653dc01700fc7b778522eb7873fd60dda4611376200076caf26d40a736d3919ce14e78a684e4d30b280132203a66717c82d728beb3511b05975c6603275c7f6a0600370bf637b9ecd2bd231e"
              cast_reaction_context: true
              follow_context: false
              signer_context: false
              channel_follow_context: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateFrameActionResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/frame/validate/list:
    get:
      tags:
        - Frame
      summary: All frames validated by user
      description: Fetch a list of all the frames validated by a user
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-validate-frame-list
      operationId: fetch-validate-frame-list
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrameValidateListResponse"
        "401":
          $ref: "#/components/responses/401Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/frame/validate/analytics:
    get:
      tags:
        - Frame
      summary: Analytics for the frame
      description: Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-validate-frame-analytics
      operationId: fetch-validate-frame-analytics
      parameters:
        - name: frame_url
          in: query
          required: true
          schema:
            type: string
            format: uri
          example: https://shorturl.at/bDRY9
        - name: analytics_type
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/ValidateFrameAnalyticsType"
        - name: start
          in: query
          required: true
          schema:
            type: string
            format: date-time
            default: "2024-04-06T06:44:56.811Z"
        - name: stop
          in: query
          required: true
          schema:
            type: string
            format: date-time
            default: "2024-04-08T06:44:56.811Z"
        - name: aggregate_window
          in: query
          required: false
          description: Required for `analytics_type=interactions-per-cast`
          schema:
            $ref: "#/components/schemas/ValidateFrameAggregateWindow"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrameValidateAnalyticsResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "401":
          $ref: "#/components/responses/401Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/notifications:
    get:
      tags:
        - Notifications
      summary: For user
      description: Returns a list of notifications for a specific FID.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-all-notifications
      operationId: fetch-all-notifications
      parameters:
        - name: fid
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Fid"
          example: 194
          description: FID of the user you you want to fetch notifications for. The response will respect this user's mutes and blocks.
        - name: type
          in: query
          required: false
          description: Notification type to fetch. Comma separated values of follows, recasts, likes, mentions, replies.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/NotificationType"
          explode: false
        - name: priority_mode
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: When true, only returns notifications from power badge users and users that the viewer follows (if viewer_fid is provided).
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/notifications/channel:
    get:
      tags:
        - Notifications
      summary: For user by channel
      description: Returns a list of notifications for a user in specific channels
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-channel-notifications-for-user
      operationId: fetch-channel-notifications-for-user
      parameters:
        - name: fid
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Fid"
          example: 194
          description: FID of the user you you want to fetch notifications for. The response will respect this user's mutes and blocks.
        - name: channel_ids
          in: query
          required: true
          schema:
            type: string
            x-comma-separated: true
          example: "neynar,farcaster"
          description: Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)
        - name: priority_mode
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: When true, only returns notifications from power badge users and users that the viewer follows (if viewer_fid is provided).
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/notifications/parent_url:
    get:
      tags:
        - Notifications
      summary: For user by parent_urls
      description: Returns a list of notifications for a user in specific parent_urls
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-notifications-by-parent-url-for-user
      operationId: fetch-notifications-by-parent-url-for-user
      parameters:
        - name: fid
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Fid"
          example: 194
          description: FID of the user you you want to fetch notifications for. The response will respect this user's mutes and blocks.
        - name: parent_urls
          in: query
          required: true
          schema:
            type: string
            x-comma-separated: true
          example: "chain://eip155:1/erc721:0xd4498134211baad5846ce70ce04e7c4da78931cc"
          description: Comma separated parent_urls
        - name: priority_mode
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: When true, only returns notifications from power badge users and users that the viewer follows (if viewer_fid is provided).
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/notifications/seen:
    post:
      tags:
        - Notifications
      summary: Mark as seen
      description: Mark notifications as seen
      externalDocs:
        url: https://docs.neynar.com/reference/mark-notifications-as-seen
      operationId: mark-notifications-as-seen
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MarkNotificationsAsSeenReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              type: "likes"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/channel/list:
    get:
      tags:
        - Channel
      summary: Fetch all channels with their details
      description: Returns a list of all channels with their details
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-all-channels
      operationId: fetch-all-channels
      parameters:
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          example: 30
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 200
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelListResponse"
  /farcaster/channel/member:
    delete:
      tags:
        - Channel
      summary: Remove user
      description: Remove a user from a channel or a user's invite to a channel role
      externalDocs:
        url: https://docs.neynar.com/reference/remove-channel-member
      operationId: remove-channel-member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveChannelMemberReqBody"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/channel/member/list:
    get:
      tags:
        - Channel
      summary: Fetch members
      description: Fetch a list of members in a channel
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-channel-members
      operationId: fetch-channel-members
      parameters:
        - name: channel_id
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/ChannelId"
          example: "neynar"
          description: Channel ID for the channel being queried
        - name: fid
          in: query
          schema:
            $ref: "#/components/schemas/Fid"
          example: 194
          description: FID of the user being queried. Specify this to check if a user is a member of the channel without paginating through all members.
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          example: 30
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelMemberListResponse"
        "500":
          $ref: "#/components/responses/500Response"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/channel/member/invite:
    post:
      tags:
        - Channel
      summary: Invite
      description: Invite a user to a channel
      externalDocs:
        url: https://docs.neynar.com/reference/invite-channel-member
      operationId: invite-channel-member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteChannelMemberReqBody"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
    put:
      tags:
        - Channel
      summary: Accept or reject an invite
      description: Accept or reject a channel invite
      externalDocs:
        url: https://docs.neynar.com/reference/respond-channel-invite
      operationId: respond-channel-invite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RespondChannelInviteReqBody"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/channel/member/invite/list:
    get:
      tags:
        - Channel
      summary: Open invites
      description: Fetch a list of invites, either in a channel or for a user. If both are provided, open channel invite for that user is returned.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-channel-invites
      operationId: fetch-channel-invites
      parameters:
        - name: channel_id
          in: query
          schema:
            $ref: "#/components/schemas/ChannelId"
          example: "neynar"
          description: Channel ID for the channel being queried
        - name: invited_fid
          in: query
          schema:
            $ref: "#/components/schemas/Fid"
          example: 194
          description: FID of the user being invited
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          example: 30
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelMemberInviteListResponse"
        "500":
          $ref: "#/components/responses/500Response"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/channel/search:
    get:
      tags:
        - Channel
      summary: Search by ID or name
      description: Returns a list of channels based on ID or name
      externalDocs:
        url: https://docs.neynar.com/reference/search-channels
      operationId: search-channels
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          example: "neynar"
          description: Channel ID or name for the channel being queried
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          example: 30
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 200
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelSearchResponse"
  /farcaster/channel/bulk:
    get:
      tags:
        - Channel
      summary: Bulk fetch
      description: Returns details of multiple channels
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-bulk-channels
      operationId: fetch-bulk-channels
      parameters:
        - name: ids
          in: query
          required: true
          schema:
            type: string
            x-comma-separated: true
          example: "neynar,warpcast"
          description: Comma separated list of channel IDs or parent_urls, up to 100 at a time
        - name: type
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/ChannelType"
          example: "id"
          description: Type of identifier being used to query the channels. Defaults to ID.
        - name: viewer_fid
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Fid"
          example: 194
          description: FID of the user viewing the channels.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelResponseBulk"
        "404":
          $ref: "#/components/responses/404Response"
  /farcaster/channel:
    get:
      tags:
        - Channel
      summary: By ID or parent_url
      description: Returns details of a channel
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-channel
      operationId: lookup-channel
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
          example: "neynar"
          description: Channel ID for the channel being queried
        - name: type
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/ChannelType"
          example: "parent_url"
          description: Type of identifier being used to query the channel. Defaults to ID.
        - name: viewer_fid
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Fid"
          example: 194
          description: FID of the user viewing the channel.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelResponse"
        "404":
          $ref: "#/components/responses/404Response"
  /farcaster/channel/follow:
    post:
      tags:
        - Channel
      summary: Follow a channel
      description: Follow a channel
      externalDocs:
        url: https://docs.neynar.com/reference/follow-channel
      operationId: follow-channel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChannelFollowReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              channel_id: "neynar"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
    delete:
      tags:
        - Channel
      summary: Unfollow a channel
      description: Unfollow a channel
      externalDocs:
        url: https://docs.neynar.com/reference/unfollow-channel
      operationId: unfollow-channel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChannelFollowReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              channel_id: "memes"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/channel/followers:
    get:
      tags:
        - Channel
      summary: For channel
      description: Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-followers-for-a-channel
      operationId: fetch-followers-for-a-channel
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
          example: "founders"
          description: Channel ID for the channel being queried
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return a list of followers that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            $ref: "#/components/schemas/Fid"
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Number of followers to fetch
          required: false
          example: 30
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 1000
          x-is-limit-param: true
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/channel/followers/relevant:
    get:
      tags:
        - Channel
      summary: Relevant followers
      description: Returns a list of relevant channel followers for a specific FID. This usually shows on a channel as "X, Y, Z follow this channel".
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-relevant-followers-for-a-channel
      operationId: fetch-relevant-followers-for-a-channel
      parameters:
        - name: id
          in: query
          required: true
          description: Channel ID being queried
          example: "neynar"
          schema:
            type: string
        - name: viewer_fid
          in: query
          required: true
          description: The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user's mutes and blocks and includes `viewer_context`.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelevantFollowersResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/channel/user:
    get:
      tags:
        - Channel
      summary: Fetch channels that user is active in
      description: Fetches all channels that a user has casted in, in reverse chronological order.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-users-active-channels
      operationId: fetch-users-active-channels
      parameters:
        - name: fid
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Fid"
          description: The user's FID (identifier)
          example: 194
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          example: 20
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersActiveChannelsResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/400Response"
  /farcaster/channel/trending:
    get:
      tags:
        - Channel
      summary: Channels by activity
      description: Returns a list of trending channels based on activity
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-trending-channels
      operationId: fetch-trending-channels
      parameters:
        - name: time_window
          in: query
          required: false
          schema:
            type: string
            enum:
              - 1d
              - 7d
              - 30d
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 25
          example: 10
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrendingChannelResponse"
        "500":
          $ref: "#/components/responses/500Response"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/followers:
    get:
      tags:
        - Follows
      summary: Followers
      description: Returns a list of followers for a specific FID.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-followers
      operationId: fetch-user-followers
      parameters:
        - name: fid
          in: query
          required: true
          description: User who's profile you are looking at
          schema:
            $ref: "#/components/schemas/Fid"
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return a list of followers that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            $ref: "#/components/schemas/Fid"
        - name: sort_type
          in: query
          required: false
          description: Sort type for fetch followers. Default is `desc_chron`
          schema:
            $ref: "#/components/schemas/FollowSortType"
        - name: limit
          in: query
          required: false
          description: Number of results to fetch
          example: 30
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          required: false
          description: Pagination cursor.
          schema:
            type: string
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowersResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/followers/relevant:
    get:
      tags:
        - Follows
      summary: Relevant followers
      description: Returns a list of relevant followers for a specific FID. This usually shows on a profile as "X, Y and Z follow this user".
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-relevant-followers
      operationId: fetch-relevant-followers
      parameters:
        - name: target_fid
          in: query
          required: true
          description: User who's profile you are looking at
          schema:
            $ref: "#/components/schemas/Fid"
        - name: viewer_fid
          in: query
          required: true
          description: The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            $ref: "#/components/schemas/Fid"
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelevantFollowersResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/following:
    get:
      tags:
        - Follows
      summary: Followed by
      description: Fetch a list of users followed by a user. Can optionally include a viewer_fid and sort_type.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-following
      operationId: fetch-user-following
      parameters:
        - name: fid
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Fid"
          example: 2
          description: FID of the user whose following you want to fetch.
        - name: viewer_fid
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Fid"
          example: 3
          description: Providing this will return a list of users that respects this user's mutes and blocks and includes `viewer_context`.
        - name: sort_type
          in: query
          required: false
          description: "Optional parameter to sort the users based on different criteria."
          schema:
            $ref: "#/components/schemas/FollowSortType"
        - name: limit
          in: query
          description: Number of results to fetch
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
          example: 25
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowersResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/following/suggested:
    get:
      tags:
        - Follows
      summary: Suggest Follows
      description: Fetch a list of suggested users to follow. Used to help users discover new users to follow
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-follow-suggestions
      operationId: fetch-follow-suggestions
      parameters:
        - name: fid
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Fid"
          example: 2
          description: FID of the user whose following you want to fetch.
        - name: viewer_fid
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Fid"
          example: 3
          description: Providing this will return a list of users that respects this user's mutes and blocks and includes `viewer_context`.
        - name: limit
          in: query
          description: Number of results to fetch
          example: 30
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
            example: 25
          x-is-limit-param: true
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/reactions/user:
    get:
      tags:
        - Reaction
      summary: Reactions for user
      description: Fetches reactions for a given user
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-user-reactions
      operationId: fetch-user-reactions
      parameters:
        - name: fid
          in: query
          required: true
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return a list of reactions that respects this user's mutes and blocks and includes `viewer_context`.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: type
          in: query
          required: true
          description: Type of reaction to fetch (likes or recasts or all)
          example: all
          schema:
            $ref: "#/components/schemas/ReactionsType"
        - name: limit
          in: query
          description: Number of results to fetch
          example: 30
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReactionsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/reactions/cast:
    get:
      tags:
        - Reaction
      summary: Reactions for cast
      description: Fetches reactions for a given cast
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-cast-reactions
      operationId: fetch-cast-reactions
      parameters:
        - name: hash
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/CastHash"
        - name: types
          in: query
          description: >
            Customize which reaction types the request should search for. This is a comma-separated string that can include the following values: 'likes' and 'recasts'. By default api returns both. To select multiple types, use a comma-separated list of these values.
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ReactionsType"
          explode: false
        - name: viewer_fid
          in: query
          required: false
          description: Providing this will return a list of reactions that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            $ref: "#/components/schemas/Fid"
        - name: limit
          in: query
          description: Number of results to fetch
          example: 30
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReactionsCastResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/fname/availability:
    get:
      tags:
        - fname
      summary: Check fname availability
      description: Check if a given fname is available
      externalDocs:
        url: https://docs.neynar.com/reference/is-fname-available
      operationId: is-fname-available
      parameters:
        - name: fname
          in: query
          required: true
          example: "farcaster"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FnameAvailabilityResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/fungible/owner/relevant:
    get:
      tags:
        - Onchain
      summary: Relevant owners
      description: Fetch a list of relevant owners for a specific FID. This usually shows on a fungible asset page as "X, Y, Z and N others you know own this asset".
      operationId: fetch-relevant-fungible-owners
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-relevant-fungible-owners
      parameters:
        - name: contract_address
          in: query
          required: true
          description: Contract address of the fungible asset
          schema:
            type: string
          example: "0x0db510e79909666d6dec7f5e49370838c16d950f"
        - name: networks
          in: query
          required: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Networks"
          explode: false
          description: Comma separated list of networks to fetch balances for. Currently, only "base" is supported.
        - name: viewer_fid
          in: query
          required: true
          description: The FID of the user to customize this response for. Providing this will also return a list of owners that respects this user's mutes and blocks and includes `viewer_context`.
          schema:
            $ref: "#/components/schemas/Fid"
          example: 194
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelevantFungibleOwnersResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/storage/allocations:
    get:
      tags:
        - Storage
      summary: Allocation of user
      description: Fetches storage allocations for a given user
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-user-storage-allocations
      operationId: lookup-user-storage-allocations
      parameters:
        - name: fid
          in: query
          required: true
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
      responses:
        "200":
          description: A list of storage allocations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorageAllocationsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/storage/usage:
    get:
      tags:
        - Storage
      summary: Usage of user
      description: Fetches storage usage for a given user
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-user-storage-usage
      operationId: lookup-user-storage-usage
      parameters:
        - name: fid
          in: query
          required: true
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
      responses:
        "200":
          description: Details of storage usage
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorageUsageResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/storage/buy:
    post:
      tags:
        - Storage
      summary: Buy storage
      description: |
        This api will help you rent units of storage for an year for a specific FID.
        A storage unit lets you store 5000 casts, 2500 reactions and 2500 links.
      externalDocs:
        url: https://docs.neynar.com/reference/buy-storage
      operationId: buy-storage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuyStorageReqBody"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorageAllocationsResponse"
        "400":
          $ref: "#/components/responses/400ZodResponse"
        "409":
          $ref: "#/components/responses/409Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/webhook:
    get:
      tags:
        - Webhook
      summary: Fetch a webhook
      description: Fetch a webhook
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-webhook
      operationId: lookup-webhook
      parameters:
        - name: webhook_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Details of a webhook
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "404":
          $ref: "#/components/responses/404Response"
    post:
      tags:
        - Webhook
      summary: Create a webhook
      description: Create a webhook
      externalDocs:
        url: https://docs.neynar.com/reference/publish-webhook
      operationId: publish-webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookPostReqBody"
      responses:
        "200":
          description: Created webhook
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
    patch:
      tags:
        - Webhook
      summary: Update webhook status
      description: Update webhook active status
      externalDocs:
        url: https://docs.neynar.com/reference/update-webhook-active-status
      operationId: update-webhook-active-status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookPatchReqBody"
      responses:
        "200":
          description: Updated webhook
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          $ref: "#/components/responses/400Response"
    put:
      tags:
        - Webhook
      summary: Update a webhook
      description: Update a webhook
      externalDocs:
        url: https://docs.neynar.com/reference/update-webhook
      operationId: update-webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookPutReqBody"
      responses:
        "200":
          description: Updated webhook
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          $ref: "#/components/responses/400Response"
    delete:
      tags:
        - Webhook
      summary: Delete a webhook
      description: Delete a webhook
      externalDocs:
        url: https://docs.neynar.com/reference/delete-webhook
      operationId: delete-webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookDeleteReqBody"
      responses:
        "200":
          description: Deleted webhook status message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "404":
          $ref: "#/components/responses/404Response"
  /farcaster/webhook/list:
    get:
      tags:
        - Webhook
      summary: Associated webhooks of user
      description: Fetch a list of webhooks associated to a user
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-webhooks
      operationId: fetch-webhooks
      responses:
        "200":
          description: List of webhooks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookListResponse"
  /farcaster/mute/list:
    get:
      tags:
        - Mute
      summary: Muted FIDs of user
      description: Fetches all FIDs that a user has muted.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-mute-list
      operationId: fetch-mute-list
      parameters:
        - name: fid
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Fid"
          description: The user's FID (identifier)
          example: 194
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          example: 20
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MuteListResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/mute:
    post:
      tags:
        - Mute
      summary: Mute FID
      description: Adds a mute for a given FID. This is an allowlisted API, reach out if you want access.
      externalDocs:
        url: https://docs.neynar.com/reference/publish-mute
      operationId: publish-mute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MuteReqBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MuteResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "500":
          $ref: "#/components/responses/500Response"
    delete:
      tags:
        - Mute
      summary: Unmute FID
      description: Deletes a mute for a given FID. This is an allowlisted API, reach out if you want access.
      externalDocs:
        url: https://docs.neynar.com/reference/delete-mute
      operationId: delete-mute
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MuteReqBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MuteResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/block/list:
    get:
      tags:
        - Block
      summary: Blocked / Blocked by FIDs
      description: Fetches all FIDs that a user has blocked or has been blocked by
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-block-list
      operationId: fetch-block-list
      parameters:
        - name: blocker_fid
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Fid"
          description: Providing this will return the users that this user has blocked
          example: 194
        - name: blocked_fid
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/Fid"
          description: Providing this will return the users that have blocked this user
          example: 194
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          example: 20
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlockListResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/block:
    post:
      tags:
        - Block
      summary: Block FID
      description: Adds a block for a given FID.
      externalDocs:
        url: https://docs.neynar.com/reference/publish-block
      operationId: publish-block
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlockReqBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "500":
          $ref: "#/components/responses/500Response"
    delete:
      tags:
        - Block
      summary: Unblock FID
      description: Deletes a block for a given FID.
      externalDocs:
        url: https://docs.neynar.com/reference/delete-block
      operationId: delete-block
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlockReqBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/ban/list:
    get:
      tags:
        - Ban
      summary: Banned FIDs of app
      description: Fetches all FIDs that your app has banned.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-ban-list
      operationId: fetch-ban-list
      parameters:
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          example: 20
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/NeynarExperimentalHeader"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BanListResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/ban:
    post:
      tags:
        - Ban
      summary: Ban FIDs from app
      description: Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.
      externalDocs:
        url: https://docs.neynar.com/reference/publish-bans
      operationId: publish-bans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BanReqBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BanResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "500":
          $ref: "#/components/responses/500Response"
    delete:
      tags:
        - Ban
      summary: Unban FIDs from app
      description: Deletes a list of FIDs from the app associated with your API key.
      externalDocs:
        url: https://docs.neynar.com/reference/delete-bans
      operationId: delete-bans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BanReqBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BanResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/cast/composer_actions/list:
    get:
      tags:
        - Cast
      summary: Fetch composer actions
      description: Fetches all composer actions on Warpcast. You can filter by top or featured.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-composer-actions
      operationId: fetch-composer-actions
      parameters:
        - name: list
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/CastComposerType"
          example: "top"
          description: Type of list to fetch.
        - name: limit
          in: query
          description: Number of results to fetch
          required: false
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 25
          example: 25
          x-is-limit-param: true
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of composer actions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CastComposerActionsListResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/action:
    post:
      tags:
        - Action
      summary: User actions across apps
      description: Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user's Farcaster signer.
      externalDocs:
        url: https://docs.neynar.com/docs/farcaster-actions-spec
      operationId: publish-farcaster-action
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FarcasterActionReqBody"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        "default":
          description: Any possible response
          content:
            "*/*":
              schema:
                type: object
                additionalProperties: true
  /stp/subscription_check:
    get:
      tags:
        - Subscribers
      summary: Hypersub subscription check
      description: Check if a wallet address is subscribed to a given STP (Hypersub) contract.
      externalDocs:
        url: https://docs.neynar.com/reference/fetch-subscription-check
      operationId: fetch-subscription-check
      parameters:
        - name: addresses
          description: Comma separated list of Ethereum addresses, up to 350 at a time
          in: query
          required: true
          example: 0xedd3783e8c7c52b80cfbd026a63c207edc9cbee7,0x5a927ac639636e534b678e81768ca19e2c6280b7
          schema:
            type: string
            x-comma-separated: true
        - name: contract_address
          description: Ethereum address of the STP contract
          in: query
          required: true
          example: "0x76ad4cb9ac51c09f4d9c2cadcea75c9fa9074e5b"
          schema:
            type: string
        - name: chain_id
          description: Chain ID of the STP contract
          in: query
          required: true
          example: "8453"
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionCheckResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /fungible:
    post:
      summary: Deploy fungible
      description: |
        Creates a new token.
        This is an allowlisted API, reach out if you want access.
      operationId: deploy-fungible
      externalDocs:
        url: https://docs.neynar.com/reference/deploy-fungible
      tags:
        - Onchain
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/DeployFungibleReqBody"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployFungibleResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"

  # /farcaster/webhook/subscription:
  #   get:
  #     tags:
  #       - Webhook
  #     summary: Lookup webhook subscription
  #     description: Lookup webhook subscription
  #     operationId: lookup-webhook-subscription
  #     externalDocs:
  #       url: https://docs.neynar.com/reference/lookup-webhook-subscription
  #     parameters:
  #       - name: webhook_id
  #         in: query
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "200":
  #         description: Details of a webhook subscription
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/WebhookSubscriptionResponse"
  #       "400":
  #         $ref: "#/components/responses/400Response"
  #   patch:
  #     tags:
  #       - Webhook
  #     summary: Update webhook subscription
  #     description: Update webhook subscription
  #     operationId: update-webhook-subscription
  #     externalDocs:
  #       url: https://docs.neynar.com/reference/update-webhook-subscription
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/WebhookUpdateSubscriptionReqBody"
  #     responses:
  #       "200":
  #         description: Details of a webhook subscription
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/WebhookSubscriptionResponse"
  #       "400":
  #         $ref: "#/components/responses/400Response"
  #       "404":
  #         $ref: "#/components/responses/404Response"
  #   delete:
  #     tags:
  #       - Webhook
  #     summary: Delete webhook subscription
  #     description: Delete webhook subscription
  #     operationId: delete-webhook-subscription
  #     externalDocs:
  #       url: https://docs.neynar.com/reference/delete-webhook-subscription
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/WebhookUpdateSubscriptionReqBody"
  #     responses:
  #       "200":
  #         description: Details of a webhook subscription
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/WebhookSubscriptionResponse"
  #       "400":
  #         $ref: "#/components/responses/400Response"
  #       "404":
  #         $ref: "#/components/responses/404Response"
