openapi: 3.0.0
info:
  title: Farcaster API V2
  version: "2.0"
servers:
  - url: https://api.neynar.com/v2

components:
  schemas:
    Address:
      type: string
      pattern: '^0x[a-fA-F0-9]{40}$'
      description: Ethereum address
    SolAddress:
      type: string
      pattern: '^[1-9A-HJ-NP-Za-km-z]{32,44}$'
      description: Solana address
    Fid:
      type: integer
      format: int32
      description: User identifier (unsigned integer)
    SignerUUID:
      type: string
      description: UUID of the signer
    ActiveStatus:
      type: string
      enum:
        - active
        - inactive
      description: |
        The status of a user.
          - active: The user is currently active.
          - inactive: The user is not currently active.
    ReactionType:
      type: string
      enum:
        - like
        - recast
    ReactionsType:
      type: string
      enum:
        - likes
        - recasts
        - all
    NextCursor:
      type: object
      description: Returns next cursor
      required:
        - cursor
      properties:
        cursor:
          type: string
          nullable: true
    CastHash:
      type: string
      default: "0xfe90f9de682273e05b201629ad2338bdcd89b6be"
      description: Cast Hash
    CastNotificationType:
      type: string
      enum:
        - cast-mention
        - cast-reply
      description: |
        The notification type of a cast.
    CastParamType:
      type: string
      enum:
        - url
        - hash
      description: |
        The query param accepted by the API. Sent along with identifier param.
        url - Cast identifier is a url
        hash - Cast identifier is a hash
    ErrorRes:
      type: object
      required:
        - message
      description: Returns ErrorRes metadata
      properties:
        code:
          type: string
        message:
          type: string
        property:
          type: string
        status:
          type: integer
          format: int32
    Timestamp:
      type: string
      format: date-time
    IndividualHashObj:
      type: object
      properties:
        hash:
          type: string
      required:
        - hash
    EmbedUrl:
      type: object
      required:
        - url
      properties:
        url:
          type: string
    CastId:
      type: object
      required:
        - fid
        - hash
      properties:
        fid:
          $ref: "#/components/schemas/Fid"
        hash:
          type: string
    EmbedCastId:
      type: object
      required:
        - cast_id
      properties:
        cast_id:
          $ref: "#/components/schemas/CastId"
    Frame:
      type: object
      required:
        - version
        - image
        - frames_url
      properties:
        version:
          type: string
          description: Version of the frame
        image:
          type: string
          description: URL of the image
        buttons:
          type: array
          items:
            $ref: "#/components/schemas/FrameActionButton"
        post_url:
          type: string
          description: Post URL to take an action on this frame
        frames_url:
          type: string
          description: URL of the frames
    FrameAction:
      type: object
      required:
        - button
        - frames_url
        - post_url
      properties:
        version:
          type: string
        title:
          type: string
        image:
          type: string
        button:
          $ref: "#/components/schemas/FrameActionButton"
        input:
          $ref: "#/components/schemas/FrameInput"
        state:
          $ref: "#/components/schemas/FrameState"
        frames_url:
          type: string
          description: URL of the frames
        post_url:
          type: string
          description: URL of the post to get the next frame
    FrameButtonActionType:
      type: string
      enum:
        - post
        - post_redirect
    FrameInput:
      type: object
      properties:
        text:
          type: string
          description: Input text for the frame
          example: "Draw a purple ringed planet"
    FrameState:
      type: object
      properties:
        serialized:
          type: string
          description: State for the frame in a serialized format
          example: "%7B%22counter%22%3A1%7D"
    FrameActionButton:
      type: object
      required:
        - index
      properties:
        title:
          type: string
          description: Title of the button
        index:
          type: integer
          description: Index of the button
        action_type:
          $ref: "#/components/schemas/FrameButtonActionType"
    ReactionLike:
      type: object
      required:
        - fid
      properties:
        fid:
          $ref: "#/components/schemas/Fid"
    ReactionRecast:
      type: object
      required:
        - fid
        - fname
      properties:
        fid:
          $ref: "#/components/schemas/Fid"
        fname:
          type: string
    User:
      type: object
      required:
        - object
        - fid
        - custody_address
        - username
        - display_name
        - pfp_url
        - profile
        - follower_count
        - following_count
        - verifications
        - verified_addresses
        - active_status
      properties:
        object:
          type: string
          enum:
            - user
        fid:
          $ref: "#/components/schemas/Fid"
        username:
          type: string
        display_name:
          type: string
        custody_address:
          $ref: "#/components/schemas/Address"
        pfp_url:
          type: string
          description: The URL of the user's profile picture
        profile:
          type: object
          required:
            - bio
          properties:
            bio:
              type: object
              required:
                - text
                - mentioned_profiles
              properties:
                text:
                  type: string
                mentioned_profiles:
                  type: array
                  items:
                    type: string
                  default: []
        follower_count:
          type: integer
          format: int32
          description: The number of followers the user has.
        following_count:
          type: integer
          format: int32
          description: The number of users the user is following.
        verifications:
          type: array
          items:
            $ref: "#/components/schemas/Address"
        verified_addresses:
          type: object
          required:
            - eth_addresses
            - sol_addresses
          properties:
            eth_addresses:
              type: array
              items:
                $ref: "#/components/schemas/Address"
            sol_addresses:
              type: array
              items:
                $ref: "#/components/schemas/SolAddress"
        active_status:
          $ref: "#/components/schemas/ActiveStatus"
        viewer_context:
          type: object
          required:
            - following
            - followed_by
          properties:
            following:
              type: boolean
            followed_by:
              type: boolean
    EmbeddedCast:
      oneOf:
        - $ref: "#/components/schemas/EmbedUrl"
        - $ref: "#/components/schemas/EmbedCastId"
    Cast:
      type: object
      required:
        - hash
        - parent_hash
        - parent_url
        - parent_author
        - author
        - text
        - timestamp
        - embeds
      properties:
        hash:
          type: string
        parent_hash:
          type: string
          nullable: true
        parent_url:
          type: string
          nullable: true
        parent_author:
          type: object
          allOf:
            - $ref: "#/components/schemas/Fid"
            - required:
                - fid
              properties:
                fid:
                  type: integer
                  nullable: true
        author:
          $ref: "#/components/schemas/User"
        text:
          type: string
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        embeds:
          type: array
          items:
            $ref: "#/components/schemas/EmbeddedCast"
        type:
          $ref: "#/components/schemas/CastNotificationType"
    ProfileUrl:
      type: object
      required:
        - pfp
      properties:
        pfp:
          type: object
          required:
            - url
          properties:
            url:
              type: string
    SearchedUser:
      allOf:
        - $ref: "#/components/schemas/User"
        - $ref: "#/components/schemas/ProfileUrl"
    RegisterSignerKeyReqBody:
      type: object
      required:
        - signer_uuid
        - signature
        - app_fid
        - deadline
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        signature:
          type: string
          description: Signature generated by the custody address of the app. Signed data includes app_fid, deadline, signer’s public key
        app_fid:
          type: integer
          description: Application FID
        deadline:
          type: integer
          description: unix timestamp in seconds that controls how long the signed key request is valid for. (24 hours from now is recommended)
    CastParent:
      type: string
      description: Parent URL or Cast Hash
    PostCastReqBody:
      type: object
      required:
        - signer_uuid
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        text:
          type: string
        embeds:
          type: array
          items:
            $ref: "#/components/schemas/EmbeddedCast"
        parent:
          $ref: "#/components/schemas/CastParent"
        channel_id:
          type: string
          description: Channel ID of the channel where the cast is to be posted. e.g. neynar, farcaster, warpcast
          example: "neynar"
    ReactionReqBody:
      type: object
      required:
        - signer_uuid
        - reaction_type
        - target
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        reaction_type:
          $ref: "#/components/schemas/ReactionType"
        target:
          type: string
    GetCastsReqBody:
      type: object
      properties:
        casts:
          type: array
          items:
            $ref: "#/components/schemas/IndividualHashObj"
    DeleteCastReqBody:
      type: object
      required:
        - signer_uuid
        - target_hash
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        target_hash:
          $ref: "#/components/schemas/Address"
    FollowReqBody:
      type: object
      required:
        - signer_uuid
        - target_fids
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        target_fids:
          type: array
          items:
            $ref: "#/components/schemas/Fid"
    FrameActionReqBody:
      type: object
      required:
        - signer_uuid
        - cast_hash
        - action
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        cast_hash:
          $ref: "#/components/schemas/CastHash"
        action:
          $ref: "#/components/schemas/FrameAction"
    FrameActionResponse:
      type: object
      required:
        - next_frame
      properties:
        next_frame:
          $ref: "#/components/schemas/Frame"
    AddVerificationReqBody:
      type: object
      required:
        - signer_uuid
        - address
        - block_hash
        - eth_signature
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        address:
          $ref: "#/components/schemas/Address"
        block_hash:
          type: string
        eth_signature:
          type: string
    RemoveVerificationReqBody:
      type: object
      required:
        - signer_uuid
        - address
        - block_hash
        - eth_signature
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        address:
          $ref: "#/components/schemas/Address"
    UpdateUserReqBody:
      type: object
      required:
        - signer_uuid
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        bio:
          type: string
        pfp_url:
          type: string
        url:
          type: string
        username:
          type: string
        display_name:
          type: string
    CastWithInteractionsReactions:
      type: object
      required:
        - likes
        - recasts
      properties:
        likes:
          type: array
          items:
            $ref: "#/components/schemas/ReactionLike"
        recasts:
          type: array
          items:
            $ref: "#/components/schemas/ReactionRecast"
    CastWithInteractionsReplies:
      type: object
      required:
        - count
      properties:
        count:
          type: integer
          format: int32
    CastWithInteractions:
      type: object
      allOf:
        - $ref: "#/components/schemas/Cast"
        - required:
            - reactions
            - replies
            - thread_hash
            - mentioned_profiles
          properties:
            frames:
              type: array
              items:
                $ref: "#/components/schemas/Frame"
            reactions:
              $ref: "#/components/schemas/CastWithInteractionsReactions"
            replies:
              $ref: "#/components/schemas/CastWithInteractionsReplies"
            thread_hash:
              type: string
              nullable: true
            mentioned_profiles:
              type: array
              items:
                $ref: "#/components/schemas/User"
    Signer:
      type: object
      required:
        - signer_uuid
        - public_key
        - status
      properties:
        signer_uuid:
          $ref: "#/components/schemas/SignerUUID"
        public_key:
          type: string
        status:
          type: string
          enum:
            - generated
            - pending_approval
            - approved
            - revoked
        signer_approval_url:
          type: string
        fid:
          $ref: "#/components/schemas/Fid"
    CastResponse:
      type: object
      required:
        - cast
      properties:
        cast:
          $ref: "#/components/schemas/CastWithInteractions"
    Channel:
      type: object
      required:
        - id
        - url
        - object
      properties:
        id:
          type: string
        url:
          type: string
        name:
          type: string
        description:
          type: string
        object:
          type: string
          enum:
            - channel
        created_at:
          description: Epoch timestamp in seconds.
          type: number
        image_url:
          type: string
        lead:
          $ref: "#/components/schemas/User"
    ChannelListResponse:
      type: object
      required:
        - channels
      properties:
        channels:
          type: array
          items:
            $ref: "#/components/schemas/Channel"
    ChannelResponse:
      type: object
      required:
        - channel
      properties:
        channel:
          $ref: "#/components/schemas/Channel"
    UserSearchResponse:
      type: object
      required:
        - result
      properties:
        result:
          type: object
          required:
            - users
          properties:
            users:
              type: array
              items:
                $ref: "#/components/schemas/SearchedUser"
    BulkCastsResponse:
      type: object
      required:
        - casts
      properties:
        casts:
          type: array
          items:
            $ref: "#/components/schemas/CastWithInteractions"
    CastsResponse:
      type: object
      required:
        - result
      properties:
        result:
          type: object
          required:
            - casts
          properties:
            casts:
              type: array
              items:
                $ref: "#/components/schemas/CastWithInteractions"
    FeedResponse:
      type: object
      required:
        - casts
        - next
      properties:
        casts:
          type: array
          items:
            $ref: "#/components/schemas/CastWithInteractions"
        next:
          $ref: "#/components/schemas/NextCursor"
    PostCastResponse:
      type: object
      required:
        - success
        - cast
      properties:
        success:
          type: boolean
        cast:
          type: object
          required:
            - hash
            - author
            - text
          properties:
            hash:
              $ref: "#/components/schemas/Address"
            author:
              type: object
              required:
                - fid
              properties:
                fid:
                  $ref: "#/components/schemas/Fid"
            text:
              type: string
    OperationResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
        message:
          type: string
    FollowResponse:
      type: object
      required:
        - success
        - target_fid
      properties:
        success:
          type: boolean
        target_fid:
          $ref: "#/components/schemas/Fid"
    BulkFollowResponse:
      type: object
      required:
        - success
        - details
      properties:
        success:
          type: boolean
        details:
          type: array
          items:
            $ref: "#/components/schemas/FollowResponse"
    NotificationsResponse:
      type: object
      required:
        - notifications
        - next
      properties:
        notifications:
          type: array
          items:
            $ref: "#/components/schemas/Notification"
        next:
          $ref: "#/components/schemas/NextCursor"
    Notification:
      type: object
      required:
        - object
        - most_recent_timestamp
        - type
      properties:
        object:
          type: string
        most_recent_timestamp:
          type: string
          format: date-time
        type:
          type: string
          enum:
            - follows
            - recasts
            - likes
            - mention
            - reply
        follows:
          type: array
          items:
            $ref: "#/components/schemas/Follow"
        cast:
          $ref: "#/components/schemas/CastWithInteractions"
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/ReactionWithUserInfo"
    Follow:
      type: object
      required:
        - object
        - user
      properties:
        object:
          type: string
          enum:
            - follow
        user:
          $ref: "#/components/schemas/User"
    CastDehydrated:
      type: object
      required:
        - hash
        - object
      properties:
        hash:
          type: string
        object:
          type: string
          enum:
            - cast_dehydrated
    ReactionWithUserInfo:
      type: object
      required:
        - object
        - cast
        - user
      properties:
        object:
          type: string
          enum:
            - likes
            - recasts
        cast:
          $ref: "#/components/schemas/CastDehydrated"
        user:
          $ref: "#/components/schemas/User"
    ReactionWithCastInfo:
      type: object
      required:
        - reaction_type
        - cast
        - reaction_timestamp
        - object
        - user
      properties:
        reaction_type:
          type: string
          enum:
            - like
            - recast
        cast:
          $ref: "#/components/schemas/CastWithInteractions"
        reaction_timestamp:
          type: string
          format: date-time
        object:
          type: string
          enum:
            - likes
            - recasts
        user:
          $ref: "#/components/schemas/UserDehydrated"
    RelevantFollowersResponse:
      type: object
      required:
        - top_relevant_followers_hydrated
        - all_relevant_followers_dehydrated
      properties:
        top_relevant_followers_hydrated:
          type: array
          items:
            $ref: "#/components/schemas/HydratedFollower"
        all_relevant_followers_dehydrated:
          type: array
          items:
            $ref: "#/components/schemas/DehydratedFollower"
    HydratedFollower:
      type: object
      properties:
        object:
          type: string
          enum:
            - follow
        user:
          $ref: "#/components/schemas/User"
    DehydratedFollower:
      type: object
      properties:
        object:
          type: string
          enum:
            - follow
        user:
          $ref: "#/components/schemas/UserDehydrated"
    UserDehydrated:
      type: object
      required:
        - object
        - fid
      properties:
        object:
          type: string
          enum:
            - user_dehydrated
        fid:
          $ref: "#/components/schemas/Fid"
    UserResponse:
      type: object
      required:
        - user
      properties:
        user:
          $ref: "#/components/schemas/User"
    ReactionsResponse:
      type: object
      required:
        - reactions
        - next
      properties:
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/ReactionWithCastInfo"
        next:
          $ref: "#/components/schemas/NextCursor"
    StorageAllocationsResponse:
      type: object
      properties:
        total_active_units:
          type: integer
          example: 13
        allocations:
          type: array
          items:
            $ref: "#/components/schemas/StorageAllocation"
    StorageAllocation:
      type: object
      properties:
        object:
          type: string
          example: "storage_allocation"
        user:
          $ref: "#/components/schemas/UserDehydrated"
        units:
          type: integer
          example: 10
        expiry:
          type: string
          format: date-time
          example: "2024-10-08T22:03:49.000Z"
        timestamp:
          type: string
          format: date-time
          example: "2023-10-09T22:03:49.000Z"
    StorageUsageResponse:
      type: object
      properties:
        object:
          type: string
          example: "storage_usage"
        user:
          $ref: "#/components/schemas/UserDehydrated"
        casts:
          $ref: "#/components/schemas/StorageObject"
        reactions:
          $ref: "#/components/schemas/StorageObject"
        links:
          $ref: "#/components/schemas/StorageObject"
        verified_addresses:
          $ref: "#/components/schemas/StorageObject"
        username_proofs:
          $ref: "#/components/schemas/StorageObject"
        signers:
          $ref: "#/components/schemas/StorageObject"
        total_active_units:
          type: integer
          example: 2
    StorageObject:
      type: object
      properties:
        object:
          type: string
          example: "storage"
        used:
          type: integer
          example: 3659
        capacity:
          type: integer
          example: 10000
    BulkUsersResponse:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
    UsersResponse:
      type: object
      required:
        - users
        - next
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
        next:
          $ref: "#/components/schemas/NextCursor"
    BulkUsersByAddressResponse:
      type: object
      additionalProperties:
        type: array
        items:
          $ref: "#/components/schemas/User"
    FeedType:
      type: string
      enum:
        - following
        - filter
    FilterType:
      type: string
      enum:
        - fids
        - parent_url
        - channel_id
        - embed_url
        - global_trending
    FnameAvailabilityResponse:
      type: object
      required:
        - available
      properties:
        available:
          type: boolean
    NeynarFrame:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the frame.
        name:
          type: string
          description: Name of the frame.
        link:
          type: string
          format: uri
          description: Generated link for the frame's first page.
        pages:
          type: array
          items:
            $ref: "#/components/schemas/NeynarFramePage"
        valid:
          type: boolean
          description: Indicates if the frame is valid.
      required:
        - uuid
        - name
        - pages
        - link
    NeynarFramePage:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier for the page.
        version:
          type: string
          description: The version of the page schema.
        title:
          type: string
          description: The title of the page.
        image:
          $ref: "#/components/schemas/NeynarPageImage"
        buttons:
          type: array
          items:
            $ref: "#/components/schemas/NeynarPageButton"
        input:
          $ref: "#/components/schemas/NeynarPageInput"
      required:
        - uuid
        - version
        - title
        - image
        - buttons
        - input
    NeynarPageImage:
      type: object
      properties:
        url:
          type: string
          format: uri
          description: The URL of the page's image.
        aspect_ratio:
          type: string
          description: The aspect ratio of the image.
          enum:
            - "1.91:1"
            - "1:1"
      required:
        - url
        - aspect_ratio
    NeynarPageButton:
      type: object
      properties:
        title:
          type: string
          description: The title of the button.
        action_type:
          type: string
          description: The type of action that the button performs.
          enum:
            - "post"
            - "post_redirect"
            - "mint"
            - "link"
        next_page:
          oneOf:
            - $ref: "#/components/schemas/NeynarNextFramePage"
            - $ref: "#/components/schemas/NeynarNextFramePageRedirect"
            - $ref: "#/components/schemas/NeynarNextFramePageMintUrl"
      required:
        - title
        - action_type
        - next_page
    NeynarPageInput:
      type: object
      properties:
        text:
          type: object
          properties:
            enabled:
              type: boolean
              description: Indicates if text input is enabled.
            placeholder:
              type: string
              description: The placeholder text for the input.
          required:
            - enabled
    NeynarNextFramePage:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: The UUID of the next page.
      required:
        - uuid
    NeynarNextFramePageRedirect:
      type: object
      properties:
        redirect_url:
          type: string
          format: uri
          description: The URL to redirect to.
      required:
        - redirect_url
    NeynarNextFramePageMintUrl:
      type: object
      properties:
        mint_url:
          type: string
          description: The URL for minting, specific to the mint action.
      required:
        - mint_url
    NeynarFrameCreationRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the frame.
        pages:
          type: array
          items:
            $ref: "#/components/schemas/NeynarFramePage"
      required:
        - name
        - pages
    NeynarFrameUpdateRequest:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          description: The UUID of the frame to update.
        pages:
          type: array
          items:
            $ref: "#/components/schemas/NeynarFramePage"
      required:
        - name
        - pages
    ValidatedFrameAction:
      type: object
      required:
        - button
        - cast
        - interactor
        - timestamp
      properties:
        object:
          type: string
          enum:
            - validated_frame_action
        interactor:
          $ref: "#/components/schemas/User"
        button:
          $ref: "#/components/schemas/FrameActionButton"
        input:
          $ref: "#/components/schemas/FrameInput"
        state:
          $ref: "#/components/schemas/FrameState"
        cast:
          $ref: "#/components/schemas/CastWithInteractions"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        signer:
          type: object
          properties:
            client: 
              $ref: "#/components/schemas/User"
    ValidateFrameActionResponse:
      type: object
      required:
        - valid
      properties:
        valid:
          type: boolean
          example: true
        action:
          $ref: "#/components/schemas/ValidatedFrameAction"
        interactor:
          $ref: "#/components/schemas/User"
        button:
          $ref: "#/components/schemas/FrameActionButton"
        cast:
          $ref: "#/components/schemas/CastWithInteractions"
    UserFIDResponse:
      type: object
      required:
        - fid
      properties:
        fid:
          type: integer
    RegisterUserReqBody:
      type: object
      required:
        - signature
        - fid
        - requested_user_custody_address
        - deadline
      properties:
        signature:
          type: string
        fid:
          type: number
        requested_user_custody_address:
          type: string
        deadline:
          type: number
        fname:
          type: string
    RegisterUserResponse:
      type: object
      required:
        - success
        - message
        - signer
      properties:
        success:
          type: boolean
          enum:
            - true
        message:
          type: string
        signer:
          $ref: "#/components/schemas/Signer"
    UsersActiveChannelsResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        channels:
          type: array
          items:
            $ref: "#/components/schemas/Channel"
    DeleteFrameResponse:
      type: object
      properties:
        success:
          type: boolean
        uuid:
          type: string
          format: uuid

  parameters:
    ApiKey:
      name: api_key
      in: header
      required: true
      schema:
        type: string
        default: NEYNAR_API_DOCS
      description: API key required for authentication.

  responses:
    401Response:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    404Response:
      description: "Resource not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    400Response:
      description: "Bad Request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    403Response:
      description: "Forbidden"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    409Response:
      description: "Conflict"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    500Response:
      description: "Server Error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"

tags:
  - name: User
    description: Operations related to user
    externalDocs:
      description: More info about user
      url: https://docs.neynar.com/reference/user-operations
  - name: Signer
    description: Operations related to signer
    externalDocs:
      description: More info about signer
      url: https://docs.neynar.com/reference/signer-operations
  - name: Cast
    description: Operations related to cast
    externalDocs:
      description: More info about cast
      url: https://docs.neynar.com/reference/cast-operations
  - name: Feed
    description: Operations related to feed
    externalDocs:
      description: More info about feed
      url: https://docs.neynar.com/reference/feed-operations
  - name: Reaction
    description: Operations related to reaction
    externalDocs:
      description: More info about reaction
      url: https://docs.neynar.com/reference/reaction-operations
  - name: Notifications
    description: Operations related to notifications
    externalDocs:
      description: More info about notifications
      url: https://docs.neynar.com/reference/notifications-operations
  - name: Channel
    description: Operations related to channels
    externalDocs:
      description: More info about channels
      url: https://docs.neynar.com/reference/channel-operations
  - name: Follows
    description: Operations related to follows
    externalDocs:
      description: More info about follows
      url: https://docs.neynar.com/reference/follows-operations
  - name: Storage
    description: Operations related to storage
    externalDocs:
      description: More info about storage
      url: https://docs.neynar.com/reference/storage-operations
  - name: Frame
    description: Operations related to frames
    externalDocs:
      description: More info about frames
      url: https://docs.neynar.com/reference/frame-operations
paths:
  /farcaster/user/fid:
    get:
      tags:
        - User
      summary: Fetches fid to assign it new user
      description: Fetches fid to assign it new user
      externalDocs:
        url: https://docs.neynar.com/reference/get-fresh-fid
      operationId: get-fresh-fid
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFIDResponse"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/signer:
    get:
      tags:
        - Signer
      summary: Fetches the status of a signer
      description: Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
      externalDocs:
        url: https://docs.neynar.com/reference/signer
      operationId: signer
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: signer_uuid
          required: true
          in: query
          example: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
          schema:
            $ref: "#/components/schemas/SignerUUID"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signer"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
    post:
      tags:
        - Signer
      summary: Creates a signer and returns the signer status
      description: |
        Creates a signer and returns the signer status. \
        **Note**: While tesing please reuse the signer, it costs money to approve a signer.
      externalDocs:
        url: https://docs.neynar.com/reference/create-signer
      operationId: create-signer
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signer"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/signer/signed_key:
    post:
      tags:
        - Signer
      summary: Register Signed Key
      description: Registers an app fid, deadline and a signature. Returns the signer status with an approval url.
      externalDocs:
        url: https://docs.neynar.com/reference/register-signed-key
      operationId: register-signed-key
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterSignerKeyReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              app_fid: 18949
              deadline: 1693627665
              signature: "0xe5d95c391e165dac8efea373efe301d3ea823e1f41713f8943713cbe2850566672e33ff3e17e19abb89703f650a2597f62b4fda0ce28ca15d59eb6d4e971ee531b"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Signer"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/user/search:
    get:
      tags:
        - User
      summary: Search for Usernames
      description: Search for Usernames
      externalDocs:
        url: https://docs.neynar.com/reference/user-search
      operationId: user-search
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: q
          in: query
          required: true
          example: r
          schema:
            type: string
        - name: viewer_fid
          in: query
          required: true
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSearchResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/user/bulk:
    get:
      tags:
        - User
      summary: Fetches information about multiple users based on FIDs
      description: Fetches information about multiple users based on FIDs
      externalDocs:
        url: https://docs.neynar.com/reference/user-bulk
      operationId: user-bulk
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: fids
          description: Comma separated list of FIDs, up to 100 at a time
          in: query
          required: true
          example: 194, 191, 6131
          schema:
            type: string
        - name: viewer_fid
          in: query
          required: false
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkUsersResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/user/active:
    get:
      tags:
        - User
      summary: Fetches active users based on Warpcast active algorithm
      description: Fetches active users, information is updated every 12 hours
      externalDocs:
        url: https://docs.neynar.com/reference/active-users
      operationId: active-users
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: limit
          in: query
          required: false
          example: 10
          schema:
            type: integer
            format: int32
            default: 25
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/user/bulk-by-address:
    get:
      tags:
        - User
      summary: Fetches users based on Eth or Sol addresses
      description:
        Fetches all users based on multiple Ethereum or Solana addresses.


        Each farcaster user has a custody Ethereum address and optionally verified Ethereum or Solana addresses. This endpoint returns all users that have any of the given addresses as their custody or verified Ethereum or Solana addresses.


        A custody address can be associated with only 1 farcaster user at a time but a verified address can be associated with multiple users.

        You can pass in Ethereum and Solana addresses, comma separated, in the same request. The response will contain users associated with the given addresses.
      externalDocs:
        url: https://docs.neynar.com/reference/user-bulk-by-address
      operationId: user-bulk-by-address
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: addresses
          description: Comma separated list of Ethereum addresses, up to 350 at a time
          in: query
          required: true
          example: 0xa6a8736f18f383f1cc2d938576933e5ea7df01a1,0x7cac817861e5c3384753403fb6c0c556c204b1ce
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkUsersByAddressResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
  /farcaster/user:
    patch:
      tags:
        - User
      summary: Update user profile
      description: |
        Update user profile \
        (In order to update user's profile `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/update-user
      operationId: update-user
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              bio: "Hey there..!!!"
              pfp_url: "https://i.imgur.com/keIWEYM.jpg"
              username: "dan"
              display_name: "Dan Romero"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
    post:
      tags:
        - User
      summary: Register account on farcaster
      description: |
        Register account on farcaster.
      externalDocs:
        url: https://docs.neynar.com/reference/register-user
      operationId: register-user
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserReqBody"
            example:
              signature: "0xe0cd4da80fb30d59e3ce5a10768c35043bc31487362977cf0a3acf15338a730f4aa329568055c943d777dd81fcb60292f15fc0bcf644da1943b6aa0b3ea9bdcf1b"
              fid: 321518
              requested_user_custody_address: "0x2c57e688154C082955cF205F4A335E852D3e25f1"
              deadline: 1707371935
              fname: "desired_fname"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterUserResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "401":
          $ref: "#/components/responses/401Response"
        "404":
          $ref: "#/components/responses/404Response"
        "409":
          $ref: "#/components/responses/409Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/cast:
    get:
      tags:
        - Cast
      summary: Retrieve cast for a given hash or Warpcast URL
      description: Gets information about an individual cast by passing in a Warpcast web URL or cast hash
      externalDocs:
        url: https://docs.neynar.com/reference/cast
      operationId: cast
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: identifier
          required: true
          in: query
          example: "https://warpcast.com/rish/0x9288c1"
          description: Cast identifier (Its either a url or a hash)
          schema:
            type: string
        - name: type
          required: true
          in: query
          example: url
          schema:
            $ref: "#/components/schemas/CastParamType"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CastResponse"
        "400":
          $ref: "#/components/responses/400Response"
    post:
      tags:
        - Cast
      summary: Posts a cast
      description: |
        Posts a cast or cast reply. Works with mentions and embeds.  
        (In order to post a cast `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/post-cast
      operationId: post-cast
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCastReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              text: "Writing to @farcaster via the @neynar APIs 🪐"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostCastResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
    delete:
      tags:
        - Cast
      summary: Delete a cast
      description: |
        Delete an existing cast. \
        (In order to delete a cast `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/delete-cast
      operationId: delete-cast
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteCastReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              target_hash: "0x1ea99cbed57e4020314ba3fadd7c692d2de34d5f"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/casts:
    get:
      tags:
        - Cast
      summary: Gets information about an array of casts
      description: Retrieve multiple casts using their respective hashes.
      externalDocs:
        url: https://docs.neynar.com/reference/casts
      operationId: casts
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: casts
          in: query
          required: true
          description: "Hashes of the cast to be retrived (Comma separated)"
          example: "0xa896906a5e397b4fec247c3ee0e9e4d4990b8004,0x27ff810f7f718afd8c40be236411f017982e0994"
          schema:
            type: string
        - name: viewer_fid
          in: query
          required: false
          description: adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: sort_type
          in: query
          required: false
          description: "Optional parameter to sort the casts based on different criteria"
          schema:
            type: string
            enum:
              - trending
              - likes
              - recasts
              - replies
              - recent
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CastsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed:
    get:
      summary: Retrieve casts based on filters
      externalDocs:
        url: https://docs.neynar.com/reference/feed
      operationId: feed
      tags:
        - Feed
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: feed_type
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/FeedType"
            default: following
          example: filter
          description: Defaults to following (requires fid or address). If set to filter (requires filter_type)
        - name: filter_type
          in: query
          schema:
            $ref: "#/components/schemas/FilterType"
          example: fids
          description: Used when feed_type=filter. Can be set to fids (requires fids) or parent_url (requires parent_url) or channel_id (requires channel_id)
        - name: fid
          in: query
          schema:
            $ref: "#/components/schemas/Fid"
          description: (Optional) fid of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
        - name: fids
          in: query
          schema:
            type: string
          example: 3,2,194
          description: Used when filter_type=fids . Create a feed based on a list of fids. Max array size is 250. Requires feed_type and filter_type.
        - name: parent_url
          in: query
          schema:
            type: string
          description: Used when filter_type=parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
        - name: channel_id
          in: query
          schema:
            type: string
          description: Used when filter_type=channel_id can be used to fetch all casts under a channel. Requires feed_type and filter_type
        - name: embed_url
          in: query
          schema:
            type: string
          description: Used when filter_type=embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
        - name: with_recasts
          in: query
          description: Include recasts in the response, true by default
          schema:
            type: boolean
            default: true
        - name: with_replies
          in: query
          description: Include replies in the response, false by default
          schema:
            type: boolean
            default: false
        - name: limit
          in: query
          description: Number of results to retrieve (default 25, max 100)
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed/following:
    get:
      summary: Retrieve feed based on who a user is following
      externalDocs:
        url: https://docs.neynar.com/reference/feed-following
      operationId: feed-following
      tags:
        - Feed
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: fid
          in: query
          required: true
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
          description: fid of user whose feed you want to create
        - name: with_recasts
          in: query
          description: Include recasts in the response, true by default
          schema:
            type: boolean
            default: true
        - name: with_replies
          in: query
          description: Include replies in the response, false by default
          schema:
            type: boolean
            default: false
        - name: limit
          in: query
          description: Number of results to retrieve (default 25, max 100)
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed/channels:
    get:
      summary: Retrieve feed based on channel ids
      externalDocs:
        url: https://docs.neynar.com/reference/feed-channels
      operationId: feed-channels
      tags:
        - Feed
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: channel_ids
          in: query
          required: true
          example: neynar,farcaster
          schema:
            type: string
          description: comma separated list of channel ids e.g. neynar,farcaster
        - name: with_recasts
          in: query
          description: Include recasts in the response, true by default
          schema:
            type: boolean
            default: true
        - name: with_replies
          in: query
          description: Include replies in the response, false by default
          schema:
            type: boolean
            default: false
        - name: limit
          in: query
          description: Number of results to retrieve (default 25, max 100)
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed/frames:
    get:
      summary: Retrieve feed of casts with Frames, reverse chronological order
      externalDocs:
        url: https://docs.neynar.com/reference/feed-frames
      operationId: feed-frames
      tags:
        - Feed
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: limit
          in: query
          description: Number of results to retrieve (default 25, max 100)
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed/user/{fid}/popular:
    get:
      summary: Retrieve 10 most popular casts for a user
      externalDocs:
        url: https://docs.neynar.com/reference/feed-user-popular
      operationId: feed-user-popular
      tags:
        - Feed
      description: Retrieve 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: fid
          in: path
          required: true
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
          description: fid of user whose feed you want to create
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkCastsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/feed/user/{fid}/replies_and_recasts:
    get:
      summary: Retrieve recent replies and recasts for a user
      description: Retrieve recent replies and recasts for a given user FID; sorted by most recent first
      externalDocs:
        url: https://docs.neynar.com/reference/feed-user-replies-recasts
      operationId: feed-user-replies-recasts
      tags:
        - Feed
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: fid
          in: path
          required: true
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
          description: fid of user whose replies and recasts you want to fetch
        - name: limit
          in: query
          description: Number of results to retrieve (default 25, max 100)
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 50
            example: 25
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/frame:
    get:
      tags:
        - Frame
      summary: Retrieve a frame by UUID
      description: Retrieve a frame by UUID, if it was made by the developer (identified by API key)
      operationId: lookup-neynar-frame
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: uuid
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the frame to retrieve
      responses:
        "200":
          description: A frame object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NeynarFrame"
        "404":
          $ref: "#/components/responses/404Response"
    post:
      tags:
        - Frame
      summary: Create a new frame
      description: Create a new frame with a list of pages.
      operationId: publish-neynar-frame
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NeynarFrameCreationRequest"
      responses:
        "200":
          description: Frame created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NeynarFrame"
        "400":
          $ref: "#/components/responses/400Response"
    put:
      tags:
        - Frame
      summary: Update an existing frame
      description: Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
      operationId: update-neynar-frame
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NeynarFrameUpdateRequest"
      responses:
        "200":
          description: Frame updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NeynarFrame"
        "404":
          $ref: "#/components/responses/404Response"
        "400":
          $ref: "#/components/responses/400Response"
    delete:
      tags:
        - Frame
      summary: Delete a frame
      description: Delete an existing frame, if it was made by the developer (identified by API key)
      operationId: delete-neynar-frame
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  format: uuid
      responses:
        "200":
          description: Frame deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteFrameResponse"
        "404":
          $ref: "#/components/responses/404Response"
  /farcaster/frame/list:
    get:
      tags:
        - Frame
      summary: Retrieve a list of frames
      description: Retrieve a list of frames made by the developer (identified by API key)
      operationId: fetch-neynar-frames
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      responses:
        "200":
          description: A list of frames
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NeynarFrame"
        "404":
          $ref: "#/components/responses/404Response"
  /farcaster/reaction:
    post:
      tags:
        - Reaction
      summary: Posts a reaction
      description: |
        Post a reaction (like or recast) to a given cast \
        (In order to post a reaction `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/post-reaction
      operationId: post-reaction
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReactionReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              target: "0x1ea99cbed57e4020314ba3fadd7c692d2de34d5f"
              reaction_type: like
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
    delete:
      tags:
        - Reaction
      summary: Delete a reaction
      description: |
        Delete a reaction (like or recast) to a given cast \
        (In order to delete a reaction `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/delete-reaction
      operationId: delete-reaction
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReactionReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              target: "0x1ea99cbed57e4020314ba3fadd7c692d2de34d5f"
              reaction_type: like
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/user/verification:
    post:
      tags:
        - User
      summary: Adds verification for an eth address for the user
      description: |
        Adds verification for an eth address for the user \
        (In order to add verification `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/add-verification
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddVerificationReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              address: "0x1ea99cbed57e4020314ba3fadd7c692d2de34d5f"
              block_hash: "0x191905a9201170abb55f4c90a4cc968b44c1b71cdf3db2764b775c93e7e22b29"
              eth_signature: "0x2fc09da1f4dcb723fefb91f77932c249c418c0af00c66ed92ee1f35002c80d6a1145280c9f361d207d28447f8f7463366840d3a9309036cf6954afd1fd331beb1b"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
    delete:
      tags:
        - User
      summary: Removes verification for an eth address for the user
      description: |
        Removes verification for an eth address for the user \
        (In order to delete verification `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/remove-verification
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveVerificationReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              address: "0x1ea99cbed57e4020314ba3fadd7c692d2de34d5f"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResponse"
  /farcaster/user/follow:
    post:
      tags:
        - User
      summary: Follow a user
      description: |
        Follow a user \
        (In order to follow a user `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/follow-user
      operationId: follow-user
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FollowReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              target_fids:
                - 3
                - 194
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkFollowResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
    delete:
      tags:
        - User
      summary: Unfollow a user
      description: |
        Unfollow a user \
        (In order to unfollow a user `signer_uuid` must be approved)
      externalDocs:
        url: https://docs.neynar.com/reference/unfollow-user
      operationId: unfollow-user
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FollowReqBody"
            example:
              signer_uuid: 19d0c5fd-9b33-4a48-a0e2-bc7b0555baec
              target_fids:
                - 3
                - 194
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkFollowResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
        "403":
          $ref: "#/components/responses/403Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/user/custody-address:
    get:
      tags:
        - User
      summary: "Lookup a user by custody-address"
      description: "Lookup a user by custody-address"
      operationId: lookup-user-by-custody-address
      externalDocs:
        url: https://docs.neynar.com/reference/lookup-user-by-custody-address
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: custody_address
          in: query
          required: true
          schema:
            type: string
          example: "0xd1b702203b1b3b641a699997746bd4a12d157909"
          description: Custody Address associated with mnemonic
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/404Response"
  /farcaster/frame/action:
    post:
      tags:
        - Frame
      summary: Posts a frame action
      description: |
        Post a frame action \
        (In order to post a frame action, you need to have an approved `signer_uuid`)

        The POST request to the post_url has a timeout of 5 seconds.
      externalDocs:
        url: https://docs.neynar.com/reference/post-frame-action
      operationId: post-frame-action
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrameActionReqBody"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrameActionResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/frame/validate:
    post:
      tags:
        - Frame
      summary: Validates a frame action against Farcaster Hub
      description: |
        Validates a frame against by an interacting user against a Farcaster Hub \
        (In order to validate a frame, message bytes from Frame Action must be provided in hex)
      externalDocs:
        url: https://docs.neynar.com/reference/validate-frame
      operationId: validate-frame
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message_bytes_in_hex
              properties:
                message_bytes_in_hex:
                  type: string
                  description: Hexadecimal string of message bytes.
                cast_reaction_context:
                  default: true
                  type: boolean
                  description: Adds viewer_context inside the cast object to indicate whether the interactor reacted to the cast housing the frame.
                follow_context:
                  default: false
                  type: boolean
                  description: Adds viewer_context inside the user (interactor) object to indicate whether the interactor follows or is followed by the cast author.
                signer_context:
                  default: false
                  type: boolean
                  description: Adds context about the app used by the user inside `frame.action`.
              example:
                message_bytes_in_hex: "0a49080d1085940118f6a6a32e20018201390a1a86db69b3ffdf6ab8acb6872b69ccbe7eb6a67af7ab71e95aa69f10021a1908ef011214237025b322fd03a9ddc7ec6c078fb9c56d1a72111214e3d88aeb2d0af356024e0c693f31c11b42c76b721801224043cb2f3fcbfb5dafce110e934b9369267cf3d1aef06f51ce653dc01700fc7b778522eb7873fd60dda4611376200076caf26d40a736d3919ce14e78a684e4d30b280132203a66717c82d728beb3511b05975c6603275c7f6a0600370bf637b9ecd2bd231e"
                cast_reaction_context: true
                follow_context: false
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateFrameActionResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "500":
          $ref: "#/components/responses/500Response"
  /farcaster/notifications:
    get:
      tags:
        - Notifications
      summary: Retrieve notifications for a given user
      description: Returns a list of notifications for a specific FID.
      externalDocs:
        url: https://docs.neynar.com/reference/notifications
      operationId: notifications
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: fid
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Fid"
          example: 194
          description: FID of the user you you want to fetch notifications for
        - name: limit
          in: query
          description: Number of results to retrieve (default 25, max 50)
          required: false
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 50
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/notifications/channel:
    get:
      tags:
        - Notifications
      summary: Retrieve notifications for a user in given channels
      description: Returns a list of notifications for a user in specific channels
      externalDocs:
        url: https://docs.neynar.com/reference/notifications
      operationId: notifications-channel
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: fid
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Fid"
          example: 194
          description: FID of the user you you want to fetch notifications for
        - name: channel_ids
          in: query
          required: true
          schema:
            type: string
          example: "neynar,farcaster"
          description: Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)
        - name: limit
          in: query
          description: Number of results to retrieve (default 25, max 50)
          required: false
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 50
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/notifications/parent_url:
    get:
      tags:
        - Notifications
      summary: Retrieve notifications for a user in given parent_urls
      description: Returns a list of notifications for a user in specific parent_urls
      externalDocs:
        url: https://docs.neynar.com/reference/notifications
      operationId: notifications-parent-url
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: fid
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Fid"
          example: 194
          description: FID of the user you you want to fetch notifications for
        - name: parent_urls
          in: query
          required: true
          schema:
            type: string
          example: "chain://eip155:1/erc721:0xd4498134211baad5846ce70ce04e7c4da78931cc"
          description: Comma separated parent_urls
        - name: limit
          in: query
          description: Number of results to retrieve (default 25, max 50)
          required: false
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 50
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/channel/list:
    get:
      tags:
        - Channel
      summary: Retrieve all channels with their details
      description: Returns a list of all channels with their details
      externalDocs:
        url: https://docs.neynar.com/reference/list-all-channels
      operationId: list-all-channels
      parameters:
        - $ref: "#/components/parameters/ApiKey"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelListResponse"
  /farcaster/channel/search:
    get:
      tags:
        - Channel
      summary: Search for channels based on id or name
      description: Returns a list of channels based on id or name
      externalDocs:
        url: https://docs.neynar.com/reference/search-channels
      operationId: search-channels
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: q
          in: query
          required: true
          schema:
            type: string
          example: "neynar"
          description: Channel ID or name for the channel being queried
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelListResponse"
  /farcaster/channel:
    get:
      tags:
        - Channel
      summary: Retrieve channel details by id
      description: Returns details of a channel
      externalDocs:
        url: https://docs.neynar.com/reference/channel-details
      operationId: channel-details
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: id
          in: query
          required: true
          schema:
            type: string
          example: "neynar"
          description: Channel ID for the channel being queried
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelResponse"
        "404":
          $ref: "#/components/responses/404Response"
  /farcaster/channel/followers:
    get:
      tags:
        - Channel
      summary: Retrieve followers for a given channel
      description: Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
      externalDocs:
        url: https://docs.neynar.com/reference/channel-followers
      operationId: channel-followers
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: id
          in: query
          required: true
          schema:
            type: string
          example: "founders"
          description: Channel ID for the channel being queried
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Number of followers to retrieve (default 25, max 1000)
          required: false
          schema:
            type: integer
            default: 25
            minimum: 15
            maximum: 1000
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/channel/user:
    get:
      tags:
        - Channel
      summary: Get channels that a user is active in
      description: Fetches all channels that a user has casted in, in reverse chronological order. Once follows are on the protocol, we will allow choosing for different types of user activity (e.g. casted, followed, etc.).
      operationId: active-channels
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: fid
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Fid"
          description: The user's fid (identifier)
          example: 194
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersActiveChannelsResponse"
        "400":
          $ref: "#/components/responses/400Response"
        "404":
          $ref: "#/components/responses/400Response"
  /farcaster/channel/users:
    get:
      tags:
        - Channel
      summary: Retrieve users who are active in a channel
      description: Returns a list of users who are active in a given channel, ordered by ascending FIDs
      externalDocs:
        url: https://docs.neynar.com/reference/channel-users
      operationId: channel-users
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: id
          in: query
          required: true
          schema:
            type: string
          example: "neynar"
          description: Channel ID for the channel being queried
        - name: has_root_cast_authors
          in: query
          required: true
          schema:
            type: boolean
          example: false
          description: Include users who posted the root cast in the channel
        - name: has_cast_likers
          in: query
          required: false
          schema:
            type: boolean
          example: false
          description: Include users who liked a cast in the channel
        - name: has_cast_recasters
          in: query
          required: false
          schema:
            type: boolean
          example: false
          description: Include users who recasted a cast in the channel
        - name: has_reply_authors
          in: query
          required: false
          schema:
            type: boolean
          example: false
          description: Include users who replied to a cast in the channel
        - name: cursor
          in: query
          description: Pagination cursor.
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Number of results to retrieve (default 25, max 100)
          required: false
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
          example: 25
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersResponse"
        "404":
          $ref: "#/components/responses/404Response"
  /farcaster/channel/trending:
    get:
      tags:
        - Channel
      summary: Retrieve trending channels based on activity
      description: Returns a list of trending channels based on activity
      externalDocs:
        url: https://docs.neynar.com/reference/trending-channels
      operationId: trending-channels
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: time_window
          in: query
          required: false
          schema:
            type: string
            enum:
              - 1d
              - 7d
              - 30d
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelListResponse"
  /farcaster/followers/relevant:
    get:
      tags:
        - Follows
      summary: Retrieve relevant followers for a given user
      description: Returns a list of relevant followers for a specific FID.
      externalDocs:
        url: https://docs.neynar.com/reference/relevant-followers
      operationId: relevant-followers
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: target_fid
          in: query
          required: true
          description: User who's profile you are looking at
          schema:
            $ref: "#/components/schemas/Fid"
        - name: viewer_fid
          in: query
          required: true
          description: Viewer who's looking at the profile
          schema:
            $ref: "#/components/schemas/Fid"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RelevantFollowersResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/reactions/user:
    get:
      tags:
        - Reaction
      summary: Fetches reactions for a given user
      description: Fetches reactions for a given user
      operationId: reactions-user
      externalDocs:
        url: https://docs.neynar.com/reference/reactions
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: fid
          in: query
          required: true
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
        - name: type
          in: query
          required: true
          description: Type of reaction to fetch (likes or recasts or all)
          example: likes
          schema:
            $ref: "#/components/schemas/ReactionsType"
        - name: limit
          in: query
          description: Number of results to retrieve (default 25, max 100)
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
        - name: cursor
          in: query
          description: Pagination cursor.
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReactionsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/fname/availability:
    get:
      tags:
        - fname
      summary: Check if a given fname is available
      description: Check if a given fname is available
      operationId: fname-availability
      externalDocs:
        url: https://docs.neynar.com/reference/fname-availability
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: fname
          in: query
          required: true
          example: "farcaster"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FnameAvailabilityResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/storage/allocations:
    get:
      tags:
        - Storage
      summary: Fetches storage allocations for a given user
      description: Fetches storage allocations for a given user
      operationId: storage-allocations
      externalDocs:
        url: https://docs.neynar.com/reference/storage-allocations
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: fid
          in: query
          required: true
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
      responses:
        "200":
          description: A list of storage allocations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorageAllocationsResponse"
        "400":
          $ref: "#/components/responses/400Response"
  /farcaster/storage/usage:
    get:
      tags:
        - Storage
      summary: Fetches storage usage for a given user
      description: Fetches storage usage for a given user
      operationId: storage-usage
      externalDocs:
        url: https://docs.neynar.com/reference/storage-usage
      parameters:
        - $ref: "#/components/parameters/ApiKey"
        - name: fid
          in: query
          required: true
          example: 3
          schema:
            $ref: "#/components/schemas/Fid"
      responses:
        "200":
          description: Details of storage usage
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StorageUsageResponse"
        "400":
          $ref: "#/components/responses/400Response"